{"version":3,"sources":["webpack:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?817a","webpack:///./themes/services/api/HealthStatusService.ts","webpack:///./pages/admin/healthStatuses/index.tsx"],"names":["window","__NEXT_P","push","HealthStatus","context","name","BaseApi","Index","healths","total","useBaseHook","t","notify","redirect","setStore","getAuth","getStore","useState","hiddenDeleteBtn","setHiddenDeleteBtn","selectedIds","setSelectedIds","healthService","HealthService","confirmRef","React","createRef","tableRef","checkPermission","usePermissionHook","createPer","deletePer","columns","title","dataIndex","key","sorter","filterable","fixed","render","text","record","onClick","id","patientCode","patientName","roomCode","bedCode","filterDate","width","value","String","substr","doctorCode","doctorName","fetchData","values","a","to","index","error","code","message","onDelete","ids","current","reload","className","hidden","type","danger","show","ref","data","rowSelection","selectedRowKeys","onChange","length","onChangeSelection","scroll","x","onSubmit","content","getInitialProps","ctx","defaultOptions","filters","sorting","query","GridTableHelper","getOptions","namespacesRequired","getData","defaultQuery","makeQuery","permissions"],"mappings":"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","file":"static\\3bqcv_cRHHIBfHp_4lMA9\\pages\\admin\\healthStatuses.js","sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/healthStatuses\",\n      function () {\n        return require(\"private-next-pages/admin/healthStatuses/index.tsx\");\n      }\n    ]);\n  ","import BaseApi from './BaseService'\r\n\r\nclass HealthStatus extends BaseApi {\r\n  constructor(context?: Context){\r\n    super(context)\r\n    this.name = 'healthStatuses';\r\n  }\r\n}\r\n\r\nexport default HealthStatus","import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper, FilterInput } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button } from 'antd';\r\nimport HealthService from 'themes/services/api/HealthStatusService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport {PlusCircleOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\nconst formaterDate = (value: any) => {\r\n  value = value? String(value) : \"\"\r\n  value = value.substr(0,10)\r\n  return `${value}`\r\n}\r\n\r\nconst Index = ({ healths, total }: { healths: HealthStatus[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const healthService = new HealthService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    // \"admin.healthStatuses\": \"C\",\r\n    'doctor.healthStatuses': 'C'\r\n  })\r\n  const deletePer = checkPermission({\r\n    // \"admin.healthStatuses\": \"D\",\r\n    \"doctor.healthStatuses\": \"D\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t(\"patient\"),\r\n      dataIndex: 'patientName',\r\n      key: 'patients.fullname',\r\n      sorter:true,\r\n      filterable: true,\r\n      fixed:'left',\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.healthStatuses.edit', \r\n        { id: record.id })}>{record.patientCode} - {record.patientName} - {record.roomCode} - {record.bedCode}</a>\r\n    },\r\n    {\r\n      title: t(\"healthStatuses.date\"),\r\n      dataIndex: 'date',\r\n      key: 'date',\r\n      sorter:true,\r\n      filterDate: true,\r\n      fixed:'left',\r\n      width: '9%',\r\n      render: (text: string, record: any) => <div>{formaterDate(text)}</div>\r\n    },\r\n    {\r\n      title: t('doctor'),\r\n      dataIndex: 'doctorName',\r\n      key: 'users.fullname',\r\n      sorter:true,\r\n      filterable: true,\r\n      render: (text: string, record: any) => <div>{record.doctorCode} - {record.doctorName}</div>\r\n    },\r\n    {\r\n      title: t(\"healthStatuses.weight\") + \" (Kg)\",\r\n      dataIndex: 'weight',\r\n      key: 'weight',\r\n    },\r\n    {\r\n      title: t(\"healthStatuses.bloodPressure\") + \" (mmHg)\",\r\n      dataIndex: 'bloodPressure',\r\n      key: 'bloodPressure',\r\n    },\r\n    {\r\n      title: t(\"healthStatuses.bloodSugar\") + \" (mg/dL)\",\r\n      dataIndex: 'bloodSugar',\r\n      key: 'bloodSugar',\r\n    },\r\n    {\r\n      title: t(\"healthStatuses.heartRate\") + \" (BPM)\",\r\n      dataIndex: 'heartRate',\r\n      key: 'heartRate',\r\n    },\r\n    {\r\n      title: t(\"note\"),\r\n      dataIndex: 'note',\r\n      key: 'note',\r\n    },\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, healths]: any[] = await to(healthService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return healths\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(healthService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.healthStatuses.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      \r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={healths}\r\n        rowSelection={{selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n        scroll={{ x:1500 }}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let healthService = new HealthService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, healths]: any[] = await to(healthService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    error: error,\r\n    healths: useBaseHook.getData(healths, \"data\", []),\r\n    total: useBaseHook.getData(healths, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"doctor.healthStatuses\": \"R\",\r\n  \"nurse.healthStatuses\": \"R\"\r\n};\r\nexport default Index"],"sourceRoot":""}