{"version":3,"sources":["webpack:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?25f6","webpack:///./pages/admin/nurseAssignments/index.tsx","webpack:///./themes/services/api/NurseAssignmentService.ts"],"names":["window","__NEXT_P","push","formaterDate","value","String","substr","Index","nurseAssigns","total","useBaseHook","t","notify","redirect","setStore","getAuth","getStore","useState","hiddenDeleteBtn","setHiddenDeleteBtn","selectedIds","setSelectedIds","nurseAssignService","NurseAssignService","confirmRef","React","createRef","tableRef","checkPermission","usePermissionHook","createPer","deletePer","columns","title","dataIndex","key","sorter","filterable","render","text","record","onClick","id","nurseCode","nurseName","patientCode","patientName","roomCode","bedCode","filterDate","width","fetchData","values","a","to","index","error","code","message","onDelete","ids","current","reload","className","hidden","type","danger","show","ref","data","rowSelection","selectedRowKeys","onChange","length","onChangeSelection","onSubmit","content","getInitialProps","ctx","defaultOptions","filters","sorting","query","GridTableHelper","getOptions","namespacesRequired","getData","defaultQuery","makeQuery","permissions","NurseAssignment","context","name","BaseApi"],"mappings":"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","file":"static\\3bqcv_cRHHIBfHp_4lMA9\\pages\\admin\\nurseAssignments.js","sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/nurseAssignments\",\n      function () {\n        return require(\"private-next-pages/admin/nurseAssignments/index.tsx\");\n      }\n    ]);\n  ","import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper, FilterInput } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button } from 'antd';\r\nimport NurseAssignService from 'themes/services/api/NurseAssignmentService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport {PlusCircleOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\nconst formaterDate = (value: any) => {\r\n  value = value? String(value) : \"\"\r\n  value = value.substr(0,10)\r\n  return `${value}`\r\n}\r\n\r\nconst Index = ({ nurseAssigns, total }: { nurseAssigns: NurseAssignment[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const nurseAssignService = new NurseAssignService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"admin.nurseAssignments\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"admin.nurseAssignment\": \"D\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t(\"nurse\"),\r\n      dataIndex: 'nurseName',\r\n      key: 'users.fullname',\r\n      sorter:true,\r\n      filterable: true,\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.nurseAssignments.edit', \r\n        { id: record.id })}>{record.nurseCode} - {record.nurseName}</a>\r\n    },\r\n    {\r\n      title: t('patient'),\r\n      dataIndex: 'patientName',\r\n      key: 'patients.fullname',\r\n      sorter:true,\r\n      filterable: true,\r\n      render: (text: string, record: any) => <div>{record.patientCode} - {record.patientName} - {record.roomCode} - {record.bedCode}</div>\r\n    },\r\n    {\r\n      title: t(\"nurseAssignments.dateBegin\"),\r\n      dataIndex: 'dateBegin',\r\n      key: 'dateBegin',\r\n      sorter:true,\r\n      filterDate: true,\r\n      width: '15%',\r\n      render: (text: string, record: any) => <div>{formaterDate(text)}</div>\r\n    },\r\n    {\r\n      title: t(\"nurseAssignments.dateEnd\"),\r\n      dataIndex: 'dateEnd',\r\n      key: 'dateEnd',\r\n      sorter:true,\r\n      filterDate: true,\r\n      width: '15%',\r\n      render: (text: string, record: any) => <div>{formaterDate(text)}</div>\r\n    },\r\n    {\r\n      title: t(\"note\"),\r\n      dataIndex: 'note',\r\n      key: 'note',\r\n    },\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, nurseAssigns]: any[] = await to(nurseAssignService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return nurseAssigns\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(nurseAssignService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.nurseAssignments.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      \r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={nurseAssigns}\r\n        rowSelection={{selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let nurseAssignService = new NurseAssignService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, nurseAssigns]: any[] = await to(nurseAssignService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\r\n    error: error,\r\n    nurseAssigns: useBaseHook.getData(nurseAssigns, \"data\", []),\r\n    total: useBaseHook.getData(nurseAssigns, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.nurseAssignments\": \"R\",\r\n  \"nurse.nurseAssignments\": \"R\",\r\n  \"admin.users.nurseAssignments\": \"R\"\r\n};\r\nexport default Index","import BaseApi from './BaseService'\r\n\r\nclass NurseAssignment extends BaseApi {\r\n  constructor(context?: Context){\r\n    super(context)\r\n    this.name = 'nurseAssignments';\r\n  }\r\n}\r\n\r\nexport default NurseAssignment"],"sourceRoot":""}