{"version":3,"sources":["webpack:///./pages/admin/userGroups/index.tsx","webpack:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?c268","webpack:///./themes/services/api/UserGroupService.ts"],"names":["Index","Typography","Title","Text","userGroups","total","useBaseHook","t","notify","redirect","setStore","getAuth","getStore","useState","hiddenDeleteBtn","setHiddenDeleteBtn","selectedIds","setSelectedIds","userGroupService","UserGroupService","confirmRef","React","createRef","tableRef","checkPermission","usePermissionHook","createPer","deletePer","updatePer","columns","title","dataIndex","key","filterable","sorter","render","text","record","onClick","id","name","type","className","fetchData","values","a","to","index","error","code","message","onDelete","ids","current","reload","description","hidden","danger","show","ref","data","rowSelection","selectedRowKeys","onChange","length","onChangeSelection","scroll","x","scrollToFirstRowOnChange","onSubmit","content","getInitialProps","ctx","defaultOptions","filters","sorting","query","GridTableHelper","getOptions","namespacesRequired","getData","defaultQuery","makeQuery","permissions","window","__NEXT_P","push","UserGroups","context","BaseApi"],"mappings":"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","file":"static\\3bqcv_cRHHIBfHp_4lMA9\\pages\\admin\\userGroups.js","sourcesContent":["import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button, Typography, Row, Col } from 'antd';\r\nimport UserGroupService from 'themes/services/api/UserGroupService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { UsergroupAddOutlined } from '@ant-design/icons';\r\nimport BreadCrumb from 'themes/components/Breadcumb'\r\nimport { PlusCircleOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nconst { Title, Text } = Typography;\r\n\r\nconst Index = ({ userGroups, total }: { userGroups: UserGroup[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const userGroupService = new UserGroupService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"root\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"root\": \"D\"\r\n  })\r\n  const updatePer = checkPermission({\r\n    \"root\": \"U\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t('name'),\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      filterable:true,\r\n      sorter:true,\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.userGroups.edit', { id: record.id })}>{record.name}</a>\r\n    },\r\n    {\r\n      title: t(\"description\"),\r\n      dataIndex: 'description',\r\n      key: 'description',\r\n    },\r\n    {\r\n      title: t(\"userGroups.decentralization\"),\r\n      dataIndex: 'decentralization',\r\n      key: \"decentralization\",\r\n      render: (text: string, record: any) => {\r\n        if (createPer || updatePer) {\r\n          return (\r\n          <Button onClick={() => redirect(\"frontend.admin.userGroups.role\", { id: record.id, name: record.name })} type=\"primary\" className='btn-top'>\r\n            <PlusCircleOutlined />\r\n            {t('userGroups.add')}\r\n          </Button>\r\n          )\r\n        } else return \"\"\r\n      }   \r\n    }\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, userGroups]: any[] = await to(userGroupService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return userGroups\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(userGroupService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout title={t(\"pages:userGroups.index.title\")} description={t(\"pages:userGroups.index.description\")}>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.userGroups.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={userGroups}\r\n        rowSelection={{ selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n        scroll={{\r\n          x: 600, \r\n          scrollToFirstRowOnChange: true\r\n        }}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let userGroupService = new UserGroupService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, userGroups]: any[] = await to(userGroupService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\r\n    error: error,\r\n    userGroups: useBaseHook.getData(userGroups, \"data\", []),\r\n    total: useBaseHook.getData(userGroups, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"root\": \"R\"\r\n}\r\nexport default Index\r\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/userGroups\",\n      function () {\n        return require(\"private-next-pages/admin/userGroups/index.tsx\");\n      }\n    ]);\n  ","import BaseApi from './BaseService'\r\n\r\nclass UserGroups extends BaseApi {\r\n  constructor(context?: Context){\r\n    super(context)\r\n    this.name = 'userGroups'; //kế thừa CRUD từ thằng cha\r\n  }\r\n}\r\n\r\nexport default UserGroups"],"sourceRoot":""}