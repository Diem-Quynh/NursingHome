{"version":3,"sources":["webpack:///./pages/admin/beds/index.tsx","webpack:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?4302"],"names":["Index","beds","total","useBaseHook","t","notify","redirect","setStore","getAuth","getStore","useState","hiddenDeleteBtn","setHiddenDeleteBtn","selectedIds","setSelectedIds","bedService","BedService","confirmRef","React","createRef","tableRef","checkPermission","usePermissionHook","createPer","deletePer","columns","title","dataIndex","key","sorter","filterable","width","render","text","record","onClick","id","roomCode","filterCheck","options","label","value","Math","round","Number","formaterStatus","fetchData","values","a","to","index","error","code","message","onDelete","ids","current","reload","className","hidden","type","danger","show","ref","data","rowSelection","selectedRowKeys","onChange","length","onChangeSelection","onSubmit","content","getInitialProps","ctx","defaultOptions","filters","sorting","query","GridTableHelper","getOptions","namespacesRequired","getData","defaultQuery","makeQuery","permissions","window","__NEXT_P","push"],"mappings":"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","file":"static\\3bqcv_cRHHIBfHp_4lMA9\\pages\\admin\\beds.js","sourcesContent":["import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper, FilterInput } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button } from 'antd';\r\nimport BedService from 'themes/services/api/BedService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport {PlusCircleOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\nconst formaterStatus = (value: any) => {\r\n  const { t } = useBaseHook();\r\n  value = Math.round(Number(value))\r\n  value = (value == 0 ? t('beds.empty') : t('beds.full'))\r\n  return `${value}`\r\n}\r\n\r\nconst Index = ({ beds, total }: { beds: Bed[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const bedService = new BedService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"admin.beds\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"admin.beds\": \"D\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t(\"room\"),\r\n      dataIndex: 'roomCode',\r\n      key: 'roomCode',\r\n      sorter: true,\r\n      filterable:true,\r\n      width: '20%',\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.beds.edit', { id: record.id })}>{record.roomCode}</a>\r\n    },\r\n    {\r\n      title: t('beds.bedId'),\r\n      dataIndex: 'bedId',\r\n      key: 'bedId',\r\n      width: '20%',\r\n    },\r\n    {\r\n      title: t('status'),\r\n      dataIndex: 'status',\r\n      sorter: true,\r\n      filterCheck: true,\r\n      options: [{ label:t('beds.empty'), value:0 }, { label:t('beds.full'), value:1 }],\r\n      key: 'status',\r\n      width: '20%',\r\n      render: (text: string, record: any) => <div>{formaterStatus(text)}</div>\r\n    },\r\n    {\r\n      title: t(\"note\"),\r\n      dataIndex: 'note',\r\n      key: 'note',\r\n    },\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, beds]: any[] = await to(bedService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return beds\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(bedService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.beds.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      \r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={beds}\r\n        rowSelection={{selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let bedService = new BedService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, beds]: any[] = await to(bedService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\r\n    error: error,\r\n    beds: useBaseHook.getData(beds, \"data\", []),\r\n    total: useBaseHook.getData(beds, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.beds\": \"R\"\r\n};\r\nexport default Index","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/beds\",\n      function () {\n        return require(\"private-next-pages/admin/beds/index.tsx\");\n      }\n    ]);\n  "],"sourceRoot":""}