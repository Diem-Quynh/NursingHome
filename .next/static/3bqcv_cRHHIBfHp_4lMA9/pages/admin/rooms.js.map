{"version":3,"sources":["webpack:///./themes/services/api/RoomService.ts","webpack:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?4ca0","webpack:///./pages/admin/rooms/index.tsx"],"names":["Room","context","name","BaseApi","window","__NEXT_P","push","Index","rooms","total","useBaseHook","t","notify","redirect","setStore","getAuth","getStore","useState","hiddenDeleteBtn","setHiddenDeleteBtn","selectedIds","setSelectedIds","roomService","RoomService","confirmRef","React","createRef","tableRef","checkPermission","usePermissionHook","createPer","deletePer","columns","title","dataIndex","key","width","sorter","filterable","render","text","record","onClick","id","code","fetchData","values","a","to","index","error","message","onDelete","ids","current","reload","className","hidden","type","danger","show","ref","data","rowSelection","selectedRowKeys","onChange","length","onChangeSelection","onSubmit","content","getInitialProps","ctx","defaultOptions","filters","sorting","query","GridTableHelper","getOptions","namespacesRequired","getData","defaultQuery","makeQuery","permissions"],"mappings":"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","file":"static\\3bqcv_cRHHIBfHp_4lMA9\\pages\\admin\\rooms.js","sourcesContent":["import BaseApi from './BaseService'\r\n\r\nclass Room extends BaseApi {\r\n  constructor(context?: Context){\r\n    super(context)\r\n    this.name = 'rooms';\r\n  }\r\n}\r\n\r\nexport default Room","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/admin/rooms\",\n      function () {\n        return require(\"private-next-pages/admin/rooms/index.tsx\");\n      }\n    ]);\n  ","import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper, FilterInput } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button } from 'antd';\r\nimport RoomService from 'themes/services/api/RoomService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport {PlusCircleOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\nconst Index = ({ rooms, total }: { rooms: Room[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const roomService = new RoomService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"admin.rooms\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"admin.rooms\": \"D\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t(\"code\"),\r\n      dataIndex: 'code',\r\n      key: 'code',\r\n      width: '20%',\r\n      sorter: true,\r\n      filterable: true,\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.rooms.edit', { id: record.id })}>{record.code}</a>\r\n    },\r\n    {\r\n      title: t('rooms.bedNumber'),\r\n      dataIndex: 'bedNumber',\r\n      key: 'bedNumber',\r\n      width: '20%',\r\n      sorter: true\r\n    },\r\n    {\r\n      title: t(\"note\"),\r\n      dataIndex: 'note',\r\n      key: 'note',\r\n    },\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, rooms]: any[] = await to(roomService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return rooms\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(roomService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.rooms.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      \r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={rooms}\r\n        rowSelection={{selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let roomService = new RoomService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, rooms]: any[] = await to(roomService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\r\n    error: error,\r\n    rooms: useBaseHook.getData(rooms, \"data\", []),\r\n    total: useBaseHook.getData(rooms, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.rooms\": \"R\"\r\n};\r\nexport default Index"],"sourceRoot":""}