{"ast":null,"code":"var __jsx = React.createElement;\nimport Layout from 'themes/layouts/Admin';\nimport { GridTable, GridTableHelper } from 'themes/components/Table';\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\nimport { Button } from 'antd';\nimport PatientService from 'themes/services/api/PatientService';\nimport to from 'await-to-js';\nimport React, { useState } from 'react';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\nimport { PlusCircleOutlined, DeleteOutlined } from '@ant-design/icons';\n\nconst formaterGender = value => {\n  const {\n    t\n  } = useBaseHook();\n  value = Math.round(Number(value));\n  value = value == 0 ? t('male') : t('female');\n  return `${value}`;\n};\n\nconst formaterDate = value => {\n  value = value ? String(value) : \"\";\n  value = value.substr(0, 10);\n  return `${value}`;\n};\n\nconst Index = ({\n  patients,\n  total\n}) => {\n  const {\n    t,\n    notify,\n    redirect,\n    setStore,\n    getAuth,\n    getStore\n  } = useBaseHook();\n  const {\n    0: hiddenDeleteBtn,\n    1: setHiddenDeleteBtn\n  } = useState(true);\n  const {\n    0: selectedIds,\n    1: setSelectedIds\n  } = useState([]);\n  const patientService = new PatientService();\n  const confirmRef = React.createRef();\n  const tableRef = React.createRef();\n  const {\n    checkPermission\n  } = usePermissionHook();\n  const createPer = checkPermission({\n    \"admin.patients\": \"C\",\n    \"receptionist.patients\": \"C\"\n  });\n  const deletePer = checkPermission({\n    \"admin.patients\": \"D\"\n  });\n  const columns = [{\n    title: t(\"patient\"),\n    dataIndex: 'code',\n    key: 'code',\n    filterable: true,\n    fixed: 'left'\n  }, {\n    title: t(\"fullname\"),\n    dataIndex: 'fullname',\n    key: 'fullname',\n    sorter: true,\n    filterable: true,\n    fixed: 'left',\n    render: (text, record) => __jsx(\"a\", {\n      onClick: () => redirect('frontend.admin.patients.edit', {\n        id: record.id\n      })\n    }, record.fullname)\n  }, {\n    title: t('room'),\n    dataIndex: 'roomCode',\n    sorter: true,\n    filterable: true,\n    key: 'beds.roomCode',\n    fixed: 'left',\n    render: (text, record) => __jsx(\"div\", null, record.roomCode, \" - \", record.bedCode)\n  }, {\n    title: t('birthday'),\n    dataIndex: 'birthday',\n    key: 'birthday',\n    filterDate: true,\n    render: (text, record) => __jsx(\"div\", null, formaterDate(text))\n  }, {\n    title: t(\"gender\"),\n    dataIndex: 'gender',\n    key: 'gender',\n    filterCheck: true,\n    options: [{\n      label: t('male'),\n      value: 0\n    }, {\n      label: t('female'),\n      value: 1\n    }],\n    width: '7%',\n    render: (text, record) => __jsx(\"div\", null, formaterGender(text))\n  }, {\n    title: t(\"address\"),\n    dataIndex: 'address',\n    key: 'address',\n    filterable: true\n  }, {\n    title: t(\"cardId\"),\n    dataIndex: 'cardId',\n    key: 'cardId',\n    filterable: true\n  }, {\n    title: t(\"phone\"),\n    dataIndex: 'phone',\n    key: 'phone',\n    filterable: true\n  }, {\n    title: t(\"patients.medicalHistory\"),\n    dataIndex: 'medicalHistory',\n    key: 'medicalHistory',\n    filterable: true\n  }, {\n    title: t(\"patients.dateIn\"),\n    dataIndex: 'dateIn',\n    sorter: true,\n    filterDate: true,\n    key: 'dateIn',\n    render: (text, record) => __jsx(\"div\", null, formaterDate(text))\n  }, {\n    title: t(\"patients.dateOut\"),\n    dataIndex: 'dateOut',\n    sorter: true,\n    filterDate: true,\n    key: 'dateOut',\n    render: (text, record) => __jsx(\"div\", null, formaterDate(text))\n  }];\n\n  const onChangeSelection = data => {\n    if (data.length > 0) {\n      setHiddenDeleteBtn(false);\n    } else {\n      setHiddenDeleteBtn(true);\n    }\n\n    setSelectedIds(data);\n  };\n\n  const fetchData = async values => {\n    let [error, patients] = await to(patientService.index(values));\n\n    if (error) {\n      const {\n        code,\n        message\n      } = error;\n      notify(t(`errors:${code}`), t(message), 'error');\n      return {};\n    }\n\n    return patients;\n  };\n\n  const onDelete = async () => {\n    let [error, result] = await to(patientService.delete({\n      ids: selectedIds\n    }));\n\n    if (error) {\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error');\n    }\n\n    notify(t(\"message.recordDeleted\"));\n\n    if (tableRef.current !== null) {\n      tableRef.current.reload();\n    }\n\n    setSelectedIds([]);\n    setHiddenDeleteBtn(true);\n  };\n\n  const renderDeleteDialog = () => {\n    return __jsx(ConfirmDialog, {\n      ref: confirmRef,\n      onSubmit: onDelete,\n      title: t('deleteItem'),\n      content: t('message.deleteConfirm')\n    });\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Button, {\n    hidden: !createPer,\n    onClick: () => redirect(\"frontend.admin.patients.create\"),\n    type: \"primary\",\n    className: \"btn-top\"\n  }, __jsx(PlusCircleOutlined, null), t('create')), __jsx(Button, {\n    danger: true,\n    onClick: () => {\n      if (confirmRef.current) confirmRef.current.show();\n    },\n    className: \"btn-top\",\n    hidden: hiddenDeleteBtn || !deletePer\n  }, __jsx(DeleteOutlined, null), t('delete')), __jsx(GridTable, {\n    ref: tableRef,\n    columns: columns,\n    data: patients,\n    rowSelection: {\n      selectedRowKeys: selectedIds,\n      onChange: data => onChangeSelection(data)\n    },\n    fetchData: fetchData,\n    total: total,\n    scroll: {\n      x: 1400\n    }\n  }), renderDeleteDialog()));\n};\n\nIndex.getInitialProps = async ctx => {\n  let patientService = new PatientService(ctx);\n  let defaultOptions = {\n    filters: [],\n    sorting: []\n  };\n  let query = ctx.query;\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\n  let [error, patients] = await to(patientService.index(filters));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    error: error,\n    patients: useBaseHook.getData(patients, \"data\", []),\n    total: useBaseHook.getData(patients, \"total\", 0),\n    defaultQuery: {\n      filters: GridTableHelper.makeQuery(filters)\n    }\n  };\n};\n\nIndex.permissions = {\n  \"admin.patients\": \"R\",\n  \"doctor.patients\": \"R\",\n  \"nurse.patients\": \"R\",\n  \"receptionist.patients\": \"R\"\n};\nexport default Index;","map":{"version":3,"sources":["E:/nursinghome_github/pages/admin/patients/index.tsx"],"names":["Layout","GridTable","GridTableHelper","ConfirmDialog","Button","PatientService","to","React","useState","useBaseHook","usePermissionHook","PlusCircleOutlined","DeleteOutlined","formaterGender","value","t","Math","round","Number","formaterDate","String","substr","Index","patients","total","notify","redirect","setStore","getAuth","getStore","hiddenDeleteBtn","setHiddenDeleteBtn","selectedIds","setSelectedIds","patientService","confirmRef","createRef","tableRef","checkPermission","createPer","deletePer","columns","title","dataIndex","key","filterable","fixed","sorter","render","text","record","id","fullname","roomCode","bedCode","filterDate","filterCheck","options","label","width","onChangeSelection","data","length","fetchData","values","error","index","code","message","onDelete","result","delete","ids","current","reload","renderDeleteDialog","show","selectedRowKeys","onChange","x","getInitialProps","ctx","defaultOptions","filters","sorting","query","getOptions","namespacesRequired","getData","defaultQuery","makeQuery","permissions"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,SAASC,SAAT,EAAoBC,eAApB,QAAwD,yBAAxD;AACA,OAAOC,aAAP,MAA0B,yCAA1B;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAOC,EAAP,MAAe,aAAf;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,iBAAP,MAA8B,6BAA9B;AACA,SAAQC,kBAAR,EAA4BC,cAA5B,QAAiD,mBAAjD;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAgB;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAQN,WAAW,EAAzB;AACAK,EAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACJ,KAAD,CAAjB,CAAR;AACAA,EAAAA,KAAK,GAAIA,KAAK,IAAI,CAAT,GAAaC,CAAC,CAAC,MAAD,CAAd,GAAyBA,CAAC,CAAC,QAAD,CAAnC;AACA,SAAQ,GAAED,KAAM,EAAhB;AACD,CALD;;AAOA,MAAMK,YAAY,GAAIL,KAAD,IAAgB;AACnCA,EAAAA,KAAK,GAAGA,KAAK,GAAEM,MAAM,CAACN,KAAD,CAAR,GAAkB,EAA/B;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAACO,MAAN,CAAa,CAAb,EAAe,EAAf,CAAR;AACA,SAAQ,GAAEP,KAAM,EAAhB;AACD,CAJD;;AAMA,MAAMQ,KAAK,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAiE;AAC7E,QAAM;AAAET,IAAAA,CAAF;AAAKU,IAAAA,MAAL;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA,QAAvB;AAAiCC,IAAAA,OAAjC;AAA0CC,IAAAA;AAA1C,MAAuDpB,WAAW,EAAxE;AACA,QAAM;AAAA,OAACqB,eAAD;AAAA,OAAkBC;AAAlB,MAAwCvB,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM;AAAA,OAACwB,WAAD;AAAA,OAAcC;AAAd,MAAgCzB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM0B,cAAc,GAAG,IAAI7B,cAAJ,EAAvB;AACA,QAAM8B,UAAU,GAAG5B,KAAK,CAAC6B,SAAN,EAAnB;AACA,QAAMC,QAAQ,GAAG9B,KAAK,CAAC6B,SAAN,EAAjB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAsB5B,iBAAiB,EAA7C;AACA,QAAM6B,SAAS,GAAGD,eAAe,CAAC;AAChC,sBAAkB,GADc;AAEhC,6BAAyB;AAFO,GAAD,CAAjC;AAIA,QAAME,SAAS,GAAGF,eAAe,CAAC;AAChC,sBAAkB;AADc,GAAD,CAAjC;AAGA,QAAMG,OAAO,GAAG,CACd;AACEC,IAAAA,KAAK,EAAE3B,CAAC,CAAC,SAAD,CADV;AAEE4B,IAAAA,SAAS,EAAE,MAFb;AAGEC,IAAAA,GAAG,EAAE,MAHP;AAIEC,IAAAA,UAAU,EAAE,IAJd;AAKEC,IAAAA,KAAK,EAAE;AALT,GADc,EAQd;AACEJ,IAAAA,KAAK,EAAE3B,CAAC,CAAC,UAAD,CADV;AAEE4B,IAAAA,SAAS,EAAE,UAFb;AAGEC,IAAAA,GAAG,EAAE,UAHP;AAIEG,IAAAA,MAAM,EAAC,IAJT;AAKEF,IAAAA,UAAU,EAAE,IALd;AAMEC,IAAAA,KAAK,EAAE,MANT;AAOEE,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAeC,MAAf,KACN;AAAG,MAAA,OAAO,EAAE,MAAMxB,QAAQ,CAAC,8BAAD,EAAiC;AAAEyB,QAAAA,EAAE,EAAED,MAAM,CAACC;AAAb,OAAjC;AAA1B,OAAgFD,MAAM,CAACE,QAAvF;AARJ,GARc,EAkBd;AACEV,IAAAA,KAAK,EAAE3B,CAAC,CAAC,MAAD,CADV;AAEE4B,IAAAA,SAAS,EAAE,UAFb;AAGEI,IAAAA,MAAM,EAAC,IAHT;AAIEF,IAAAA,UAAU,EAAE,IAJd;AAKED,IAAAA,GAAG,EAAE,eALP;AAMEE,IAAAA,KAAK,EAAC,MANR;AAOEE,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAeC,MAAf,KAA+B,mBAAMA,MAAM,CAACG,QAAb,SAA0BH,MAAM,CAACI,OAAjC;AAPzC,GAlBc,EA2Bd;AACEZ,IAAAA,KAAK,EAAE3B,CAAC,CAAC,UAAD,CADV;AAEE4B,IAAAA,SAAS,EAAE,UAFb;AAGEC,IAAAA,GAAG,EAAE,UAHP;AAIEW,IAAAA,UAAU,EAAE,IAJd;AAKEP,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAeC,MAAf,KAA+B,mBAAM/B,YAAY,CAAC8B,IAAD,CAAlB;AALzC,GA3Bc,EAkCd;AACEP,IAAAA,KAAK,EAAE3B,CAAC,CAAC,QAAD,CADV;AAEE4B,IAAAA,SAAS,EAAE,QAFb;AAGEC,IAAAA,GAAG,EAAE,QAHP;AAIEY,IAAAA,WAAW,EAAE,IAJf;AAKEC,IAAAA,OAAO,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAC3C,CAAC,CAAC,MAAD,CAAT;AAAmBD,MAAAA,KAAK,EAAC;AAAzB,KAAD,EAA+B;AAAE4C,MAAAA,KAAK,EAAC3C,CAAC,CAAC,QAAD,CAAT;AAAqBD,MAAAA,KAAK,EAAC;AAA3B,KAA/B,CALX;AAME6C,IAAAA,KAAK,EAAE,IANT;AAOEX,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAeC,MAAf,KAA+B,mBAAMrC,cAAc,CAACoC,IAAD,CAApB;AAPzC,GAlCc,EA2Cd;AACEP,IAAAA,KAAK,EAAE3B,CAAC,CAAC,SAAD,CADV;AAEE4B,IAAAA,SAAS,EAAE,SAFb;AAGEC,IAAAA,GAAG,EAAE,SAHP;AAIEC,IAAAA,UAAU,EAAE;AAJd,GA3Cc,EAiDd;AACEH,IAAAA,KAAK,EAAE3B,CAAC,CAAC,QAAD,CADV;AAEE4B,IAAAA,SAAS,EAAE,QAFb;AAGEC,IAAAA,GAAG,EAAE,QAHP;AAIEC,IAAAA,UAAU,EAAE;AAJd,GAjDc,EAuDd;AACEH,IAAAA,KAAK,EAAE3B,CAAC,CAAC,OAAD,CADV;AAEE4B,IAAAA,SAAS,EAAE,OAFb;AAGEC,IAAAA,GAAG,EAAE,OAHP;AAIEC,IAAAA,UAAU,EAAE;AAJd,GAvDc,EA6Dd;AACEH,IAAAA,KAAK,EAAE3B,CAAC,CAAC,yBAAD,CADV;AAEE4B,IAAAA,SAAS,EAAE,gBAFb;AAGEC,IAAAA,GAAG,EAAE,gBAHP;AAIEC,IAAAA,UAAU,EAAE;AAJd,GA7Dc,EAmEd;AACEH,IAAAA,KAAK,EAAE3B,CAAC,CAAC,iBAAD,CADV;AAEE4B,IAAAA,SAAS,EAAE,QAFb;AAGEI,IAAAA,MAAM,EAAC,IAHT;AAIEQ,IAAAA,UAAU,EAAE,IAJd;AAKEX,IAAAA,GAAG,EAAE,QALP;AAMEI,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAeC,MAAf,KAA+B,mBAAM/B,YAAY,CAAC8B,IAAD,CAAlB;AANzC,GAnEc,EA2Ed;AACEP,IAAAA,KAAK,EAAE3B,CAAC,CAAC,kBAAD,CADV;AAEE4B,IAAAA,SAAS,EAAE,SAFb;AAGEI,IAAAA,MAAM,EAAC,IAHT;AAIEQ,IAAAA,UAAU,EAAE,IAJd;AAKEX,IAAAA,GAAG,EAAE,SALP;AAMEI,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAeC,MAAf,KAA+B,mBAAM/B,YAAY,CAAC8B,IAAD,CAAlB;AANzC,GA3Ec,CAAhB;;AAqFA,QAAMW,iBAAiB,GAAIC,IAAD,IAAe;AACvC,QAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB;AACnB/B,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,KAFD,MAGK;AACHA,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AACDE,IAAAA,cAAc,CAAC4B,IAAD,CAAd;AACD,GARD;;AAUA,QAAME,SAAS,GAAG,MAAOC,MAAP,IAAuB;AACvC,QAAI,CAACC,KAAD,EAAQ1C,QAAR,IAA2B,MAAMjB,EAAE,CAAC4B,cAAc,CAACgC,KAAf,CAAqBF,MAArB,CAAD,CAAvC;;AACA,QAAIC,KAAJ,EAAW;AACT,YAAM;AAAEE,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAoBH,KAA1B;AACAxC,MAAAA,MAAM,CAACV,CAAC,CAAE,UAASoD,IAAK,EAAhB,CAAF,EAAsBpD,CAAC,CAACqD,OAAD,CAAvB,EAAkC,OAAlC,CAAN;AACA,aAAO,EAAP;AACD;;AACD,WAAO7C,QAAP;AACD,GARD;;AAUA,QAAM8C,QAAQ,GAAG,YAAY;AAC3B,QAAI,CAACJ,KAAD,EAAQK,MAAR,IAAyB,MAAMhE,EAAE,CAAC4B,cAAc,CAACqC,MAAf,CAAsB;AAAEC,MAAAA,GAAG,EAAExC;AAAP,KAAtB,CAAD,CAArC;;AACA,QAAIiC,KAAJ,EAAW;AACT,aAAOxC,MAAM,CAACV,CAAC,CAAE,UAASkD,KAAK,CAACE,IAAK,EAAtB,CAAF,EAA4BpD,CAAC,CAAE,GAAEkD,KAAK,CAACG,OAAQ,EAAlB,CAA7B,EAAmD,OAAnD,CAAb;AACD;;AACD3C,IAAAA,MAAM,CAACV,CAAC,CAAC,uBAAD,CAAF,CAAN;;AACA,QAAIsB,QAAQ,CAACoC,OAAT,KAAqB,IAAzB,EAA+B;AAC7BpC,MAAAA,QAAQ,CAACoC,OAAT,CAAiBC,MAAjB;AACD;;AACDzC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAF,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GAXD;;AAaA,QAAM4C,kBAAkB,GAAG,MAAM;AAC/B,WACE,MAAC,aAAD;AACE,MAAA,GAAG,EAAExC,UADP;AAEE,MAAA,QAAQ,EAAEkC,QAFZ;AAGE,MAAA,KAAK,EAAEtD,CAAC,CAAC,YAAD,CAHV;AAIE,MAAA,OAAO,EAAEA,CAAC,CAAC,uBAAD;AAJZ,MADF;AAQD,GATD;;AAWA,SAAO,MAAC,MAAD,QACL;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAE,CAACwB,SAAjB;AAA4B,IAAA,OAAO,EAAE,MAAMb,QAAQ,CAAC,gCAAD,CAAnD;AAAuF,IAAA,IAAI,EAAC,SAA5F;AAAsG,IAAA,SAAS,EAAC;AAAhH,KACE,MAAC,kBAAD,OADF,EAEGX,CAAC,CAAC,QAAD,CAFJ,CADF,EAME,MAAC,MAAD;AAAQ,IAAA,MAAM,MAAd;AAAe,IAAA,OAAO,EAAE,MAAM;AAAE,UAAIoB,UAAU,CAACsC,OAAf,EAAwBtC,UAAU,CAACsC,OAAX,CAAmBG,IAAnB;AAA2B,KAAnF;AAAqF,IAAA,SAAS,EAAC,SAA/F;AAAyG,IAAA,MAAM,EAAE9C,eAAe,IAAI,CAACU;AAArI,KACE,MAAC,cAAD,OADF,EAEGzB,CAAC,CAAC,QAAD,CAFJ,CANF,EAWE,MAAC,SAAD;AACE,IAAA,GAAG,EAAEsB,QADP;AAEE,IAAA,OAAO,EAAEI,OAFX;AAGE,IAAA,IAAI,EAAElB,QAHR;AAIE,IAAA,YAAY,EAAE;AAACsD,MAAAA,eAAe,EAAE7C,WAAlB;AAA+B8C,MAAAA,QAAQ,EAAGjB,IAAD,IAAiBD,iBAAiB,CAACC,IAAD;AAA3E,KAJhB;AAKE,IAAA,SAAS,EAAEE,SALb;AAME,IAAA,KAAK,EAAEvC,KANT;AAOE,IAAA,MAAM,EAAE;AAAEuD,MAAAA,CAAC,EAAC;AAAJ;AAPV,IAXF,EAoBGJ,kBAAkB,EApBrB,CADK,CAAP;AAwBD,CAxKD;;AA0KArD,KAAK,CAAC0D,eAAN,GAAwB,MAAOC,GAAP,IAAoB;AAC1C,MAAI/C,cAAc,GAAG,IAAI7B,cAAJ,CAAmB4E,GAAnB,CAArB;AACA,MAAIC,cAAc,GAAG;AACnBC,IAAAA,OAAO,EAAE,EADU;AAEnBC,IAAAA,OAAO,EAAE;AAFU,GAArB;AAIA,MAAIC,KAAK,GAAGJ,GAAG,CAACI,KAAhB;AACA,MAAIF,OAAO,GAAGjF,eAAe,CAACoF,UAAhB,CAA2BD,KAA3B,EAAkCH,cAAlC,CAAd;AACA,MAAI,CAACjB,KAAD,EAAQ1C,QAAR,IAA2B,MAAMjB,EAAE,CAAC4B,cAAc,CAACgC,KAAf,CAAqBiB,OAArB,CAAD,CAAvC;AACA,SAAO;AACLI,IAAAA,kBAAkB,EAAE,CAAC,QAAD,EAAW,OAAX,EAAoB,MAApB,EAA4B,QAA5B,CADf;AAELtB,IAAAA,KAAK,EAAEA,KAFF;AAGL1C,IAAAA,QAAQ,EAAEd,WAAW,CAAC+E,OAAZ,CAAoBjE,QAApB,EAA8B,MAA9B,EAAsC,EAAtC,CAHL;AAILC,IAAAA,KAAK,EAAEf,WAAW,CAAC+E,OAAZ,CAAoBjE,QAApB,EAA8B,OAA9B,EAAuC,CAAvC,CAJF;AAKLkE,IAAAA,YAAY,EAAE;AACZN,MAAAA,OAAO,EAAEjF,eAAe,CAACwF,SAAhB,CAA0BP,OAA1B;AADG;AALT,GAAP;AASD,CAlBD;;AAmBA7D,KAAK,CAACqE,WAAN,GAAoB;AAClB,oBAAkB,GADA;AAElB,qBAAmB,GAFD;AAGlB,oBAAkB,GAHA;AAIlB,2BAAyB;AAJP,CAApB;AAMA,eAAerE,KAAf","sourcesContent":["import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper, FilterInput } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button } from 'antd';\r\nimport PatientService from 'themes/services/api/PatientService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport {PlusCircleOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\nconst formaterGender = (value: any) => {\r\n  const { t } = useBaseHook();\r\n  value = Math.round(Number(value))\r\n  value = (value == 0 ? t('male') : t('female'))\r\n  return `${value}`\r\n}\r\n\r\nconst formaterDate = (value: any) => {\r\n  value = value? String(value) : \"\"\r\n  value = value.substr(0,10)\r\n  return `${value}`\r\n}\r\n\r\nconst Index = ({ patients, total }: { patients: Patient[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const patientService = new PatientService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"admin.patients\": \"C\",\r\n    \"receptionist.patients\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"admin.patients\": \"D\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t(\"patient\"),\r\n      dataIndex: 'code',\r\n      key: 'code',\r\n      filterable: true,\r\n      fixed: 'left',\r\n    },\r\n    {\r\n      title: t(\"fullname\"),\r\n      dataIndex: 'fullname',\r\n      key: 'fullname',\r\n      sorter:true,\r\n      filterable: true,\r\n      fixed: 'left',\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.patients.edit', { id: record.id })}>{record.fullname}</a>\r\n    },\r\n    {\r\n      title: t('room'),\r\n      dataIndex: 'roomCode',\r\n      sorter:true,\r\n      filterable: true,\r\n      key: 'beds.roomCode',\r\n      fixed:'left',\r\n      render: (text: string, record: any) => <div>{record.roomCode} - {record.bedCode}</div>\r\n    },\r\n    {\r\n      title: t('birthday'),\r\n      dataIndex: 'birthday',\r\n      key: 'birthday',\r\n      filterDate: true,\r\n      render: (text: string, record: any) => <div>{formaterDate(text)}</div>\r\n    },\r\n    {\r\n      title: t(\"gender\"),\r\n      dataIndex: 'gender',\r\n      key: 'gender',\r\n      filterCheck: true,\r\n      options: [{ label:t('male'), value:0 }, { label:t('female'), value:1 }],\r\n      width: '7%',\r\n      render: (text: string, record: any) => <div>{formaterGender(text)}</div>\r\n    },\r\n    {\r\n      title: t(\"address\"),\r\n      dataIndex: 'address',\r\n      key: 'address',\r\n      filterable: true,\r\n    },\r\n    {\r\n      title: t(\"cardId\"),\r\n      dataIndex: 'cardId',\r\n      key: 'cardId',\r\n      filterable: true,\r\n    },\r\n    {\r\n      title: t(\"phone\"),\r\n      dataIndex: 'phone',\r\n      key: 'phone',\r\n      filterable: true,\r\n    },\r\n    {\r\n      title: t(\"patients.medicalHistory\"),\r\n      dataIndex: 'medicalHistory',\r\n      key: 'medicalHistory',\r\n      filterable: true,\r\n    },\r\n    {\r\n      title: t(\"patients.dateIn\"),\r\n      dataIndex: 'dateIn',\r\n      sorter:true,\r\n      filterDate: true,\r\n      key: 'dateIn',\r\n      render: (text: string, record: any) => <div>{formaterDate(text)}</div>\r\n    },\r\n    {\r\n      title: t(\"patients.dateOut\"),\r\n      dataIndex: 'dateOut',\r\n      sorter:true,\r\n      filterDate: true,\r\n      key: 'dateOut',\r\n      render: (text: string, record: any) => <div>{formaterDate(text)}</div>\r\n    },\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, patients]: any[] = await to(patientService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return patients\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(patientService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.patients.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      \r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={patients}\r\n        rowSelection={{selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n        scroll={{ x:1400 }}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let patientService = new PatientService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, patients]: any[] = await to(patientService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\r\n    error: error,\r\n    patients: useBaseHook.getData(patients, \"data\", []),\r\n    total: useBaseHook.getData(patients, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.patients\": \"R\",\r\n  \"doctor.patients\": \"R\",\r\n  \"nurse.patients\": \"R\",\r\n  \"receptionist.patients\": \"R\",\r\n};\r\nexport default Index"]},"metadata":{},"sourceType":"module"}