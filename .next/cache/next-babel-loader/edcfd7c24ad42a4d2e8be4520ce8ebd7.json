{"ast":null,"code":"var _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\userPermissions\\\\index.tsx\";\nvar __jsx = React.createElement;\n\n/* import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper, FilterInput } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button } from 'antd';\r\nimport UserPermissionService from 'themes/services/api/UserPermissionService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport {PlusCircleOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\nconst Index = ({ permissions, total }: { permissions: Permission[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const permissionService = new UserPermissionService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"admin.userPermissions\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"admin.userPermissions\": \"D\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t(\"userPermissions.key\"),\r\n      dataIndex: 'key',\r\n      key: 'key',\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.userPermissions.edit', { id: record.id })}> {record.keyName} </a>\r\n    },\r\n    {\r\n      title: t('userPermissions.name'),\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: t(\"description\"),\r\n      dataIndex: 'description',\r\n      key: 'description',\r\n    },\r\n    {\r\n      title: t(\"userPermissions.avalibleValue\"),\r\n      dataIndex: 'avalibleValue',\r\n      key: 'avalibleValue',\r\n    }\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, permissions]: any[] = await to(permissionService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return permissions\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(permissionService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.userPermissions.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      \r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={permissions}\r\n        rowSelection={{selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let permissionService = new UserPermissionService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, permissions]: any[] = await to(permissionService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    error: error,\r\n    permissions: useBaseHook.getData(permissions, \"data\", []),\r\n    total: useBaseHook.getData(permissions, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.userPermissions\": \"R\"\r\n};\r\nexport default Index */\nimport React from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Typography, Checkbox } from 'antd';\nimport { Table } from 'antd';\nimport UserPermissionService from 'themes/services/api/UserPermissionService';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nconst {\n  Title,\n  Text\n} = Typography;\n\nconst Index = ({\n  permissions,\n  total\n}) => {\n  let result = {};\n  const {\n    t,\n    notify,\n    redirect,\n    router\n  } = useBaseHook();\n  const PermissionService = new UserPermissionService();\n\n  const renderCheckbox = (row, permission) => {\n    // const checked = (row.value & permission) === permission\n    const checked = (row.avalibleValue & permission) === permission;\n    return __jsx(Checkbox, {\n      defaultChecked: checked,\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const columns = [{\n    title: t('userPermissions.key'),\n    dataIndex: 'keyName',\n    key: 'key',\n    width: '5%'\n  }, {\n    title: t('userPermissions.name'),\n    dataIndex: 'name',\n    key: 'name'\n  }, {\n    title: t('description'),\n    dataIndex: 'description',\n    key: 'description'\n  }, {\n    title: t(\"create\"),\n    dataIndex: 'value',\n    key: 'valueC',\n    width: '10%',\n    render: (value, row) => renderCheckbox(row, 8)\n  }, {\n    title: t(\"view\"),\n    dataIndex: 'value',\n    key: 'valueR',\n    width: '10%',\n    render: (value, row) => renderCheckbox(row, 4)\n  }, {\n    title: t(\"edit\"),\n    dataIndex: 'value',\n    key: 'valueU',\n    width: '10%',\n    render: (value, row) => renderCheckbox(row, 2)\n  }, {\n    title: t(\"delete\"),\n    dataIndex: 'value',\n    key: 'valueD',\n    width: '10%',\n    render: (value, row) => renderCheckbox(row, 1)\n  }];\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    size: \"small\",\n    columns: columns,\n    dataSource: permissions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  })));\n};\n\nIndex.getInitialProps = async ctx => {\n  let permissionService = new UserPermissionService(ctx);\n  let [error, permissions] = await to(permissionService.index());\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    error: error,\n    permissions: useBaseHook.getData(permissions, \"data\", []),\n    total: useBaseHook.getData(permissions, \"total\", 0)\n  };\n};\n\nIndex.permissions = {\n  \"admin.userPermissions\": \"R\"\n};\nexport default Index;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/userPermissions/index.tsx"],"names":["React","Layout","Typography","Checkbox","Table","UserPermissionService","to","useBaseHook","Title","Text","Index","permissions","total","result","t","notify","redirect","router","PermissionService","renderCheckbox","row","permission","checked","avalibleValue","columns","title","dataIndex","key","width","render","value","getInitialProps","ctx","permissionService","error","index","namespacesRequired","getData"],"mappings":"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","sourcesContent":["/* import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper, FilterInput } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button } from 'antd';\r\nimport UserPermissionService from 'themes/services/api/UserPermissionService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport {PlusCircleOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\nconst Index = ({ permissions, total }: { permissions: Permission[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const permissionService = new UserPermissionService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"admin.userPermissions\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"admin.userPermissions\": \"D\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t(\"userPermissions.key\"),\r\n      dataIndex: 'key',\r\n      key: 'key',\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.userPermissions.edit', { id: record.id })}> {record.keyName} </a>\r\n    },\r\n    {\r\n      title: t('userPermissions.name'),\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: t(\"description\"),\r\n      dataIndex: 'description',\r\n      key: 'description',\r\n    },\r\n    {\r\n      title: t(\"userPermissions.avalibleValue\"),\r\n      dataIndex: 'avalibleValue',\r\n      key: 'avalibleValue',\r\n    }\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, permissions]: any[] = await to(permissionService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return permissions\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(permissionService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.userPermissions.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      \r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={permissions}\r\n        rowSelection={{selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let permissionService = new UserPermissionService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, permissions]: any[] = await to(permissionService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    error: error,\r\n    permissions: useBaseHook.getData(permissions, \"data\", []),\r\n    total: useBaseHook.getData(permissions, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.userPermissions\": \"R\"\r\n};\r\nexport default Index */\r\n\r\n\r\nimport React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Row, Col, Form, Input, Select, Typography, Checkbox } from 'antd';\r\nimport { Table } from 'antd';\r\nimport { AppstoreOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport UserPermissionService from 'themes/services/api/UserPermissionService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { LeftCircleFilled, SaveFilled, DeleteFilled } from '@ant-design/icons';\r\nimport BreadCrumb from 'themes/components/Breadcumb'\r\nimport { getInputClassName } from 'antd/lib/input/Input';\r\nconst { Title, Text } = Typography;\r\n\r\nconst Index = ({ permissions, total }: { permissions: Permission[], total: number }) => {\r\n  let result: any = {}\r\n  const { t, notify, redirect, router } = useBaseHook();\r\n  const PermissionService = new UserPermissionService()\r\n\r\n  const renderCheckbox = (row: any, permission: number) => {\r\n    // const checked = (row.value & permission) === permission\r\n    const checked = (row.avalibleValue & permission) === permission\r\n    return <Checkbox defaultChecked={checked} disabled={true} ></Checkbox>\r\n  }\r\n\r\n    const columns = [\r\n      {\r\n        title: t('userPermissions.key'),\r\n        dataIndex: 'keyName',\r\n        key: 'key',\r\n        width: '5%',\r\n      },\r\n      {\r\n        title: t('userPermissions.name'),\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n      },\r\n      {\r\n        title: t('description'),\r\n        dataIndex: 'description',\r\n        key: 'description',\r\n      },\r\n      {\r\n        title: t(\"create\"),\r\n        dataIndex: 'value',\r\n        key: 'valueC',\r\n        width: '10%',\r\n        render: (value: any, row: any) => renderCheckbox(row, 8)\r\n      },\r\n      {\r\n        title: t(\"view\"),\r\n        dataIndex: 'value',\r\n        key: 'valueR',\r\n        width: '10%',\r\n        render: (value: any, row: any) => renderCheckbox(row, 4)\r\n      },\r\n      {\r\n        title: t(\"edit\"),\r\n        dataIndex: 'value',\r\n        key: 'valueU',\r\n        width: '10%',\r\n        render: (value: any, row: any) => renderCheckbox(row, 2)\r\n      },\r\n      {\r\n        title: t(\"delete\"),\r\n        dataIndex: 'value',\r\n        key: 'valueD',\r\n        width: '10%',\r\n        render: (value: any, row: any) => renderCheckbox(row, 1)\r\n      }\r\n    ];\r\n    \r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Table size=\"small\" columns={columns} dataSource={permissions} />\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let permissionService = new UserPermissionService(ctx)\r\n  let [error, permissions]: any[] = await to(permissionService.index())\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    error: error,\r\n    permissions: useBaseHook.getData(permissions, \"data\", []),\r\n    total: useBaseHook.getData(permissions, \"total\", 0)\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.userPermissions\": \"R\"\r\n};\r\nexport default Index"]},"metadata":{},"sourceType":"module"}