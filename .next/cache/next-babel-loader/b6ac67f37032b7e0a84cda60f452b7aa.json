{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport Layout from 'themes/layouts/Admin';\nimport { GridTable, GridTableHelper } from 'themes/components/Table';\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\nimport { Button } from 'antd';\nimport BedService from 'themes/services/api/BedService';\nimport to from 'await-to-js';\nimport React, { useState } from 'react';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\nimport { PlusCircleOutlined, DeleteOutlined } from '@ant-design/icons';\n\nvar formaterStatus = function formaterStatus(value) {\n  var _useBaseHook = useBaseHook(),\n      t = _useBaseHook.t;\n\n  value = Math.round(Number(value));\n  value = value == 0 ? t('beds.empty') : t('beds.full');\n  return \"\".concat(value);\n};\n\nvar Index = function Index(_ref) {\n  var beds = _ref.beds,\n      total = _ref.total;\n\n  var _useBaseHook2 = useBaseHook(),\n      t = _useBaseHook2.t,\n      notify = _useBaseHook2.notify,\n      redirect = _useBaseHook2.redirect,\n      setStore = _useBaseHook2.setStore,\n      getAuth = _useBaseHook2.getAuth,\n      getStore = _useBaseHook2.getStore;\n\n  var _useState = useState(true),\n      hiddenDeleteBtn = _useState[0],\n      setHiddenDeleteBtn = _useState[1];\n\n  var _useState2 = useState([]),\n      selectedIds = _useState2[0],\n      setSelectedIds = _useState2[1];\n\n  var bedService = new BedService();\n  var confirmRef = React.createRef();\n  var tableRef = React.createRef();\n\n  var _usePermissionHook = usePermissionHook(),\n      checkPermission = _usePermissionHook.checkPermission;\n\n  var createPer = checkPermission({\n    \"admin.beds\": \"C\"\n  });\n  var deletePer = checkPermission({\n    \"admin.beds\": \"D\"\n  });\n  var columns = [{\n    title: t(\"room\"),\n    dataIndex: 'roomCode',\n    key: 'roomCode',\n    sorter: true,\n    filterable: true,\n    width: '20%',\n    render: function render(text, record) {\n      return __jsx(\"a\", {\n        onClick: function onClick() {\n          return redirect('frontend.admin.beds.edit', {\n            id: record.id\n          });\n        }\n      }, record.roomCode);\n    }\n  }, {\n    title: t('beds.bedId'),\n    dataIndex: 'bedId',\n    key: 'bedId',\n    width: '20%'\n  }, {\n    title: t('status'),\n    dataIndex: 'status',\n    sorter: true,\n    filterCheck: true,\n    options: [{\n      label: t('beds.empty'),\n      value: 0\n    }, {\n      label: t('beds.full'),\n      value: 1\n    }],\n    key: 'status',\n    width: '20%',\n    render: function render(text, record) {\n      return __jsx(\"div\", null, formaterStatus(text));\n    }\n  }, {\n    title: t(\"note\"),\n    dataIndex: 'note',\n    key: 'note'\n  }];\n\n  var onChangeSelection = function onChangeSelection(data) {\n    if (data.length > 0) {\n      setHiddenDeleteBtn(false);\n    } else {\n      setHiddenDeleteBtn(true);\n    }\n\n    setSelectedIds(data);\n  };\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var _yield$to, _yield$to2, error, beds, code, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return to(bedService.index(values));\n\n            case 2:\n              _yield$to = _context.sent;\n              _yield$to2 = _slicedToArray(_yield$to, 2);\n              error = _yield$to2[0];\n              beds = _yield$to2[1];\n\n              if (!error) {\n                _context.next = 10;\n                break;\n              }\n\n              code = error.code, message = error.message;\n              notify(t(\"errors:\".concat(code)), t(message), 'error');\n              return _context.abrupt(\"return\", {});\n\n            case 10:\n              return _context.abrupt(\"return\", beds);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchData(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onDelete = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _yield$to3, _yield$to4, error, result;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return to(bedService[\"delete\"]({\n                ids: selectedIds\n              }));\n\n            case 2:\n              _yield$to3 = _context2.sent;\n              _yield$to4 = _slicedToArray(_yield$to3, 2);\n              error = _yield$to4[0];\n              result = _yield$to4[1];\n\n              if (!error) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", notify(t(\"errors:\".concat(error.code)), t(\"\".concat(error.message)), 'error'));\n\n            case 8:\n              notify(t(\"message.recordDeleted\"));\n\n              if (tableRef.current !== null) {\n                tableRef.current.reload();\n              }\n\n              setSelectedIds([]);\n              setHiddenDeleteBtn(true);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onDelete() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var renderDeleteDialog = function renderDeleteDialog() {\n    return __jsx(ConfirmDialog, {\n      ref: confirmRef,\n      onSubmit: onDelete,\n      title: t('deleteItem'),\n      content: t('message.deleteConfirm')\n    });\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Button, {\n    hidden: !createPer,\n    onClick: function onClick() {\n      return redirect(\"frontend.admin.beds.create\");\n    },\n    type: \"primary\",\n    className: \"btn-top\"\n  }, __jsx(PlusCircleOutlined, null), t('create')), __jsx(Button, {\n    danger: true,\n    onClick: function onClick() {\n      if (confirmRef.current) confirmRef.current.show();\n    },\n    className: \"btn-top\",\n    hidden: hiddenDeleteBtn || !deletePer\n  }, __jsx(DeleteOutlined, null), t('delete')), __jsx(GridTable, {\n    ref: tableRef,\n    columns: columns,\n    data: beds,\n    rowSelection: {\n      selectedRowKeys: selectedIds,\n      onChange: function onChange(data) {\n        return onChangeSelection(data);\n      }\n    },\n    fetchData: fetchData,\n    total: total\n  }), renderDeleteDialog()));\n};\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ctx) {\n    var bedService, defaultOptions, query, filters, _yield$to5, _yield$to6, error, beds;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            bedService = new BedService(ctx);\n            defaultOptions = {\n              filters: [],\n              sorting: []\n            };\n            query = ctx.query;\n            filters = GridTableHelper.getOptions(query, defaultOptions);\n            _context3.next = 6;\n            return to(bedService.index(filters));\n\n          case 6:\n            _yield$to5 = _context3.sent;\n            _yield$to6 = _slicedToArray(_yield$to5, 2);\n            error = _yield$to6[0];\n            beds = _yield$to6[1];\n            return _context3.abrupt(\"return\", {\n              namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n              error: error,\n              beds: useBaseHook.getData(beds, \"data\", []),\n              total: useBaseHook.getData(beds, \"total\", 0),\n              defaultQuery: {\n                filters: GridTableHelper.makeQuery(filters)\n              }\n            });\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nIndex.permissions = {\n  \"admin.beds\": \"R\"\n};\nexport default Index;","map":{"version":3,"sources":["E:/nursinghome_github/pages/admin/beds/index.tsx"],"names":["Layout","GridTable","GridTableHelper","ConfirmDialog","Button","BedService","to","React","useState","useBaseHook","usePermissionHook","PlusCircleOutlined","DeleteOutlined","formaterStatus","value","t","Math","round","Number","Index","beds","total","notify","redirect","setStore","getAuth","getStore","hiddenDeleteBtn","setHiddenDeleteBtn","selectedIds","setSelectedIds","bedService","confirmRef","createRef","tableRef","checkPermission","createPer","deletePer","columns","title","dataIndex","key","sorter","filterable","width","render","text","record","id","roomCode","filterCheck","options","label","onChangeSelection","data","length","fetchData","values","index","error","code","message","onDelete","ids","result","current","reload","renderDeleteDialog","show","selectedRowKeys","onChange","getInitialProps","ctx","defaultOptions","filters","sorting","query","getOptions","namespacesRequired","getData","defaultQuery","makeQuery","permissions"],"mappings":"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","sourcesContent":["import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper, FilterInput } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button } from 'antd';\r\nimport BedService from 'themes/services/api/BedService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport {PlusCircleOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\nconst formaterStatus = (value: any) => {\r\n  const { t } = useBaseHook();\r\n  value = Math.round(Number(value))\r\n  value = (value == 0 ? t('beds.empty') : t('beds.full'))\r\n  return `${value}`\r\n}\r\n\r\nconst Index = ({ beds, total }: { beds: Bed[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const bedService = new BedService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"admin.beds\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"admin.beds\": \"D\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t(\"room\"),\r\n      dataIndex: 'roomCode',\r\n      key: 'roomCode',\r\n      sorter: true,\r\n      filterable:true,\r\n      width: '20%',\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.beds.edit', { id: record.id })}>{record.roomCode}</a>\r\n    },\r\n    {\r\n      title: t('beds.bedId'),\r\n      dataIndex: 'bedId',\r\n      key: 'bedId',\r\n      width: '20%',\r\n    },\r\n    {\r\n      title: t('status'),\r\n      dataIndex: 'status',\r\n      sorter: true,\r\n      filterCheck: true,\r\n      options: [{ label:t('beds.empty'), value:0 }, { label:t('beds.full'), value:1 }],\r\n      key: 'status',\r\n      width: '20%',\r\n      render: (text: string, record: any) => <div>{formaterStatus(text)}</div>\r\n    },\r\n    {\r\n      title: t(\"note\"),\r\n      dataIndex: 'note',\r\n      key: 'note',\r\n    },\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, beds]: any[] = await to(bedService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return beds\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(bedService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.beds.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      \r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={beds}\r\n        rowSelection={{selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let bedService = new BedService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, beds]: any[] = await to(bedService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\r\n    error: error,\r\n    beds: useBaseHook.getData(beds, \"data\", []),\r\n    total: useBaseHook.getData(beds, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.beds\": \"R\"\r\n};\r\nexport default Index"]},"metadata":{},"sourceType":"module"}