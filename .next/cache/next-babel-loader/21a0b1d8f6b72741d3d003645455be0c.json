{"ast":null,"code":"var _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\doctorAssignments\\\\create.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Input, Select, DatePicker } from 'antd';\nimport RoomService from 'themes/services/api/RoomService';\nimport UserService from 'themes/services/api/UserService';\nimport DoctorAssignService from 'themes/services/api/DoctorAssignmentService';\nimport _ from 'lodash';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { DeleteFilled, LeftCircleFilled } from '@ant-design/icons';\nimport moment from 'moment';\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 18\n    }\n  }\n};\n\nconst Create = ({\n  rooms,\n  users\n}) => {\n  const {\n    t,\n    notify,\n    redirect,\n    setStore,\n    getAuth,\n    getStore\n  } = useBaseHook();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const [form] = Form.useForm();\n  const doctorAssignService = new DoctorAssignService(); //submit form\n\n  const onFinish = async values => {\n    console.log(values);\n    setLoading(true);\n    let [error, result] = await to(doctorAssignService.create(values));\n    setLoading(false);\n\n    if (error) {\n      return notify(t(`errors:${error.code}`), t(error.message), 'error');\n    }\n\n    notify(t(\"message.recordCreated\"));\n    redirect(\"frontend.admin.doctorAssignments.index\");\n  }; //render option\n\n\n  const renderOptionRoom = () => {\n    let result = [];\n    rooms.map(item => {\n      result.push(__jsx(Option, {\n        value: item.code,\n        key: item.code,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 7\n        }\n      }, item.code));\n    });\n    return result;\n  };\n\n  const datetz = value => {\n    value = moment(value).utcOffset(420).format('YYYY-MM-DD HH:mm');\n  };\n\n  const renderOptionUser = () => {\n    let result = [];\n    users.map(item => {\n      item.position = item.position ? item.position.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : \"\";\n      if (item.position == \"Bác sỹ\") result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }\n      }, item.code, \" - \", item.fullname));\n    });\n    return result;\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    name: \"createDoctorAssign\",\n    initialValues: {\n      doctorId: \"\",\n      roomCode: \"\",\n      dateBegin: \"\",\n      dateEnd: \"\",\n      note: \"\"\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), __jsx(Form.Item, {\n    label: t(\"doctorAssignments.doctorCode\"),\n    name: \"doctorId\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, __jsx(Select, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, renderOptionUser())), __jsx(Form.Item, {\n    label: t(\"doctorAssignments.roomCode\"),\n    name: \"roomCode\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, __jsx(Select, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, renderOptionRoom())), __jsx(Form.Item, {\n    label: t(\"doctorAssignments.dateBegin\"),\n    name: \"dateBegin\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    onChange: datetz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"doctorAssignments.dateEnd\"),\n    name: \"dateEnd\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    onChange: datetz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"note\"),\n    name: \"note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: () => redirect(\"frontend.admin.doctorAssignments.index\"),\n    style: {\n      marginRight: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, __jsx(LeftCircleFilled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }), \" \", t('cancel')), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, __jsx(DeleteFilled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }), \" \", t('submit'))))));\n};\n\nCreate.getInitialProps = async ctx => {\n  const roomService = new RoomService(ctx);\n  const userService = new UserService(ctx);\n  const [errorRooms, rooms] = await to(roomService.index({\n    pageSize: -1\n  }));\n  const [errorUsers, users] = await to(userService.index({\n    pageSize: -1\n  }));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu'],\n    errorRooms: errorRooms,\n    errorUsers: errorUsers,\n    rooms: _.get(rooms, \"data\", []),\n    users: _.get(users, \"data\", [])\n  };\n};\n\nCreate.permissions = {\n  \"admin.doctorAssignments\": \"C\"\n};\nexport default Create;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/doctorAssignments/create.tsx"],"names":["React","useState","Layout","Button","Form","Input","Select","DatePicker","RoomService","UserService","DoctorAssignService","_","to","useBaseHook","DeleteFilled","LeftCircleFilled","moment","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","Create","rooms","users","t","notify","redirect","setStore","getAuth","getStore","loading","setLoading","form","useForm","doctorAssignService","onFinish","values","console","log","error","result","create","code","message","renderOptionRoom","map","item","push","datetz","value","utcOffset","format","renderOptionUser","position","replace","id","fullname","doctorId","roomCode","dateBegin","dateEnd","note","required","textAlign","marginRight","getInitialProps","ctx","roomService","userService","errorRooms","index","pageSize","errorUsers","namespacesRequired","get","permissions"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Row, Col, Form, Input, Select, InputNumber, Radio, DatePicker } from 'antd';\r\nimport RoomService from 'themes/services/api/RoomService';\r\nimport UserService from 'themes/services/api/UserService';\r\nimport DoctorAssignService from 'themes/services/api/DoctorAssignmentService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { DeleteFilled, LeftCircleFilled } from '@ant-design/icons';\r\nimport moment from 'moment'\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 18 },\r\n  },\r\n};\r\n\r\nconst Create = ({ rooms, users }: { rooms: Room[], users: User[] }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const doctorAssignService = new DoctorAssignService()\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    console.log(values)\r\n    setLoading(true)\r\n    let [error, result]: any[] = await to(doctorAssignService.create(values));\r\n    setLoading(false)\r\n\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(error.message), 'error')\r\n    }\r\n    notify(t(\"message.recordCreated\"))\r\n    redirect(\"frontend.admin.doctorAssignments.index\")\r\n  }\r\n\r\n  //render option\r\n  const renderOptionRoom = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    rooms.map(item => {\r\n      result.push(\r\n      <Option value={item.code} key={item.code}>{item.code}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n\r\n  const datetz = (value: any) => {\r\n    value = moment(value).utcOffset(420).format('YYYY-MM-DD HH:mm')\r\n  }\r\n\r\n  const renderOptionUser = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    users.map(item => {\r\n      item.position = item.position? item.position.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : \"\"\r\n      if(item.position == \"Bác sỹ\")\r\n      result.push(\r\n      <Option value={item.id} key={item.id}>{item.code} - {item.fullname}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n  \r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"createDoctorAssign\"\r\n        initialValues={{\r\n          doctorId: \"\",\r\n          roomCode: \"\",\r\n          dateBegin: \"\",\r\n          dateEnd: \"\",\r\n          note: \"\"\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"doctorAssignments.doctorCode\")}\r\n          name=\"doctorId\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select>\r\n            {renderOptionUser()}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"doctorAssignments.roomCode\")}\r\n          name=\"roomCode\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select>\r\n            {renderOptionRoom()}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"doctorAssignments.dateBegin\")}\r\n          name=\"dateBegin\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} showTime={false} onChange={datetz}/>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"doctorAssignments.dateEnd\")}\r\n          name=\"dateEnd\"\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} showTime={false} onChange={datetz}/>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"note\")}\r\n          name=\"note\"\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{textAlign: \"center\"}}>\r\n          <Button onClick={() => redirect(\"frontend.admin.doctorAssignments.index\")} style={{ marginRight: 8}}>\r\n            <LeftCircleFilled /> {t('cancel')}\r\n          </Button>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n            <DeleteFilled /> {t('submit')}\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nCreate.getInitialProps = async (ctx: any) => {\r\n  const roomService = new RoomService(ctx)\r\n  const userService = new UserService(ctx)\r\n  const [errorRooms, rooms] = await to(roomService.index({ pageSize: -1 }));\r\n  const [errorUsers, users] = await to(userService.index({ pageSize: -1 }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages','menu'],\r\n    errorRooms: errorRooms,\r\n    errorUsers: errorUsers,\r\n    rooms: _.get(rooms, \"data\", []),\r\n    users: _.get(users, \"data\", []),\r\n  }\r\n}\r\nCreate.permissions = {\r\n  \"admin.doctorAssignments\": \"C\"\r\n};\r\nexport default Create"]},"metadata":{},"sourceType":"module"}