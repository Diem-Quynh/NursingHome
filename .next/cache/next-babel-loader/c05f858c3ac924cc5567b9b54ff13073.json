{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst UrlPattern = require('url-pattern');\n\nconst queryString = require('query-string');\n\nimport Router from 'next/router';\nimport routeConfig from './_routes';\nimport sidebar from './sidebar';\n\nclass Route {\n  static makeUrl(name, params) {\n    let routeInfo = routeConfig[name];\n\n    if (!routeInfo) {\n      //console.error(`Route ${name} not found`)\n      throw Error(`Route ${name} not found`);\n    }\n\n    let pattern = new UrlPattern(routeInfo.url);\n    let query = queryString.stringify(params);\n\n    try {\n      let asUrl = pattern.stringify(params); //link hiển thị trên trình duyệt\n\n      let href = asUrl; //link thật trong /pages\n\n      if (routeInfo.action.substr(0, 6) === \"pages/\") {\n        href = routeInfo.action.substr(5);\n\n        if (href.indexOf('?') === -1) {\n          href += `?${query}`;\n        } else {\n          href += `&${query}`;\n        }\n      }\n\n      return {\n        as: asUrl,\n        href: href\n      };\n    } catch (e) {\n      //console.error(e)\n      throw e;\n    }\n  }\n\n  static addQuery(query, shallow = true) {\n    if (!false) return;\n    let asPath = window.location.pathname;\n    let oldQuery = Router.router.query;\n\n    let queryObj = _objectSpread({}, oldQuery, {}, query);\n\n    if (JSON.stringify(queryObj) == JSON.stringify(oldQuery)) return;\n    let queryStringAppend = queryString.stringify(queryObj);\n    /* if(queryStringAppend){\r\n      Router.push({\r\n        pathname: Router.router.pathname,\r\n        query: queryObj,\r\n      }, {\r\n        pathname: asPath,\r\n        query: queryObj\r\n      }, {\r\n        shallow: shallow,\r\n      })\r\n      Router.router.query = queryObj\r\n    } */\n\n    Router.push({\n      pathname: Router.router.pathname,\n      query: queryObj\n    }, {\n      pathname: asPath,\n      query: queryObj\n    }, {\n      shallow: shallow\n    });\n  }\n\n}\n\n_defineProperty(Route, \"getSidebarSelecteds\", (routeName, routes, routePaths = []) => {\n  let sidebarSelectedName = routeConfig[routeName] ? routeConfig[routeName].sidebar : undefined;\n  if (!routes) routes = sidebar;\n\n  for (let route of routes) {\n    if (route.routeName === sidebarSelectedName) {\n      routePaths.push(route);\n      return routePaths;\n    } else if (route.children) {\n      let result = Route.getSidebarSelecteds(sidebarSelectedName, route.children, [...routePaths, route]);\n      if (result && result.length) return result;\n    }\n  }\n\n  return [];\n});\n\n_defineProperty(Route, \"getBreadcrumbs\", routeName => {\n  let result = [];\n  const route = routeConfig[routeName] ? routeConfig[routeName] : undefined;\n\n  if (route) {\n    result.unshift(route);\n\n    if (route.parent) {\n      result = [...Route.getBreadcrumbs(route.parent), ...result];\n    }\n  }\n\n  return result;\n});\n\nconst route = Route.makeUrl;\nconst addQuery = Route.addQuery;\nconst getBreadcrumbs = Route.getBreadcrumbs;\nconst getSidebarSelecteds = Route.getSidebarSelecteds;\nexport default route;\nexport { route, addQuery, getBreadcrumbs, getSidebarSelecteds };","map":{"version":3,"sources":["E:/DATN/nursinghome/themes/route.js"],"names":["UrlPattern","require","queryString","Router","routeConfig","sidebar","Route","makeUrl","name","params","routeInfo","Error","pattern","url","query","stringify","asUrl","href","action","substr","indexOf","as","e","addQuery","shallow","asPath","window","location","pathname","oldQuery","router","queryObj","JSON","queryStringAppend","push","routeName","routes","routePaths","sidebarSelectedName","undefined","route","children","result","getSidebarSelecteds","length","unshift","parent","getBreadcrumbs"],"mappings":"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","sourcesContent":["const UrlPattern = require('url-pattern');\r\nconst queryString = require('query-string');\r\n\r\nimport Router from 'next/router';\r\nimport routeConfig from './_routes'\r\nimport sidebar from './sidebar'\r\nclass Route {\r\n    static makeUrl(name, params) {\r\n        let routeInfo = routeConfig[name]\r\n        if (!routeInfo) {\r\n            //console.error(`Route ${name} not found`)\r\n            throw Error(`Route ${name} not found`);\r\n        }\r\n        let pattern = new UrlPattern(routeInfo.url);\r\n        let query = queryString.stringify(params)\r\n        try {\r\n            let asUrl = pattern.stringify(params) //link hiển thị trên trình duyệt\r\n            let href = asUrl //link thật trong /pages\r\n            if (routeInfo.action.substr(0, 6) === \"pages/\") {\r\n                href = routeInfo.action.substr(5)\r\n                if (href.indexOf('?') === -1) {\r\n                    href += `?${query}`\r\n                } else {\r\n                    href += `&${query}`\r\n                }\r\n            }\r\n            return {\r\n                as: asUrl,\r\n                href: href\r\n            }\r\n\r\n        } catch (e) {\r\n            //console.error(e)\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    static addQuery(query, shallow = true) {\r\n        if (!process.browser) return;\r\n        let asPath = window.location.pathname\r\n        let oldQuery = Router.router.query\r\n        let queryObj = {\r\n            ...oldQuery,\r\n            ...query\r\n        }\r\n        if (JSON.stringify(queryObj) == JSON.stringify(oldQuery)) return;\r\n        let queryStringAppend = queryString.stringify(queryObj)\r\n            /* if(queryStringAppend){\r\n              Router.push({\r\n                pathname: Router.router.pathname,\r\n                query: queryObj,\r\n              }, {\r\n                pathname: asPath,\r\n                query: queryObj\r\n              }, {\r\n                shallow: shallow,\r\n              })\r\n              Router.router.query = queryObj\r\n            } */\r\n        Router.push({\r\n            pathname: Router.router.pathname,\r\n            query: queryObj,\r\n        }, {\r\n            pathname: asPath,\r\n            query: queryObj\r\n        }, {\r\n            shallow: shallow,\r\n        })\r\n    }\r\n\r\n    static getSidebarSelecteds = (routeName, routes, routePaths = []) => {\r\n        let sidebarSelectedName = routeConfig[routeName] ? routeConfig[routeName].sidebar : undefined\r\n        if (!routes) routes = sidebar\r\n        for (let route of routes) {\r\n            if (route.routeName === sidebarSelectedName) {\r\n                routePaths.push(route)\r\n\r\n                return routePaths\r\n            } else if (route.children) {\r\n                let result = this.getSidebarSelecteds(sidebarSelectedName, route.children, [...routePaths, route])\r\n                if (result && result.length) return result\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    static getBreadcrumbs = (routeName) => {\r\n        let result = []\r\n        const route = routeConfig[routeName] ? routeConfig[routeName] : undefined\r\n        if (route) {\r\n            result.unshift(route);\r\n\r\n            if (route.parent) {\r\n                result = [...this.getBreadcrumbs(route.parent), ...result]\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n}\r\nconst route = Route.makeUrl\r\nconst addQuery = Route.addQuery\r\nconst getBreadcrumbs = Route.getBreadcrumbs\r\nconst getSidebarSelecteds = Route.getSidebarSelecteds\r\nexport default route;\r\nexport {\r\n    route,\r\n    addQuery,\r\n    getBreadcrumbs,\r\n    getSidebarSelecteds\r\n}"]},"metadata":{},"sourceType":"module"}