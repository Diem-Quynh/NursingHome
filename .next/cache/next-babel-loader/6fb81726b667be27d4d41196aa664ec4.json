{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _ from 'lodash';\nimport Request from 'themes/modules/Request';\nimport route from 'themes/route';\nimport Router from 'next/router';\nimport cookies from 'themes/modules/Cookies';\nimport nextCookie from 'next-cookies';\n\nclass BaseApi {\n  constructor(context) {\n    _defineProperty(this, \"cookies\", void 0);\n\n    _defineProperty(this, \"Request\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"getData\", (obj, path, defaultValue) => {\n      return _.get(obj, path, defaultValue);\n    });\n\n    _defineProperty(this, \"globalHandleCallback\", response => {\n      return response;\n    });\n\n    _defineProperty(this, \"globalHandleErrorCallback\", error => {\n      let status = _.get(error, \"response.status\", -1);\n\n      if (status === -1) {//notify(\"Unable connect to server!\", \"error\")\n      } else if (status === 401) {\n        this.cookies.remove(\"token\");\n        this.cookies.remove(\"user\");\n\n        if (window && window.location.pathname !== \"/login\") {\n          //notify(\"Login session expired!\", \"error\")\n          this.redirect(\"frontend.admin.login\");\n        } else {//login screen. không làm gì cả.\n        }\n      }\n\n      return error.response;\n    });\n\n    const cookiesObj = context ? nextCookie(context) : {};\n    this.cookies = cookies(cookiesObj);\n    this.Request = new Request(cookiesObj);\n    this.Request.handleGlobalCallback = this.globalHandleCallback;\n    this.Request.handleGlobalErrorCallback = this.globalHandleErrorCallback;\n    this.name = \"\";\n  }\n\n  route(routeName, query) {\n    return route(routeName, query);\n  }\n\n  redirect(routeName, query) {\n    let nextRoute = route(routeName, query);\n    Router.push(nextRoute.href, nextRoute.as);\n  }\n\n  async index(data) {\n    const url = this.route(`api.${this.name}.index`, data).href;\n    return await this.Request.get(url, data);\n  }\n\n  async create(data) {\n    const url = this.route(`api.${this.name}.store`, data).href;\n    let result = await this.Request.post(url, data);\n    return result;\n  }\n\n  async detail(data) {\n    const url = this.route(`api.${this.name}.detail`, data).href;\n    return await this.Request.get(url, data);\n  }\n\n  async edit(data) {\n    const url = this.route(`api.${this.name}.update`, data).href;\n    return await this.Request.put(url, data);\n  }\n\n  async delete(data) {\n    const url = this.route(`api.${this.name}.delete`, data).href;\n    return await this.Request.delete(url, data);\n  }\n\n}\n\nexport default BaseApi;","map":{"version":3,"sources":["E:/DATN/nursinghome/themes/services/api/BaseService.ts"],"names":["_","Request","route","Router","cookies","nextCookie","BaseApi","constructor","context","obj","path","defaultValue","get","response","error","status","remove","window","location","pathname","redirect","cookiesObj","handleGlobalCallback","globalHandleCallback","handleGlobalErrorCallback","globalHandleErrorCallback","name","routeName","query","nextRoute","push","href","as","index","data","url","create","result","post","detail","edit","put","delete"],"mappings":"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","sourcesContent":["import _ from 'lodash'\r\nimport Request from 'themes/modules/Request'\r\nimport route from 'themes/route'\r\nimport Router from 'next/router'\r\nimport cookies from 'themes/modules/Cookies';\r\nimport nextCookie from 'next-cookies'\r\nimport { notification } from 'antd';\r\nimport Cookies from 'universal-cookie';\r\n\r\n\r\nclass BaseApi{\r\n  cookies: Cookies\r\n  Request: Request\r\n  name: string\r\n\r\n  constructor(context?: Context) {\r\n    const cookiesObj = context ? nextCookie(context): {}\r\n    this.cookies = cookies(cookiesObj);\r\n    this.Request = new Request(cookiesObj)\r\n    this.Request.handleGlobalCallback = this.globalHandleCallback\r\n    this.Request.handleGlobalErrorCallback = this.globalHandleErrorCallback\r\n    this.name = \"\";\r\n  }\r\n\r\n  getData = (obj: any, path: string, defaultValue: any) => {\r\n    return _.get(obj, path, defaultValue)\r\n  }\r\n  globalHandleCallback = (response: Response) => {\r\n    return response\r\n  }\r\n\r\n  globalHandleErrorCallback = (error: any) => {\r\n    let status = _.get(error, \"response.status\", -1);\r\n    if(status === -1){\r\n      //notify(\"Unable connect to server!\", \"error\")\r\n    }\r\n    else if (status === 401) {\r\n      this.cookies.remove(\"token\")\r\n      this.cookies.remove(\"user\")\r\n      if (window && window.location.pathname !== \"/login\"){\r\n        //notify(\"Login session expired!\", \"error\")\r\n        this.redirect(\"frontend.admin.login\")\r\n      }\r\n      else{\r\n        //login screen. không làm gì cả.\r\n      }\r\n    }\r\n    return error.response\r\n  }\r\n\r\n  route(routeName: string, query?: any){\r\n    return route(routeName, query)\r\n  }\r\n\r\n  redirect(routeName: string, query?: any){\r\n    let nextRoute = route(routeName, query)\r\n    Router.push(nextRoute.href, nextRoute.as)\r\n  }\r\n\r\n  async index(data?: any){\r\n    const url = this.route(`api.${this.name}.index`, data).href\r\n    return await this.Request.get(url, data)\r\n  }\r\n\r\n  async create(data: any){\r\n    const url = this.route(`api.${this.name}.store`,data).href\r\n    let result = await this.Request.post(url, data)\r\n    return result\r\n  }\r\n\r\n  async detail(data: any){\r\n    const url = this.route(`api.${this.name}.detail`, data).href\r\n    return await this.Request.get(url, data)\r\n  }\r\n\r\n  async edit(data: any){\r\n    const url = this.route(`api.${this.name}.update`, data).href\r\n    return await this.Request.put(url, data)\r\n  }\r\n\r\n  async delete(data: any){\r\n    const url = this.route(`api.${this.name}.delete`, data).href\r\n    return await this.Request.delete(url, data)\r\n  }\r\n\r\n}\r\n\r\nexport default BaseApi"]},"metadata":{},"sourceType":"module"}