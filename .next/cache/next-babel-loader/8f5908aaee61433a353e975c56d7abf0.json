{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Select, DatePicker } from 'antd';\nimport HealthService from 'themes/services/api/HealthStatusService';\nimport PatientService from 'themes/services/api/PatientService';\nimport _ from 'lodash';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { RightCircleFilled } from '@ant-design/icons';\nimport { TimelineChart } from 'ant-design-pro/lib/Charts'; // import {ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\n\nvar RangePicker = DatePicker.RangePicker;\nimport moment from 'moment';\nvar Option = Select.Option;\nvar formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 9\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 15\n    }\n  }\n};\n\nvar Statistic = function Statistic(_ref) {\n  var patients = _ref.patients;\n\n  var _useBaseHook = useBaseHook(),\n      t = _useBaseHook.t,\n      notify = _useBaseHook.notify,\n      redirect = _useBaseHook.redirect,\n      setStore = _useBaseHook.setStore,\n      getAuth = _useBaseHook.getAuth,\n      getStore = _useBaseHook.getStore;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState([{\n    x: 1000,\n    y1: 100,\n    y2: 100\n  }]),\n      bloodPressure = _useState2[0],\n      setbloodPressure = _useState2[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var healthService = new HealthService();\n\n  var DisplayError = function DisplayError(err) {\n    return notify(t(\"errors:\".concat(err.code)), t(err.message), 'error');\n  };\n\n  var getBloodPressure = function getBloodPressure(param) {\n    var blood = {\n      bloodPressureUpper: '',\n      bloodPressureLower: ''\n    };\n\n    if (param) {\n      var index = param.indexOf('/');\n      var bloodPressureUpper = param.slice(0, index);\n      var bloodPressureLower = param.slice(index + 1);\n      blood = {\n        bloodPressureUpper: bloodPressureUpper,\n        bloodPressureLower: bloodPressureLower\n      };\n    }\n\n    return blood;\n  }; //submit form\n\n\n  var onFinish = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var dateStart, dateEnd, filterPatient, filterDate, sorter, _yield$to, _yield$to2, error, result, healths;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              dateStart = moment(values.date[0]).startOf(\"days\").add(14, 'h').toISOString();\n              dateEnd = moment(values.date[1]).startOf(\"days\").add(14, 'h').toISOString();\n              filterPatient = JSON.stringify({\n                field: \"patientId\",\n                operator: \"=\",\n                value: values.patientId\n              });\n              filterDate = JSON.stringify({\n                field: \"date\",\n                operator: \"between\",\n                value: [dateStart, dateEnd]\n              });\n              sorter = JSON.stringify({\n                field: \"date\",\n                direction: \"asc\"\n              });\n              setLoading(false);\n              _context.next = 9;\n              return to(healthService.index({\n                pageSize: -1,\n                filters: [filterPatient, filterDate],\n                sorting: [sorter]\n              }));\n\n            case 9:\n              _yield$to = _context.sent;\n              _yield$to2 = _slicedToArray(_yield$to, 2);\n              error = _yield$to2[0];\n              result = _yield$to2[1];\n\n              if (!error) {\n                _context.next = 15;\n                break;\n              }\n\n              return _context.abrupt(\"return\", DisplayError(error));\n\n            case 15:\n              if (!_.isEmpty(result.data)) {\n                healths = [];\n                result.data.map(function (item) {\n                  var blood = getBloodPressure(item.bloodPressure);\n                  healths.push({\n                    x: new Date(item.date).getTime(),\n                    y1: Number(blood.bloodPressureUpper),\n                    y2: Number(blood.bloodPressureLower)\n                  });\n                });\n                setbloodPressure(healths);\n              }\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onFinish(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); //render option\n\n\n  var renderOptionPatient = function renderOptionPatient() {\n    var result = [];\n    patients.map(function (item) {\n      result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id\n      }, item.code, \" - \", item.fullname, \" - \", item.roomCode, \" - \", item.bedCode));\n    });\n    return result;\n  };\n  /* //   render chart Blood pressure\r\n  const renderChartBloodPressure = () => {\r\n      if((bloodPressure.length)>0)\r\n          return <TimelineChart height={200} data={bloodPressure} titleMap={{ y1: t('healthStatuses.upperIndex'), y2: t('healthStatuses.lowerIndex') }} />\r\n      return <div></div>\r\n  } */\n\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    layout: \"inline\",\n    name: \"statisticHealth\",\n    initialValues: {\n      patientId: undefined,\n      date: \"\"\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true\n  }), __jsx(Form.Item, {\n    label: t(\"patient\"),\n    name: \"patientId\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: t('placeholder.patient'),\n    filterOption: function filterOption(input, option) {\n      return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    }\n  }, renderOptionPatient())), __jsx(Form.Item, {\n    label: t(\"healthStatuses.date\"),\n    name: \"date\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(RangePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false\n  })), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    style: {\n      marginRight: 8\n    }\n  }, t('statistic'), \" \", __jsx(RightCircleFilled, null)))), __jsx(TimelineChart, {\n    height: 200,\n    data: bloodPressure,\n    titleMap: {\n      y1: t('healthStatuses.upperIndex'),\n      y2: t('healthStatuses.lowerIndex')\n    }\n  })));\n};\n\nStatistic.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ctx) {\n    var patientService, _yield$to3, _yield$to4, errorPatient, patients;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            patientService = new PatientService(ctx);\n            _context2.next = 3;\n            return to(patientService.index({\n              pageSize: -1\n            }));\n\n          case 3:\n            _yield$to3 = _context2.sent;\n            _yield$to4 = _slicedToArray(_yield$to3, 2);\n            errorPatient = _yield$to4[0];\n            patients = _yield$to4[1];\n            return _context2.abrupt(\"return\", {\n              namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n              patients: _.get(patients, \"data\", [])\n            });\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nStatistic.permissions = {\n  \"admin.healthStatuses\": \"U\"\n};\nexport default Statistic;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/statistics/healthStatus.tsx"],"names":["React","useState","Layout","Button","Form","Select","DatePicker","HealthService","PatientService","_","to","useBaseHook","RightCircleFilled","TimelineChart","RangePicker","moment","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","Statistic","patients","t","notify","redirect","setStore","getAuth","getStore","loading","setLoading","x","y1","y2","bloodPressure","setbloodPressure","useForm","form","healthService","DisplayError","err","code","message","getBloodPressure","param","blood","bloodPressureUpper","bloodPressureLower","index","indexOf","slice","onFinish","values","dateStart","date","startOf","add","toISOString","dateEnd","filterPatient","JSON","stringify","field","operator","value","patientId","filterDate","sorter","direction","pageSize","filters","sorting","error","result","isEmpty","data","healths","map","item","push","Date","getTime","Number","renderOptionPatient","id","fullname","roomCode","bedCode","undefined","required","input","option","children","toLowerCase","textAlign","marginRight","getInitialProps","ctx","patientService","errorPatient","namespacesRequired","get","permissions"],"mappings":"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","sourcesContent":["import React, { useState, Component } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Form, Input, Select, DatePicker, InputNumber } from 'antd';\r\nimport HealthService from 'themes/services/api/HealthStatusService';\r\nimport PatientService from 'themes/services/api/PatientService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { RightCircleFilled } from '@ant-design/icons';\r\nimport { TimelineChart } from 'ant-design-pro/lib/Charts';\r\n// import {ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\r\nconst { RangePicker } = DatePicker;\r\nimport moment from 'moment'\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 9 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 15 },\r\n  },\r\n};\r\n\r\ninterface bloodPressureChar {\r\n    x: number,\r\n    y1: number,\r\n    y2: number\r\n}\r\n\r\nconst Statistic = ({ patients }: { patients: Patient[] }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [bloodPressure, setbloodPressure] = useState([{x:1000,y1:100,y2:100}]);\r\n  const [form] = Form.useForm();\r\n  const healthService = new HealthService()\r\n\r\n  const DisplayError = (err: any) => {\r\n    return notify(t(`errors:${err.code}`), t(err.message), 'error')\r\n  }\r\n\r\n  const getBloodPressure = (param: string) => {\r\n    let blood = {bloodPressureUpper: '', bloodPressureLower: ''}\r\n    if(param) {\r\n      const index = param.indexOf('/')\r\n      const bloodPressureUpper = param.slice(0,index)\r\n      const bloodPressureLower = param.slice(index + 1)\r\n      blood = {bloodPressureUpper: bloodPressureUpper, bloodPressureLower: bloodPressureLower}\r\n    }\r\n    return blood\r\n  }\r\n\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    setLoading(true)\r\n    const dateStart = moment(values.date[0]).startOf(\"days\").add(14,'h').toISOString()\r\n    const dateEnd = moment(values.date[1]).startOf(\"days\").add(14,'h').toISOString()\r\n    const filterPatient = JSON.stringify({field:\"patientId\",operator:\"=\",value:values.patientId})\r\n    const filterDate = JSON.stringify({field:\"date\",operator:\"between\",value:[dateStart, dateEnd]})\r\n    const sorter = JSON.stringify({field:\"date\", direction:\"asc\"})\r\n    setLoading(false)\r\n    const [error, result] = await to(healthService.index({ pageSize: -1, filters: [filterPatient, filterDate], sorting: [sorter] }));\r\n    if(error) return DisplayError(error)\r\n    if(!_.isEmpty(result.data)) {\r\n        let healths: bloodPressureChar[] = []\r\n        result.data.map((item: any) => {\r\n            let blood = getBloodPressure(item.bloodPressure)\r\n            healths.push({x: new Date(item.date).getTime(), y1: Number(blood.bloodPressureUpper), y2: Number(blood.bloodPressureLower)})\r\n        })\r\n        setbloodPressure(healths)\r\n    }\r\n  }\r\n\r\n  //render option\r\n  const renderOptionPatient = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    patients.map(item => {\r\n      result.push(\r\n      <Option value={item.id} key={item.id}>{item.code} - {item.fullname} - {item.roomCode} - {item.bedCode}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n\r\n    /* //   render chart Blood pressure\r\n    const renderChartBloodPressure = () => {\r\n        if((bloodPressure.length)>0)\r\n            return <TimelineChart height={200} data={bloodPressure} titleMap={{ y1: t('healthStatuses.upperIndex'), y2: t('healthStatuses.lowerIndex') }} />\r\n        return <div></div>\r\n    } */\r\n\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        layout=\"inline\"\r\n        name=\"statisticHealth\"\r\n        initialValues={{\r\n          patientId: undefined,\r\n          date: \"\",\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"patient\")}\r\n          name=\"patientId\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select \r\n            showSearch\r\n            placeholder = {t('placeholder.patient')}\r\n            filterOption={ (input: any, option: any) => {\r\n              return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            } }\r\n          >\r\n            {renderOptionPatient()}\r\n          </Select>\r\n        </Form.Item>\r\n        \r\n        <Form.Item\r\n          label={t(\"healthStatuses.date\")}\r\n          name=\"date\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <RangePicker format={'YYYY-MM-DD'} showTime={false} />\r\n        </Form.Item>\r\n\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: \"center\" }}>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading} style={{ marginRight: 8 }}>\r\n          {t('statistic')} <RightCircleFilled /> \r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      <TimelineChart height={200} data={bloodPressure} titleMap={{ y1: t('healthStatuses.upperIndex'), y2: t('healthStatuses.lowerIndex') }} />\r\n      {/* {renderChartBloodPressure()} */}\r\n\r\n      {/* <LineChart width={600} height={300} data={data}\r\n            margin={{top: 5, right: 30, left: 20, bottom: 5}}>\r\n       <XAxis dataKey=\"name\"/>\r\n       <YAxis/>\r\n       <CartesianGrid strokeDasharray=\"3 3\"/>\r\n       <Tooltip/>\r\n       <Legend />\r\n       <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{r: 8}}/>\r\n       <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\r\n      </LineChart> */}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nStatistic.getInitialProps = async (ctx: any) => {\r\n  const patientService = new PatientService(ctx)\r\n\r\n  const [errorPatient, patients] = await to(patientService.index({ pageSize: -1 }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    patients: _.get(patients, \"data\", [])\r\n  }\r\n}\r\nStatistic.permissions = {\r\n  \"admin.healthStatuses\": \"U\"\r\n};\r\nexport default Statistic"]},"metadata":{},"sourceType":"module"}