{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Input, Select, Radio, DatePicker } from 'antd';\nimport PatientService from 'themes/services/api/PatientService';\nimport BedService from 'themes/services/api/BedService';\nimport _ from 'lodash';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { DeleteFilled, SaveFilled, LeftCircleFilled } from '@ant-design/icons';\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\nimport moment from 'moment';\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 18\n    }\n  }\n};\n\nconst Edit = ({\n  beds,\n  patient,\n  patientError\n}) => {\n  const {\n    t,\n    notify,\n    redirect,\n    setStore,\n    getAuth,\n    getStore\n  } = useBaseHook();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const [form] = Form.useForm();\n  const patientService = new PatientService();\n  const confirmRef = React.createRef();\n  const {\n    checkPermission\n  } = usePermissionHook();\n  const deletePer = checkPermission({\n    \"admin.patients\": \"D\"\n  });\n\n  const DisplayError = err => {\n    return notify(t(`errors:${err.code}`), t(err.message), 'error');\n  }; //submit form\n\n\n  const onFinish = async values => {\n    if (patientError) return DisplayError(patientError);\n    setLoading(true);\n    let [error, result] = await to(patientService.edit({\n      id: patient.id,\n      values\n    }));\n    setLoading(false);\n    if (error) return DisplayError(error);\n    notify(t(\"message.recordUpdated\"));\n    redirect(\"frontend.admin.patients.index\");\n  };\n\n  const onDelete = async () => {\n    if (patientError) return DisplayError(patientError);\n    let [error, result] = await to(patientService.delete({\n      ids: [patient.id]\n    }));\n    if (error) return DisplayError(error);\n    notify(t('message.recordDeleted'));\n    redirect(\"frontend.admin.patients.index\");\n  }; //render option\n\n\n  const renderOption = () => {\n    let result = [];\n    beds.map(item => {\n      result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id\n      }, item.roomCode, \" - \", item.bedId, \" - \", item.status ? t('beds.full') : t('beds.empty')));\n    });\n    return result;\n  };\n\n  const renderDeleteDialog = () => {\n    return __jsx(ConfirmDialog, {\n      ref: confirmRef,\n      onSubmit: onDelete,\n      title: t('deleteItem'),\n      content: t('message.deleteConfirm')\n    });\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    name: \"createPatient\",\n    initialValues: {\n      code: patient.code,\n      fullname: patient.fullname,\n      birthday: patient.birthday ? moment(patient.birthday).subtract(7, 'h') : \"\",\n      gender: patient.gender,\n      address: patient.address,\n      cardId: patient.cardId,\n      phone: patient.phone,\n      medicalHistory: patient.medicalHistory,\n      dateIn: patient.dateIn ? moment(patient.dateIn).subtract(7, 'h') : \"\",\n      dateOut: patient.dateOut ? moment(patient.dateOut).subtract(7, 'h') : \"\",\n      bedId: patient.bedId\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true\n  }), __jsx(Form.Item, {\n    label: t(\"code\"),\n    name: \"code\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: t(\"fullname\"),\n    name: \"fullname\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: t(\"birthday\"),\n    name: \"birthday\"\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    placeholder: t('placeholder.date')\n  })), __jsx(Form.Item, {\n    label: t(\"gender\"),\n    name: \"gender\"\n  }, __jsx(Radio.Group, null, __jsx(Radio, {\n    value: 0,\n    key: 0\n  }, t(\"male\")), __jsx(Radio, {\n    value: 1,\n    key: 1\n  }, t(\"female\")))), __jsx(Form.Item, {\n    label: t(\"address\"),\n    name: \"address\"\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: t(\"cardId\"),\n    name: \"cardId\",\n    rules: [{\n      pattern: /^[0-9]+$/g,\n      message: t('form.number')\n    }, {\n      max: 12,\n      message: t('form.maxLength', {\n        length: 12\n      })\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: t(\"phone\"),\n    name: \"phone\",\n    rules: [{\n      pattern: /^[0-9]+$/g,\n      message: t('form.number')\n    }, {\n      max: 12,\n      message: t('form.maxLength', {\n        length: 12\n      })\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: t(\"patients.medicalHistory\"),\n    name: \"medicalHistory\"\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: t(\"patients.dateIn\"),\n    name: \"dateIn\"\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    placeholder: t('placeholder.date')\n  })), __jsx(Form.Item, {\n    label: t(\"patients.dateOut\"),\n    name: \"dateOut\"\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    placeholder: t('placeholder.date')\n  })), __jsx(Form.Item, {\n    label: t(\"bed\"),\n    name: \"bedId\"\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: t('placeholder.bed'),\n    filterOption: (input, option) => {\n      return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    }\n  }, renderOption())), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    }\n  }, __jsx(Button, {\n    onClick: () => redirect(\"frontend.admin.patients.index\"),\n    style: {\n      marginRight: 8\n    }\n  }, __jsx(LeftCircleFilled, null), \" \", t('cancel')), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    style: {\n      marginRight: 8\n    }\n  }, __jsx(SaveFilled, null), \" \", t('submit')), __jsx(Button, {\n    hidden: !deletePer,\n    danger: true,\n    onClick: () => {\n      if (confirmRef.current) confirmRef.current.show(patient.id);\n    }\n  }, __jsx(DeleteFilled, null), \" \", t('deleteItem')))), renderDeleteDialog()));\n};\n\nEdit.getInitialProps = async ctx => {\n  const patientService = new PatientService(ctx);\n  const bedService = new BedService(ctx);\n  const query = ctx.query;\n  let error;\n\n  if (!query.id) {\n    //error missing id\n    error = {\n      code: 9996,\n      message: 'missing ID'\n    };\n  }\n\n  let [patientError, patient] = await to(patientService.detail({\n    id: query.id\n  }));\n  if (patientError) patient = {};\n  const [errorBed, beds] = await to(bedService.index({\n    pageSize: -1\n  }));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    error: error,\n    patient: patient,\n    patientError: patientError,\n    beds: _.get(beds, \"data\", [])\n  };\n};\n\nEdit.permissions = {\n  \"admin.patients\": \"U\"\n};\nexport default Edit;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/patients/edit.tsx"],"names":["ConfirmDialog","React","useState","Layout","Button","Form","Input","Select","Radio","DatePicker","PatientService","BedService","_","to","useBaseHook","DeleteFilled","SaveFilled","LeftCircleFilled","usePermissionHook","moment","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","Edit","beds","patient","patientError","t","notify","redirect","setStore","getAuth","getStore","loading","setLoading","form","useForm","patientService","confirmRef","createRef","checkPermission","deletePer","DisplayError","err","code","message","onFinish","values","error","result","edit","id","onDelete","delete","ids","renderOption","map","item","push","roomCode","bedId","status","renderDeleteDialog","fullname","birthday","subtract","gender","address","cardId","phone","medicalHistory","dateIn","dateOut","required","pattern","max","length","input","option","children","toLowerCase","indexOf","textAlign","marginRight","current","show","getInitialProps","ctx","bedService","query","detail","errorBed","index","pageSize","namespacesRequired","get","permissions"],"mappings":"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","sourcesContent":["import ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\n\r\nimport React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Row, Col, Form, Input, Select, Modal, InputNumber, Radio, DatePicker } from 'antd';\r\nimport PatientService from 'themes/services/api/PatientService';\r\nimport BedService from 'themes/services/api/BedService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { DeleteFilled, SaveFilled, LeftCircleFilled, CopyFilled } from '@ant-design/icons';\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport moment from 'moment'\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 18 },\r\n  },\r\n};\r\n\r\nconst Edit = ({ beds, patient, patientError }: { beds: Bed[], patient: Patient, patientError: any }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const patientService = new PatientService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n\r\n  const { checkPermission } = usePermissionHook();\r\n  const deletePer = checkPermission({\r\n    \"admin.patients\": \"D\"\r\n  })\r\n  const DisplayError = (err: any) => {\r\n    return notify(t(`errors:${err.code}`), t(err.message), 'error')\r\n  }\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    if(patientError) return DisplayError(patientError)\r\n    setLoading(true)\r\n    let [error, result]: any[] = await to(patientService.edit({\r\n      id: patient.id,\r\n      values\r\n    }));\r\n    setLoading(false)\r\n    if(error) return DisplayError(error)\r\n    notify(t(\"message.recordUpdated\"))\r\n    redirect(\"frontend.admin.patients.index\")\r\n  }\r\n\r\n  const onDelete = async (): Promise<void> => {\r\n    if(patientError) return DisplayError(patientError)\r\n    let [error, result]: any[] = await to(patientService.delete({ ids: [patient.id] }));\r\n    if(error) return DisplayError(error)\r\n    notify(t('message.recordDeleted'))\r\n    redirect(\"frontend.admin.patients.index\")\r\n  }\r\n\r\n  //render option\r\n  const renderOption = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    beds.map(item => {\r\n      result.push(\r\n        <Option value={item.id} key={item.id}>{item.roomCode} - {item.bedId} - {item.status?t('beds.full'):t('beds.empty')}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"createPatient\"\r\n        initialValues={{\r\n          code: patient.code,\r\n          fullname: patient.fullname,\r\n          birthday: patient.birthday ? moment(patient.birthday).subtract(7,'h') : \"\",\r\n          gender: patient.gender,\r\n          address: patient.address,\r\n          cardId: patient.cardId,\r\n          phone: patient.phone,\r\n          medicalHistory: patient.medicalHistory,\r\n          dateIn: patient.dateIn ? moment(patient.dateIn).subtract(7,'h') : \"\",\r\n          dateOut: patient.dateOut ? moment(patient.dateOut).subtract(7,'h') : \"\",\r\n          bedId: patient.bedId\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"code\")}\r\n          name=\"code\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"fullname\")}\r\n          name=\"fullname\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"birthday\")}\r\n          name=\"birthday\"\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} showTime={false} placeholder={t('placeholder.date')} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"gender\")}\r\n          name=\"gender\"\r\n        >\r\n          <Radio.Group>\r\n            <Radio value={0} key={0}>{t(\"male\")}</Radio>\r\n            <Radio value={1} key={1}>{t(\"female\")}</Radio>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"address\")}\r\n          name=\"address\"\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"cardId\")}\r\n          name=\"cardId\"\r\n          rules={[\r\n            { pattern: /^[0-9]+$/g, message: t('form.number') },\r\n            { max: 12, message: t('form.maxLength', { length: 12 }) }\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"phone\")}\r\n          name=\"phone\"\r\n          rules={[\r\n            { pattern: /^[0-9]+$/g, message: t('form.number') },\r\n            { max: 12, message: t('form.maxLength', { length: 12 }) }\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"patients.medicalHistory\")}\r\n          name=\"medicalHistory\"\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"patients.dateIn\")}\r\n          name=\"dateIn\"\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} showTime={false} placeholder={t('placeholder.date')} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"patients.dateOut\")}\r\n          name=\"dateOut\"\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} showTime={false} placeholder={t('placeholder.date')} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"bed\")}\r\n          name=\"bedId\"\r\n        >\r\n          <Select\r\n            showSearch\r\n            placeholder={t('placeholder.bed')}\r\n            filterOption={(input: any, option: any) => {\r\n              return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            }}\r\n          >\r\n            {renderOption()}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: \"center\" }}>\r\n          <Button onClick={() => redirect(\"frontend.admin.patients.index\")} style={{ marginRight: 8 }}>\r\n            <LeftCircleFilled /> {t('cancel')}\r\n          </Button>\r\n\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading} style={{ marginRight: 8 }}>\r\n            <SaveFilled /> {t('submit')}\r\n          </Button>\r\n          \r\n          <Button hidden={!deletePer} danger onClick={() => { \r\n              if (confirmRef.current) confirmRef.current.show(patient.id) \r\n            }}>\r\n            <DeleteFilled /> {t('deleteItem')}\r\n          </Button>\r\n         \r\n        </Form.Item>\r\n      </Form>\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nEdit.getInitialProps = async (ctx: any) => {\r\n  const patientService = new PatientService(ctx)\r\n  const bedService = new BedService(ctx)\r\n  const query = ctx.query;\r\n  let error: any;\r\n\r\n  if (!query.id) {\r\n    //error missing id\r\n    error = {\r\n      code: 9996,\r\n      message: 'missing ID'\r\n    }\r\n  }\r\n\r\n  let [patientError, patient] = await to(patientService.detail({ id: query.id }));\r\n  if(patientError) patient = {}\r\n  const [errorBed, beds] = await to(bedService.index({ pageSize: -1 }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    error: error,\r\n    patient: patient,\r\n    patientError: patientError,\r\n    beds: _.get(beds, \"data\", []),\r\n  }\r\n}\r\nEdit.permissions = {\r\n  \"admin.patients\": \"U\"\r\n};\r\nexport default Edit"]},"metadata":{},"sourceType":"module"}