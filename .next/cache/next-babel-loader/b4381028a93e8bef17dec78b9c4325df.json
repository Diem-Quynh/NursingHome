{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\userGroups\\\\index.tsx\";\n\nvar __jsx = React.createElement;\nimport Layout from 'themes/layouts/Admin';\nimport { GridTable, GridTableHelper } from 'themes/components/Table';\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\nimport { Button, Typography } from 'antd';\nimport UserGroupService from 'themes/services/api/UserGroupService';\nimport to from 'await-to-js';\nimport React, { useState } from 'react';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { PlusCircleOutlined, DeleteOutlined } from '@ant-design/icons';\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\nvar Title = Typography.Title,\n    Text = Typography.Text;\n\nvar Index = function Index(_ref) {\n  var userGroups = _ref.userGroups,\n      total = _ref.total;\n\n  var _useBaseHook = useBaseHook(),\n      t = _useBaseHook.t,\n      notify = _useBaseHook.notify,\n      redirect = _useBaseHook.redirect,\n      setStore = _useBaseHook.setStore,\n      getAuth = _useBaseHook.getAuth,\n      getStore = _useBaseHook.getStore;\n\n  var _useState = useState(true),\n      hiddenDeleteBtn = _useState[0],\n      setHiddenDeleteBtn = _useState[1];\n\n  var _useState2 = useState([]),\n      selectedIds = _useState2[0],\n      setSelectedIds = _useState2[1];\n\n  var userGroupService = new UserGroupService();\n  var confirmRef = React.createRef();\n  var tableRef = React.createRef();\n\n  var _usePermissionHook = usePermissionHook(),\n      checkPermission = _usePermissionHook.checkPermission;\n\n  var createPer = checkPermission({\n    \"admin.userGroups\": \"C\"\n  });\n  var deletePer = checkPermission({\n    \"admin.userGroups\": \"D\"\n  });\n  var updatePer = checkPermission({\n    \"admin.userGroups\": \"U\"\n  });\n  var columns = [{\n    title: t('name'),\n    dataIndex: 'name',\n    key: 'name',\n    render: function render(text, record) {\n      return __jsx(\"a\", {\n        onClick: function onClick() {\n          return redirect('frontend.admin.userGroups.edit', {\n            id: record.id\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }, record.name);\n    }\n  }, {\n    title: t(\"description\"),\n    dataIndex: 'description',\n    key: 'description'\n  } // {\n  //   title: t(\"userGroups.decentralization\"),\n  //   dataIndex: 'decentralization',\n  //   key: \"decentralization\",\n  //   render: (text: string, record: any) => {\n  //     if (createPer || updatePer) {\n  //       return (\n  //       <Button onClick={() => redirect(\"frontend.admin.userGroups.role\", { id: record.id })} type=\"primary\" className='btn-top'>\n  //         <PlusCircleOutlined />\n  //         {t('userGroups.add')}\n  //       </Button>\n  //       )\n  //     } else return \"\"\n  //   }   \n  // }\n  ];\n\n  var onChangeSelection = function onChangeSelection(data) {\n    if (data.length > 0) {\n      setHiddenDeleteBtn(false);\n    } else {\n      setHiddenDeleteBtn(true);\n    }\n\n    setSelectedIds(data);\n  };\n\n  var fetchData = function fetchData(values) {\n    var _await$to, _await$to2, error, userGroups, code, message;\n\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(to(userGroupService.index(values)));\n\n          case 2:\n            _await$to = _context.sent;\n            _await$to2 = _slicedToArray(_await$to, 2);\n            error = _await$to2[0];\n            userGroups = _await$to2[1];\n\n            if (!error) {\n              _context.next = 10;\n              break;\n            }\n\n            code = error.code, message = error.message;\n            notify(t(\"errors:\".concat(code)), t(message), 'error');\n            return _context.abrupt(\"return\", {});\n\n          case 10:\n            return _context.abrupt(\"return\", userGroups);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onDelete = function onDelete() {\n    var _await$to3, _await$to4, error, result;\n\n    return _regeneratorRuntime.async(function onDelete$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(to(userGroupService[\"delete\"]({\n              ids: selectedIds\n            })));\n\n          case 2:\n            _await$to3 = _context2.sent;\n            _await$to4 = _slicedToArray(_await$to3, 2);\n            error = _await$to4[0];\n            result = _await$to4[1];\n\n            if (!error) {\n              _context2.next = 8;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", notify(t(\"errors:\".concat(error.code)), t(\"\".concat(error.message)), 'error'));\n\n          case 8:\n            notify(t(\"message.recordDeleted\"));\n\n            if (tableRef.current !== null) {\n              tableRef.current.reload();\n            }\n\n            setSelectedIds([]);\n            setHiddenDeleteBtn(true);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var renderDeleteDialog = function renderDeleteDialog() {\n    return __jsx(ConfirmDialog, {\n      ref: confirmRef,\n      onSubmit: onDelete,\n      title: t('deleteItem'),\n      content: t('message.deleteConfirm'),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return __jsx(Layout, {\n    title: t(\"pages:userGroups.index.title\"),\n    description: t(\"pages:userGroups.index.description\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, __jsx(Button, {\n    hidden: !createPer,\n    onClick: function onClick() {\n      return redirect(\"frontend.admin.userGroups.create\");\n    },\n    type: \"primary\",\n    className: \"btn-top\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, __jsx(PlusCircleOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), t('create')), __jsx(Button, {\n    danger: true,\n    onClick: function onClick() {\n      if (confirmRef.current) confirmRef.current.show();\n    },\n    className: \"btn-top\",\n    hidden: hiddenDeleteBtn || !deletePer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, __jsx(DeleteOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }), t('delete')), __jsx(GridTable, {\n    ref: tableRef,\n    columns: columns,\n    data: userGroups,\n    rowSelection: {\n      selectedRowKeys: selectedIds,\n      onChange: function onChange(data) {\n        return onChangeSelection(data);\n      }\n    },\n    fetchData: fetchData,\n    total: total,\n    scroll: {\n      x: 600,\n      scrollToFirstRowOnChange: true\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }), renderDeleteDialog()));\n};\n\nIndex.getInitialProps = function _callee(ctx) {\n  var userGroupService, defaultOptions, query, filters, _await$to5, _await$to6, error, userGroups;\n\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          userGroupService = new UserGroupService(ctx);\n          defaultOptions = {\n            filters: [],\n            sorting: []\n          };\n          query = ctx.query;\n          filters = GridTableHelper.getOptions(query, defaultOptions);\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(to(userGroupService.index(filters)));\n\n        case 6:\n          _await$to5 = _context3.sent;\n          _await$to6 = _slicedToArray(_await$to5, 2);\n          error = _await$to6[0];\n          userGroups = _await$to6[1];\n          return _context3.abrupt(\"return\", {\n            namespacesRequired: ['common', 'pages', 'menu'],\n            error: error,\n            userGroups: useBaseHook.getData(userGroups, \"data\", []),\n            total: useBaseHook.getData(userGroups, \"total\", 0),\n            defaultQuery: {\n              filters: GridTableHelper.makeQuery(filters)\n            }\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nIndex.permissions = {\n  \"admin.userGroups\": \"R\"\n};\nexport default Index;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/userGroups/index.tsx"],"names":["Layout","GridTable","GridTableHelper","ConfirmDialog","Button","Typography","UserGroupService","to","React","useState","useBaseHook","PlusCircleOutlined","DeleteOutlined","usePermissionHook","Title","Text","Index","userGroups","total","t","notify","redirect","setStore","getAuth","getStore","hiddenDeleteBtn","setHiddenDeleteBtn","selectedIds","setSelectedIds","userGroupService","confirmRef","createRef","tableRef","checkPermission","createPer","deletePer","updatePer","columns","title","dataIndex","key","render","text","record","id","name","onChangeSelection","data","length","fetchData","values","index","error","code","message","onDelete","ids","result","current","reload","renderDeleteDialog","show","selectedRowKeys","onChange","x","scrollToFirstRowOnChange","getInitialProps","ctx","defaultOptions","filters","sorting","query","getOptions","namespacesRequired","getData","defaultQuery","makeQuery","permissions"],"mappings":"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","sourcesContent":["import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button, Typography, Row, Col } from 'antd';\r\nimport UserGroupService from 'themes/services/api/UserGroupService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { UsergroupAddOutlined } from '@ant-design/icons';\r\nimport BreadCrumb from 'themes/components/Breadcumb'\r\nimport { PlusCircleOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nconst { Title, Text } = Typography;\r\n\r\nconst Index = ({ userGroups, total }: { userGroups: UserGroup[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const userGroupService = new UserGroupService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"admin.userGroups\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"admin.userGroups\": \"D\"\r\n  })\r\n  const updatePer = checkPermission({\r\n    \"admin.userGroups\": \"U\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t('name'),\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.userGroups.edit', { id: record.id })}>{record.name}</a>\r\n    },\r\n    {\r\n      title: t(\"description\"),\r\n      dataIndex: 'description',\r\n      key: 'description',\r\n    },\r\n    // {\r\n    //   title: t(\"userGroups.decentralization\"),\r\n    //   dataIndex: 'decentralization',\r\n    //   key: \"decentralization\",\r\n    //   render: (text: string, record: any) => {\r\n    //     if (createPer || updatePer) {\r\n    //       return (\r\n    //       <Button onClick={() => redirect(\"frontend.admin.userGroups.role\", { id: record.id })} type=\"primary\" className='btn-top'>\r\n    //         <PlusCircleOutlined />\r\n    //         {t('userGroups.add')}\r\n    //       </Button>\r\n    //       )\r\n    //     } else return \"\"\r\n    //   }   \r\n    // }\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, userGroups]: any[] = await to(userGroupService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return userGroups\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(userGroupService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout title={t(\"pages:userGroups.index.title\")} description={t(\"pages:userGroups.index.description\")}>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.userGroups.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={userGroups}\r\n        rowSelection={{ selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n        scroll={{\r\n          x: 600,\r\n          scrollToFirstRowOnChange: true\r\n        }}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let userGroupService = new UserGroupService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, userGroups]: any[] = await to(userGroupService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu'],\r\n    error: error,\r\n    userGroups: useBaseHook.getData(userGroups, \"data\", []),\r\n    total: useBaseHook.getData(userGroups, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.userGroups\": \"R\"\r\n}\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}