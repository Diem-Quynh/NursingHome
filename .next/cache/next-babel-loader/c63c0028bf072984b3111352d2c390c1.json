{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Input, Select, DatePicker, InputNumber } from 'antd';\nimport HealthService from 'themes/services/api/HealthStatusService';\nimport PatientService from 'themes/services/api/PatientService';\nimport UserService from 'themes/services/api/UserService';\nimport _ from 'lodash';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { DeleteFilled, SaveFilled, LeftCircleFilled } from '@ant-design/icons';\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\nimport moment from 'moment';\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 18\n    }\n  }\n};\n\nconst Edit = ({\n  patients,\n  users,\n  health,\n  healthError\n}) => {\n  const {\n    t,\n    notify,\n    redirect,\n    setStore,\n    getAuth,\n    getStore\n  } = useBaseHook();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const [form] = Form.useForm();\n  const healthService = new HealthService();\n  const confirmRef = React.createRef();\n  const {\n    checkPermission\n  } = usePermissionHook();\n  const deletePer = checkPermission({\n    \"admin.healthStatuses\": \"D\"\n  });\n\n  const DisplayError = err => {\n    return notify(t(`errors:${err.code}`), t(err.message), 'error');\n  };\n\n  const bloodPressure = param => {\n    let blood = {\n      bloodPressureUpper: '',\n      bloodPressureLower: ''\n    };\n\n    if (param) {\n      const index = health.bloodPressure.indexOf('/');\n      const bloodPressureUpper = health.bloodPressure.slice(0, index);\n      const bloodPressureLower = health.bloodPressure.slice(index + 1);\n      blood = {\n        bloodPressureUpper: bloodPressureUpper,\n        bloodPressureLower: bloodPressureLower\n      };\n    }\n\n    return blood;\n  };\n\n  const blood = bloodPressure(health.bloodPressure); //submit form\n\n  const onFinish = async values => {\n    if (healthError) return DisplayError(healthError);\n    setLoading(true);\n\n    let {\n      bloodPressureUpper,\n      bloodPressureLower\n    } = values,\n        otherValues = _objectWithoutProperties(values, [\"bloodPressureUpper\", \"bloodPressureLower\"]);\n\n    let bloodPressure = bloodPressureUpper.toString() + \"/\" + bloodPressureLower.toString();\n    const params = Object.assign(otherValues, {\n      bloodPressure: bloodPressure\n    });\n    let [error, result] = await to(healthService.edit({\n      id: health.id,\n      params\n    }));\n    setLoading(false);\n    if (error) return DisplayError(error);\n    notify(t(\"message.recordUpdated\"));\n    redirect(\"frontend.admin.healthStatuses.index\");\n  };\n\n  const onDelete = async () => {\n    if (healthError) return DisplayError(healthError);\n    let [error, result] = await to(healthService.delete({\n      ids: [health.id]\n    }));\n    if (error) return DisplayError(error);\n    notify(t('message.recordDeleted'));\n    redirect(\"frontend.admin.healthStatuses.index\");\n  }; //render option\n\n\n  const renderOptionPatient = () => {\n    let result = [];\n    patients.map(item => {\n      result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id\n      }, item.code, \" - \", item.fullname, \" - \", item.roomCode, \" - \", item.bedCode));\n    });\n    return result;\n  };\n\n  const renderOptionUser = () => {\n    let result = [];\n    users.map(item => {\n      result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id\n      }, item.code, \" - \", item.fullname));\n    });\n    return result;\n  };\n\n  const renderDeleteDialog = () => {\n    return __jsx(ConfirmDialog, {\n      ref: confirmRef,\n      onSubmit: onDelete,\n      title: t('deleteItem'),\n      content: t('message.deleteConfirm')\n    });\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    name: \"createPatient\",\n    initialValues: {\n      patientId: health.patientId,\n      date: health.date ? moment(health.date).subtract(7, 'h') : \"\",\n      weight: health.weight,\n      bloodPressureUpper: blood.bloodPressureUpper,\n      bloodPressureLower: blood.bloodPressureLower,\n      bloodSugar: health.bloodSugar,\n      heartRate: health.heartRate,\n      doctorId: health.doctorId,\n      note: health.note\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true\n  }), __jsx(Form.Item, {\n    label: t(\"patient\"),\n    name: \"patientId\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: t('placeholder.patient'),\n    filterOption: (input, option) => {\n      return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    }\n  }, renderOptionPatient())), __jsx(Form.Item, {\n    label: t(\"healthStatuses.date\"),\n    name: \"date\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    placeholder: t('placeholder.date')\n  })), __jsx(Form.Item, {\n    label: t(\"healthStatuses.weight\") + ' (Kg)',\n    name: \"weight\"\n  }, __jsx(InputNumber, {\n    min: 0,\n    max: 300,\n    step: 0.1,\n    style: {\n      width: '100%'\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"healthStatuses.bloodPressure\") + \" (mmHg)\"\n  }, __jsx(Form.Item, {\n    name: \"bloodPressureUpper\",\n    style: {\n      display: 'inline-block',\n      width: 'calc(20% - 8px)'\n    }\n  }, __jsx(InputNumber, null)), __jsx(\"span\", {\n    style: {\n      padding: \"0 50px\",\n      fontSize: \"25px\"\n    }\n  }, \"/\"), __jsx(Form.Item, {\n    name: \"bloodPressureLower\",\n    style: {\n      display: 'inline-block',\n      width: 'calc(20% - 8px)'\n    }\n  }, __jsx(InputNumber, null))), __jsx(Form.Item, {\n    label: t(\"healthStatuses.bloodSugar\") + \" (mg/dL)\",\n    name: \"bloodSugar\"\n  }, __jsx(InputNumber, null)), __jsx(Form.Item, {\n    label: t(\"healthStatuses.heartRate\") + \" (BPM)\",\n    name: \"heartRate\"\n  }, __jsx(InputNumber, null)), __jsx(Form.Item, {\n    label: t(\"doctor\"),\n    name: \"doctorId\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: t('placeholder.user'),\n    filterOption: (input, option) => {\n      return option.children[2].toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    }\n  }, renderOptionUser())), __jsx(Form.Item, {\n    label: t(\"note\"),\n    name: \"note\"\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    }\n  }, __jsx(Button, {\n    onClick: () => redirect(\"frontend.admin.healthStatuses.index\"),\n    style: {\n      marginRight: 8\n    }\n  }, __jsx(LeftCircleFilled, null), \" \", t('cancel')), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    style: {\n      marginRight: 8\n    }\n  }, __jsx(SaveFilled, null), \" \", t('submit')), __jsx(Button, {\n    hidden: !deletePer,\n    danger: true,\n    onClick: () => {\n      if (confirmRef.current) confirmRef.current.show(health.id);\n    }\n  }, __jsx(DeleteFilled, null), \" \", t('deleteItem')))), renderDeleteDialog()));\n};\n\nEdit.getInitialProps = async ctx => {\n  const healthService = new HealthService(ctx);\n  const patientService = new PatientService(ctx);\n  const userService = new UserService(ctx);\n  const query = ctx.query;\n  let error;\n\n  if (!query.id) {\n    //error missing id\n    error = {\n      code: 9996,\n      message: 'missing ID'\n    };\n  }\n\n  let [healthError, health] = await to(healthService.detail({\n    id: query.id\n  }));\n  if (healthError) health = {};\n  const [errorPatient, patients] = await to(patientService.index({\n    pageSize: -1\n  }));\n  const filters = JSON.stringify({\n    field: \"position\",\n    operator: \"contains\",\n    value: \"Bác sỹ\"\n  });\n  const [errorUsers, users] = await to(userService.index({\n    pageSize: -1,\n    filters: [filters]\n  }));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    error: error,\n    health: health,\n    healthError: healthError,\n    patients: _.get(patients, \"data\", []),\n    users: _.get(users, \"data\", [])\n  };\n};\n\nEdit.permissions = {\n  \"admin.healthStatuses\": \"U\"\n};\nexport default Edit;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/healthStatuses/edit.tsx"],"names":["ConfirmDialog","React","useState","Layout","Button","Form","Input","Select","DatePicker","InputNumber","HealthService","PatientService","UserService","_","to","useBaseHook","DeleteFilled","SaveFilled","LeftCircleFilled","usePermissionHook","moment","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","Edit","patients","users","health","healthError","t","notify","redirect","setStore","getAuth","getStore","loading","setLoading","form","useForm","healthService","confirmRef","createRef","checkPermission","deletePer","DisplayError","err","code","message","bloodPressure","param","blood","bloodPressureUpper","bloodPressureLower","index","indexOf","slice","onFinish","values","otherValues","toString","params","Object","assign","error","result","edit","id","onDelete","delete","ids","renderOptionPatient","map","item","push","fullname","roomCode","bedCode","renderOptionUser","renderDeleteDialog","patientId","date","subtract","weight","bloodSugar","heartRate","doctorId","note","required","input","option","children","toLowerCase","width","display","padding","fontSize","textAlign","marginRight","current","show","getInitialProps","ctx","patientService","userService","query","detail","errorPatient","pageSize","filters","JSON","stringify","field","operator","value","errorUsers","namespacesRequired","get","permissions"],"mappings":"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","sourcesContent":["import ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\n\r\nimport React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Form, Input, Select, DatePicker, InputNumber } from 'antd';\r\nimport HealthService from 'themes/services/api/HealthStatusService';\r\nimport PatientService from 'themes/services/api/PatientService';\r\nimport UserService from 'themes/services/api/UserService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { DeleteFilled, SaveFilled, LeftCircleFilled, CopyFilled } from '@ant-design/icons';\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport moment from 'moment'\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 18 },\r\n  },\r\n};\r\n\r\nconst Edit = ({ patients, users, health, healthError }: { patients: Patient[], users : User[], health: HealthStatus, healthError: any }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const healthService = new HealthService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n\r\n  const { checkPermission } = usePermissionHook();\r\n  const deletePer = checkPermission({\r\n    \"admin.healthStatuses\": \"D\"\r\n  })\r\n  const DisplayError = (err: any) => {\r\n    return notify(t(`errors:${err.code}`), t(err.message), 'error')\r\n  }\r\n\r\n  const bloodPressure = (param: string) => {\r\n    let blood = {bloodPressureUpper: '', bloodPressureLower: ''}\r\n    if(param) {\r\n      const index = health.bloodPressure.indexOf('/')\r\n      const bloodPressureUpper = health.bloodPressure.slice(0,index)\r\n      const bloodPressureLower = health.bloodPressure.slice(index + 1)\r\n      blood = {bloodPressureUpper: bloodPressureUpper, bloodPressureLower: bloodPressureLower}\r\n    }\r\n    return blood\r\n  }\r\n  const blood = bloodPressure(health.bloodPressure)\r\n\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    if(healthError) return DisplayError(healthError)\r\n    setLoading(true)\r\n    let { bloodPressureUpper, bloodPressureLower, ...otherValues } = values;\r\n    let bloodPressure = bloodPressureUpper.toString() + \"/\" + bloodPressureLower.toString()\r\n    const params = Object.assign(otherValues,{bloodPressure: bloodPressure})\r\n    let [error, result]: any[] = await to(healthService.edit({\r\n      id: health.id,\r\n      params\r\n    }));\r\n    setLoading(false)\r\n    if(error) return DisplayError(error)\r\n    notify(t(\"message.recordUpdated\"))\r\n    redirect(\"frontend.admin.healthStatuses.index\")\r\n  }\r\n\r\n  const onDelete = async (): Promise<void> => {\r\n    if(healthError) return DisplayError(healthError)\r\n    let [error, result]: any[] = await to(healthService.delete({ ids: [health.id] }));\r\n    if(error) return DisplayError(error)\r\n    notify(t('message.recordDeleted'))\r\n    redirect(\"frontend.admin.healthStatuses.index\")\r\n  }\r\n\r\n  //render option\r\n  const renderOptionPatient = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    patients.map(item => {\r\n      result.push(\r\n      <Option value={item.id} key={item.id}>{item.code} - {item.fullname} - {item.roomCode} - {item.bedCode}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n\r\n  const renderOptionUser = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    users.map(item => {\r\n      result.push(\r\n      <Option value={item.id} key={item.id}>{item.code} - {item.fullname}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"createPatient\"\r\n        initialValues={{\r\n          patientId: health.patientId,\r\n          date: health.date ? moment(health.date).subtract(7,'h') : \"\",\r\n          weight: health.weight,\r\n          bloodPressureUpper: blood.bloodPressureUpper,\r\n          bloodPressureLower: blood.bloodPressureLower,\r\n          bloodSugar: health.bloodSugar,\r\n          heartRate: health.heartRate,\r\n          doctorId: health.doctorId,\r\n          note: health.note\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"patient\")}\r\n          name=\"patientId\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select \r\n            showSearch\r\n            placeholder = {t('placeholder.patient')}\r\n            filterOption={ (input: any, option: any) => {\r\n              return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            } }\r\n          >\r\n            {renderOptionPatient()}\r\n          </Select>\r\n        </Form.Item>\r\n        \r\n        <Form.Item\r\n          label={t(\"healthStatuses.date\")}\r\n          name=\"date\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} showTime={false} placeholder={t('placeholder.date')} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"healthStatuses.weight\") + ' (Kg)'}\r\n          name=\"weight\"\r\n        >\r\n          <InputNumber min={0} max={300} step={0.1}  style={{ width:'100%' }} />\r\n        </Form.Item>\r\n\r\n        {/* <Form.Item\r\n          label={t(\"healthStatuses.bloodPressure\") + \" (mmHg)\"}\r\n          name=\"bloodPressure\"\r\n        >\r\n          <Input />\r\n        </Form.Item> */}\r\n\r\n        <Form.Item label={t(\"healthStatuses.bloodPressure\") + \" (mmHg)\"}>\r\n          <Form.Item\r\n            name=\"bloodPressureUpper\"\r\n            style={{ display: 'inline-block', width: 'calc(20% - 8px)' }}\r\n          >\r\n            <InputNumber />\r\n          </Form.Item>\r\n\r\n          <span style={{ padding:\"0 50px\", fontSize:\"25px\"  }}>/</span>\r\n\r\n          <Form.Item\r\n            name=\"bloodPressureLower\"\r\n            style={{ display: 'inline-block', width: 'calc(20% - 8px)' }}\r\n          >\r\n            <InputNumber />\r\n          </Form.Item>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"healthStatuses.bloodSugar\") + \" (mg/dL)\"}\r\n          name=\"bloodSugar\"\r\n        >\r\n          <InputNumber />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"healthStatuses.heartRate\") + \" (BPM)\"}\r\n          name=\"heartRate\"\r\n        >\r\n          <InputNumber />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"doctor\")}\r\n          name=\"doctorId\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select\r\n            showSearch\r\n            placeholder = {t('placeholder.user')}\r\n            filterOption={ (input: any, option: any) => {\r\n              return option.children[2].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            } }\r\n          >\r\n            {renderOptionUser()}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"note\")}\r\n          name=\"note\"\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: \"center\" }}>\r\n          <Button onClick={() => redirect(\"frontend.admin.healthStatuses.index\")} style={{ marginRight: 8 }}>\r\n            <LeftCircleFilled /> {t('cancel')}\r\n          </Button>\r\n\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading} style={{ marginRight: 8 }}>\r\n            <SaveFilled /> {t('submit')}\r\n          </Button>\r\n          \r\n          <Button hidden={!deletePer} danger onClick={() => { \r\n              if (confirmRef.current) confirmRef.current.show(health.id) \r\n            }}>\r\n            <DeleteFilled /> {t('deleteItem')}\r\n          </Button>\r\n         \r\n        </Form.Item>\r\n      </Form>\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nEdit.getInitialProps = async (ctx: any) => {\r\n  const healthService = new HealthService(ctx)\r\n  const patientService = new PatientService(ctx)\r\n  const userService = new UserService(ctx)\r\n  const query = ctx.query;\r\n  let error: any;\r\n\r\n  if (!query.id) {\r\n    //error missing id\r\n    error = {\r\n      code: 9996,\r\n      message: 'missing ID'\r\n    }\r\n  }\r\n\r\n  let [healthError, health] = await to(healthService.detail({ id: query.id }));\r\n  if(healthError) health = {}\r\n  const [errorPatient, patients] = await to(patientService.index({ pageSize: -1 }));\r\n  const filters = JSON.stringify({field:\"position\",operator:\"contains\",value:\"Bác sỹ\"})\r\n  const [errorUsers, users] = await to(userService.index({ pageSize: -1, filters: [filters] }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    error: error,\r\n    health: health,\r\n    healthError: healthError,\r\n    patients: _.get(patients, \"data\", []),\r\n    users: _.get(users, \"data\", [])\r\n  }\r\n}\r\nEdit.permissions = {\r\n  \"admin.healthStatuses\": \"U\"\r\n};\r\nexport default Edit"]},"metadata":{},"sourceType":"module"}