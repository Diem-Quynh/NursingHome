{"ast":null,"code":"import axios from 'axios';\nimport cookies from 'themes/modules/Cookies';\nimport _ from 'lodash';\n\nconst getConfig = require('next/config').default;\n\nconst {\n  publicRuntimeConfig\n} = getConfig();\nimport RequestException from './RequestException';\nexport default class Request {\n  constructor(cookiesString) {\n    this.handleGlobalCallback = undefined;\n    this.handleGlobalErrorCallback = undefined;\n    this.cookies = cookiesString;\n    const token = cookies(cookiesString).get('token');\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    axios.interceptors.response.use(this.handleGlobal.bind(this), this.handleGlobalError.bind(this));\n  }\n\n  handleGlobal(response) {\n    if (this.handleGlobalCallback) {\n      response = this.handleGlobalCallback(response);\n    }\n\n    return response;\n  }\n\n  handleGlobalError(error) {\n    if (this.handleGlobalErrorCallback) {\n      error = this.handleGlobalErrorCallback(error);\n    }\n\n    return error;\n  }\n\n  getAppUrl() {\n    //return window.location.origin + \"/\"\n    return publicRuntimeConfig.API_HOST;\n  }\n\n  beforeRequest({\n    url,\n    data\n  }) {}\n\n  afterRequest(result) {\n    if (!result) throw new RequestException(-1, \"Unable connect to server!\");\n\n    const code = _.get(result, \"data.code\", -1);\n\n    const message = _.get(result, \"data.message\", \"\");\n\n    const data = _.get(result, \"data.data\");\n\n    if (code != 200) {\n      throw new RequestException(code, message, data);\n    }\n\n    return data;\n  }\n\n  async get(url, data = {}) {\n    this.beforeRequest({\n      url,\n      data\n    });\n    let result = await axios.get(this.getAppUrl() + url, {\n      params: data\n    });\n    return this.afterRequest(result);\n  }\n\n  async post(url, data) {\n    this.beforeRequest({\n      url,\n      data\n    });\n    let result = await axios.post(this.getAppUrl() + url, data);\n    return this.afterRequest(result);\n  }\n\n  async put(url, data) {\n    this.beforeRequest({\n      url,\n      data\n    });\n    let result = await axios.put(this.getAppUrl() + url, data);\n    return this.afterRequest(result);\n  }\n\n  async delete(url, data) {\n    this.beforeRequest({\n      url,\n      data\n    });\n    let result = await axios.delete(this.getAppUrl() + url, {\n      params: data\n    });\n    return this.afterRequest(result);\n  }\n\n}","map":{"version":3,"sources":["E:/nursinghome_github/themes/modules/Request.js"],"names":["axios","cookies","_","getConfig","require","default","publicRuntimeConfig","RequestException","Request","constructor","cookiesString","handleGlobalCallback","undefined","handleGlobalErrorCallback","token","get","defaults","headers","common","interceptors","response","use","handleGlobal","bind","handleGlobalError","error","getAppUrl","API_HOST","beforeRequest","url","data","afterRequest","result","code","message","params","post","put","delete"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport cookies from 'themes/modules/Cookies';\r\nimport _ from 'lodash'\r\nconst getConfig = require('next/config').default\r\nconst { publicRuntimeConfig } = getConfig();\r\nimport RequestException from './RequestException'\r\n\r\nexport default class Request {\r\n  constructor(cookiesString) {\r\n    this.handleGlobalCallback = undefined;\r\n    this.handleGlobalErrorCallback = undefined;\r\n    this.cookies = cookiesString\r\n    const token = cookies(cookiesString).get('token')\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    axios.interceptors.response.use(this.handleGlobal.bind(this), this.handleGlobalError.bind(this));\r\n  }\r\n\r\n  handleGlobal(response) {\r\n    if (this.handleGlobalCallback) {\r\n      response = this.handleGlobalCallback(response)\r\n    }\r\n    return response\r\n  }\r\n\r\n  handleGlobalError(error) {\r\n    if (this.handleGlobalErrorCallback) {\r\n      error = this.handleGlobalErrorCallback(error)\r\n    }\r\n    return error\r\n  }\r\n\r\n  getAppUrl() {\r\n    //return window.location.origin + \"/\"\r\n    return publicRuntimeConfig.API_HOST\r\n  }\r\n  beforeRequest({ url, data }) {\r\n\r\n  }\r\n  afterRequest(result) {\r\n    if (!result) throw new RequestException(-1, \"Unable connect to server!\")\r\n    const code = _.get(result, \"data.code\", -1)\r\n    const message = _.get(result, \"data.message\", \"\")\r\n    const data = _.get(result, \"data.data\")\r\n    if (code != 200) {\r\n      throw new RequestException(code, message, data)\r\n    }\r\n    return data\r\n  }\r\n\r\n  async get(url, data = {}) {\r\n    this.beforeRequest({ url, data })\r\n    let result = await axios.get(this.getAppUrl() + url, { params: data });\r\n    return this.afterRequest(result)\r\n  }\r\n  async post(url, data) {\r\n    this.beforeRequest({ url, data })\r\n    let result = await axios.post(this.getAppUrl() + url, data);\r\n    return this.afterRequest(result)\r\n  }\r\n  async put(url, data) {\r\n    this.beforeRequest({ url, data })\r\n    let result = await axios.put(this.getAppUrl() + url, data);\r\n    return this.afterRequest(result)\r\n  }\r\n  async delete(url, data) {\r\n    this.beforeRequest({ url, data })\r\n    let result = await axios.delete(this.getAppUrl() + url, { params: data });\r\n    return this.afterRequest(result)\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}