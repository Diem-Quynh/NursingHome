{"ast":null,"code":"var _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\nurseAssignments\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport Layout from 'themes/layouts/Admin';\nimport { GridTable, GridTableHelper } from 'themes/components/Table';\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\nimport { Button } from 'antd';\nimport NurseAssignService from 'themes/services/api/NurseAssignmentService';\nimport to from 'await-to-js';\nimport React, { useState } from 'react';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\nimport { PlusCircleOutlined, DeleteOutlined } from '@ant-design/icons';\n\nconst formaterDate = value => {\n  value = value ? String(value) : \"\";\n  value = value.substr(0, 10);\n  return `${value}`;\n};\n\nconst Index = ({\n  nurseAssigns,\n  total\n}) => {\n  const {\n    t,\n    notify,\n    redirect,\n    setStore,\n    getAuth,\n    getStore\n  } = useBaseHook();\n  const {\n    0: hiddenDeleteBtn,\n    1: setHiddenDeleteBtn\n  } = useState(true);\n  const {\n    0: selectedIds,\n    1: setSelectedIds\n  } = useState([]);\n  const nurseAssignService = new NurseAssignService();\n  const confirmRef = React.createRef();\n  const tableRef = React.createRef();\n  const {\n    checkPermission\n  } = usePermissionHook();\n  const createPer = checkPermission({\n    \"admin.nurseAssignments\": \"C\"\n  });\n  const deletePer = checkPermission({\n    \"admin.nurseAssignment\": \"D\"\n  });\n  const columns = [{\n    title: t(\"nurse\"),\n    dataIndex: 'nurseName',\n    key: 'users.fullname',\n    sorter: true,\n    filterable: true,\n    render: (text, record) => __jsx(\"a\", {\n      onClick: () => redirect('frontend.admin.nurseAssignments.edit', {\n        id: record.id\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, record.nurseCode, \" - \", record.nurseName)\n  }, {\n    title: t('patient'),\n    dataIndex: 'patientName',\n    key: 'patients.fullname',\n    sorter: true,\n    filterable: true,\n    render: (text, record) => __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 46\n      }\n    }, record.patientName, \" - \", record.roomCode, \" - \", record.bedCode)\n  }, {\n    title: t(\"nurseAssignments.dateBegin\"),\n    dataIndex: 'dateBegin',\n    key: 'dateBegin',\n    sorter: true,\n    filterDate: true,\n    width: '15%',\n    render: (text, record) => __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 46\n      }\n    }, formaterDate(text))\n  }, {\n    title: t(\"nurseAssignments.dateEnd\"),\n    dataIndex: 'dateEnd',\n    key: 'dateEnd',\n    sorter: true,\n    filterDate: true,\n    width: '15%',\n    render: (text, record) => __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 46\n      }\n    }, formaterDate(text))\n  }, {\n    title: t(\"note\"),\n    dataIndex: 'note',\n    key: 'note'\n  }];\n\n  const onChangeSelection = data => {\n    if (data.length > 0) {\n      setHiddenDeleteBtn(false);\n    } else {\n      setHiddenDeleteBtn(true);\n    }\n\n    setSelectedIds(data);\n  };\n\n  const fetchData = async values => {\n    let [error, nurseAssigns] = await to(nurseAssignService.index(values));\n\n    if (error) {\n      const {\n        code,\n        message\n      } = error;\n      notify(t(`errors:${code}`), t(message), 'error');\n      return {};\n    }\n\n    return nurseAssigns;\n  };\n\n  const onDelete = async () => {\n    let [error, result] = await to(nurseAssignService.delete({\n      ids: selectedIds\n    }));\n\n    if (error) {\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error');\n    }\n\n    notify(t(\"message.recordDeleted\"));\n\n    if (tableRef.current !== null) {\n      tableRef.current.reload();\n    }\n\n    setSelectedIds([]);\n    setHiddenDeleteBtn(true);\n  };\n\n  const renderDeleteDialog = () => {\n    return __jsx(ConfirmDialog, {\n      ref: confirmRef,\n      onSubmit: onDelete,\n      title: t('deleteItem'),\n      content: t('message.deleteConfirm'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, __jsx(Button, {\n    hidden: !createPer,\n    onClick: () => redirect(\"frontend.admin.nurseAssignments.create\"),\n    type: \"primary\",\n    className: \"btn-top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, __jsx(PlusCircleOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }), t('create')), __jsx(Button, {\n    danger: true,\n    onClick: () => {\n      if (confirmRef.current) confirmRef.current.show();\n    },\n    className: \"btn-top\",\n    hidden: hiddenDeleteBtn || !deletePer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, __jsx(DeleteOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }), t('delete')), __jsx(GridTable, {\n    ref: tableRef,\n    columns: columns,\n    data: nurseAssigns,\n    rowSelection: {\n      selectedRowKeys: selectedIds,\n      onChange: data => onChangeSelection(data)\n    },\n    fetchData: fetchData,\n    total: total,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }), renderDeleteDialog()));\n};\n\nIndex.getInitialProps = async ctx => {\n  let nurseAssignService = new NurseAssignService(ctx);\n  let defaultOptions = {\n    filters: [],\n    sorting: []\n  };\n  let query = ctx.query;\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\n  let [error, nurseAssigns] = await to(nurseAssignService.index(filters));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    error: error,\n    nurseAssigns: useBaseHook.getData(nurseAssigns, \"data\", []),\n    total: useBaseHook.getData(nurseAssigns, \"total\", 0),\n    defaultQuery: {\n      filters: GridTableHelper.makeQuery(filters)\n    }\n  };\n};\n\nIndex.permissions = {\n  \"admin.nurseAssignments\": \"R\",\n  \"nurse.nurseAssignments\": \"R\",\n  \"admin.users.nurseAssignments\": \"R\"\n};\nexport default Index;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/nurseAssignments/index.tsx"],"names":["Layout","GridTable","GridTableHelper","ConfirmDialog","Button","NurseAssignService","to","React","useState","useBaseHook","usePermissionHook","PlusCircleOutlined","DeleteOutlined","formaterDate","value","String","substr","Index","nurseAssigns","total","t","notify","redirect","setStore","getAuth","getStore","hiddenDeleteBtn","setHiddenDeleteBtn","selectedIds","setSelectedIds","nurseAssignService","confirmRef","createRef","tableRef","checkPermission","createPer","deletePer","columns","title","dataIndex","key","sorter","filterable","render","text","record","id","nurseCode","nurseName","patientName","roomCode","bedCode","filterDate","width","onChangeSelection","data","length","fetchData","values","error","index","code","message","onDelete","result","delete","ids","current","reload","renderDeleteDialog","show","selectedRowKeys","onChange","getInitialProps","ctx","defaultOptions","filters","sorting","query","getOptions","namespacesRequired","getData","defaultQuery","makeQuery","permissions"],"mappings":"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","sourcesContent":["import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper, FilterInput } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button } from 'antd';\r\nimport NurseAssignService from 'themes/services/api/NurseAssignmentService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport {PlusCircleOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\nconst formaterDate = (value: any) => {\r\n  value = value? String(value) : \"\"\r\n  value = value.substr(0,10)\r\n  return `${value}`\r\n}\r\n\r\nconst Index = ({ nurseAssigns, total }: { nurseAssigns: NurseAssignment[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const nurseAssignService = new NurseAssignService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"admin.nurseAssignments\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"admin.nurseAssignment\": \"D\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t(\"nurse\"),\r\n      dataIndex: 'nurseName',\r\n      key: 'users.fullname',\r\n      sorter:true,\r\n      filterable: true,\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.nurseAssignments.edit', \r\n        { id: record.id })}>{record.nurseCode} - {record.nurseName}</a>\r\n    },\r\n    {\r\n      title: t('patient'),\r\n      dataIndex: 'patientName',\r\n      key: 'patients.fullname',\r\n      sorter:true,\r\n      filterable: true,\r\n      render: (text: string, record: any) => <div>{record.patientName} - {record.roomCode} - {record.bedCode}</div>\r\n    },\r\n    {\r\n      title: t(\"nurseAssignments.dateBegin\"),\r\n      dataIndex: 'dateBegin',\r\n      key: 'dateBegin',\r\n      sorter:true,\r\n      filterDate: true,\r\n      width: '15%',\r\n      render: (text: string, record: any) => <div>{formaterDate(text)}</div>\r\n    },\r\n    {\r\n      title: t(\"nurseAssignments.dateEnd\"),\r\n      dataIndex: 'dateEnd',\r\n      key: 'dateEnd',\r\n      sorter:true,\r\n      filterDate: true,\r\n      width: '15%',\r\n      render: (text: string, record: any) => <div>{formaterDate(text)}</div>\r\n    },\r\n    {\r\n      title: t(\"note\"),\r\n      dataIndex: 'note',\r\n      key: 'note',\r\n    },\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, nurseAssigns]: any[] = await to(nurseAssignService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return nurseAssigns\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(nurseAssignService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.nurseAssignments.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      \r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={nurseAssigns}\r\n        rowSelection={{selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let nurseAssignService = new NurseAssignService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, nurseAssigns]: any[] = await to(nurseAssignService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\r\n    error: error,\r\n    nurseAssigns: useBaseHook.getData(nurseAssigns, \"data\", []),\r\n    total: useBaseHook.getData(nurseAssigns, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.nurseAssignments\": \"R\",\r\n  \"nurse.nurseAssignments\": \"R\",\r\n  \"admin.users.nurseAssignments\": \"R\"\r\n};\r\nexport default Index"]},"metadata":{},"sourceType":"module"}