{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\statistics\\\\healthStatus.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Select, DatePicker } from 'antd';\nimport HealthService from 'themes/services/api/HealthStatusService';\nimport PatientService from 'themes/services/api/PatientService';\nimport _ from 'lodash';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { SaveFilled } from '@ant-design/icons';\nvar Option = Select.Option;\nvar formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 9\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 18\n    }\n  }\n};\n\nvar Edit = function Edit(_ref) {\n  _s();\n\n  var patients = _ref.patients;\n\n  var _useBaseHook = useBaseHook(),\n      t = _useBaseHook.t,\n      notify = _useBaseHook.notify,\n      redirect = _useBaseHook.redirect,\n      setStore = _useBaseHook.setStore,\n      getAuth = _useBaseHook.getAuth,\n      getStore = _useBaseHook.getStore;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var healthService = new HealthService();\n\n  var DisplayError = function DisplayError(err) {\n    return notify(t(\"errors:\".concat(err.code)), t(err.message), 'error');\n  }; //submit form\n\n\n  var onFinish = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var bloodPressureUpper, bloodPressureLower, otherValues, bloodPressure, params, _yield$to, _yield$to2, error, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              bloodPressureUpper = values.bloodPressureUpper, bloodPressureLower = values.bloodPressureLower, otherValues = _objectWithoutProperties(values, [\"bloodPressureUpper\", \"bloodPressureLower\"]);\n              bloodPressure = bloodPressureUpper.toString() + \"/\" + bloodPressureLower.toString();\n              params = Object.assign(otherValues, {\n                bloodPressure: bloodPressure\n              });\n              _context.next = 6;\n              return to(healthService.edit({\n                //   id: health.id,\n                params: params\n              }));\n\n            case 6:\n              _yield$to = _context.sent;\n              _yield$to2 = _slicedToArray(_yield$to, 2);\n              error = _yield$to2[0];\n              result = _yield$to2[1];\n              setLoading(false);\n\n              if (!error) {\n                _context.next = 13;\n                break;\n              }\n\n              return _context.abrupt(\"return\", DisplayError(error));\n\n            case 13:\n              notify(t(\"message.recordUpdated\"));\n              redirect(\"frontend.admin.healthStatuses.index\");\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onFinish(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); //render option\n\n\n  var renderOptionPatient = function renderOptionPatient() {\n    var result = [];\n    patients.map(function (item) {\n      result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }\n      }, item.code, \" - \", item.fullname, \" - \", item.roomCode, \" - \", item.bedCode));\n    });\n    return result;\n  };\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    layout: \"inline\",\n    name: \"statisticHealth\",\n    initialValues: {\n      patientId: undefined,\n      date: \"\"\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), __jsx(Form.Item, {\n    label: t(\"patient\"),\n    name: \"patientId\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: t('placeholder.patient'),\n    filterOption: function filterOption(input, option) {\n      return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, renderOptionPatient())), __jsx(Form.Item, {\n    label: t(\"healthStatuses.date\"),\n    name: \"date\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    placeholder: t('placeholder.date'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    style: {\n      marginRight: 8\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, __jsx(SaveFilled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }), \" \", t('submit'))))));\n};\n\n_s(Edit, \"cpCzyyZI/YlEH83DeOHrkqmh8e0=\", false, function () {\n  return [useBaseHook, Form.useForm];\n});\n\n_c = Edit;\n\nEdit.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ctx) {\n    var patientService, _yield$to3, _yield$to4, errorPatient, patients;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            patientService = new PatientService(ctx);\n            _context2.next = 3;\n            return to(patientService.index({\n              pageSize: -1\n            }));\n\n          case 3:\n            _yield$to3 = _context2.sent;\n            _yield$to4 = _slicedToArray(_yield$to3, 2);\n            errorPatient = _yield$to4[0];\n            patients = _yield$to4[1];\n            return _context2.abrupt(\"return\", {\n              namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n              patients: _.get(patients, \"data\", [])\n            });\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nEdit.permissions = {\n  \"admin.healthStatuses\": \"U\"\n};\nexport default Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/statistics/healthStatus.tsx"],"names":["React","useState","Layout","Button","Form","Select","DatePicker","HealthService","PatientService","_","to","useBaseHook","SaveFilled","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","Edit","patients","t","notify","redirect","setStore","getAuth","getStore","loading","setLoading","useForm","form","healthService","DisplayError","err","code","message","onFinish","values","bloodPressureUpper","bloodPressureLower","otherValues","bloodPressure","toString","params","Object","assign","edit","error","result","renderOptionPatient","map","item","push","id","fullname","roomCode","bedCode","patientId","undefined","date","required","input","option","children","toLowerCase","indexOf","textAlign","marginRight","getInitialProps","ctx","patientService","index","pageSize","errorPatient","namespacesRequired","get","permissions"],"mappings":"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","sourcesContent":["import ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\n\r\nimport React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Form, Input, Select, DatePicker, InputNumber } from 'antd';\r\nimport HealthService from 'themes/services/api/HealthStatusService';\r\nimport PatientService from 'themes/services/api/PatientService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { SaveFilled, LeftCircleFilled } from '@ant-design/icons';\r\nimport moment from 'moment'\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 9 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 18 },\r\n  },\r\n};\r\n\r\nconst Edit = ({ patients }: { patients: Patient[] }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const healthService = new HealthService()\r\n\r\n  const DisplayError = (err: any) => {\r\n    return notify(t(`errors:${err.code}`), t(err.message), 'error')\r\n  }\r\n\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    setLoading(true)\r\n    let { bloodPressureUpper, bloodPressureLower, ...otherValues } = values;\r\n    let bloodPressure = bloodPressureUpper.toString() + \"/\" + bloodPressureLower.toString()\r\n    const params = Object.assign(otherValues,{bloodPressure: bloodPressure})\r\n    let [error, result]: any[] = await to(healthService.edit({\r\n    //   id: health.id,\r\n      params\r\n    }));\r\n    setLoading(false)\r\n    if(error) return DisplayError(error)\r\n    notify(t(\"message.recordUpdated\"))\r\n    redirect(\"frontend.admin.healthStatuses.index\")\r\n  }\r\n\r\n  //render option\r\n  const renderOptionPatient = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    patients.map(item => {\r\n      result.push(\r\n      <Option value={item.id} key={item.id}>{item.code} - {item.fullname} - {item.roomCode} - {item.bedCode}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        layout=\"inline\"\r\n        name=\"statisticHealth\"\r\n        initialValues={{\r\n          patientId: undefined,\r\n          date: \"\",\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"patient\")}\r\n          name=\"patientId\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select \r\n            showSearch\r\n            placeholder = {t('placeholder.patient')}\r\n            filterOption={ (input: any, option: any) => {\r\n              return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            } }\r\n          >\r\n            {renderOptionPatient()}\r\n          </Select>\r\n        </Form.Item>\r\n        \r\n        <Form.Item\r\n          label={t(\"healthStatuses.date\")}\r\n          name=\"date\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} showTime={false} placeholder={t('placeholder.date')} />\r\n        </Form.Item>\r\n\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: \"center\" }}>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading} style={{ marginRight: 8 }}>\r\n            <SaveFilled /> {t('submit')}\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nEdit.getInitialProps = async (ctx: any) => {\r\n  const patientService = new PatientService(ctx)\r\n\r\n  const [errorPatient, patients] = await to(patientService.index({ pageSize: -1 }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    patients: _.get(patients, \"data\", [])\r\n  }\r\n}\r\nEdit.permissions = {\r\n  \"admin.healthStatuses\": \"U\"\r\n};\r\nexport default Edit"]},"metadata":{},"sourceType":"module"}