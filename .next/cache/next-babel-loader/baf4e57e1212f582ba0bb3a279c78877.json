{"ast":null,"code":"var _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\users\\\\create.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Input, Select, InputNumber } from 'antd';\nimport UserService from 'themes/services/api/UserService';\nimport UserGroupService from 'themes/services/api/UserGroupService';\nimport _ from 'lodash';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { DeleteFilled, LeftCircleFilled } from '@ant-design/icons';\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 18\n    }\n  }\n};\n\nconst formatCurrency = value => `${value}`.replace(/[^0-9]+/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\nconst parserCurrency = value => value ? value.replace(/\\$\\s?|(,*)/g, \"\") : \"\";\n\nconst Create = ({\n  groups\n}) => {\n  const {\n    t,\n    notify,\n    redirect,\n    setStore,\n    getAuth,\n    getStore\n  } = useBaseHook();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const [form] = Form.useForm();\n  const userService = new UserService(); //submit form\n\n  const onFinish = async values => {\n    setLoading(true);\n\n    let {\n      rePassword\n    } = values,\n        otherValues = _objectWithoutProperties(values, [\"rePassword\"]);\n\n    let [error, result] = await to(userService.create(otherValues));\n    setLoading(false);\n\n    if (error) {\n      return notify(t(`errors:${error.code}`), t(error.message), 'error');\n    }\n\n    notify(t(\"message.recordCreated\"));\n    redirect(\"frontend.admin.users.index\");\n  }; //validate input password\n\n\n  const validatorPassword = ({\n    getFieldValue\n  }) => ({\n    validator: (rule, value) => {\n      if (!value || getFieldValue('password') === value) {\n        return Promise.resolve();\n      }\n\n      return Promise.reject(t('form.rePassword'));\n    }\n  }); //render option\n\n\n  const renderOption = () => {\n    let result = [];\n    groups.map(item => {\n      result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }, item.name));\n    });\n    return result;\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    name: \"createUser\",\n    initialValues: {\n      code: \"\",\n      fullname: \"\",\n      username: \"\",\n      email: \"\",\n      phone: \"\",\n      password: \"\",\n      rePassword: \"\",\n      groupId: \"\",\n      salary: \"\"\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), __jsx(Form.Item, {\n    label: t(\"code\"),\n    name: \"code\",\n    rules: [{\n      required: true,\n      message: t('form.required'),\n      whitespace: true\n    }, {\n      max: 10,\n      message: t('form.maxLength', {\n        length: 10\n      })\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"fullname\"),\n    name: \"fullname\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"username\"),\n    name: \"username\",\n    rules: [{\n      required: true,\n      message: t('form.required'),\n      whitespace: true\n    }, {\n      max: 15,\n      message: t('form.maxLength', {\n        length: 15\n      })\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"email\"),\n    name: \"email\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }, {\n      type: 'email',\n      message: t('form.email')\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"phone\"),\n    name: \"phone\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"password\"),\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, __jsx(Input.Password, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"rePassword\"),\n    name: \"rePassword\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }, validatorPassword],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, __jsx(Input.Password, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"userGroup\"),\n    name: \"groupId\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, __jsx(Select, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, renderOption())), __jsx(Form.Item, {\n    label: t(\"salary.salary\"),\n    name: \"salary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, __jsx(InputNumber, {\n    style: {\n      width: \"100%\"\n    },\n    formatter: formatCurrency,\n    parser: parserCurrency,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: () => redirect(\"frontend.admin.users.index\"),\n    style: {\n      marginRight: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, __jsx(LeftCircleFilled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }), \" \", t('cancel')), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, __jsx(DeleteFilled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }), \" \", t('submit'))))));\n};\n\nCreate.getInitialProps = async ctx => {\n  const userGroupService = new UserGroupService(ctx);\n  const [error, groups] = await to(userGroupService.index({\n    pageSize: -1\n  }));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu'],\n    error: error,\n    groups: _.get(groups, \"data\", [])\n  };\n};\n\nCreate.permissions = {\n  \"admin.users\": \"C\"\n};\nexport default Create;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/users/create.tsx"],"names":["React","useState","Layout","Button","Form","Input","Select","InputNumber","UserService","UserGroupService","_","to","useBaseHook","DeleteFilled","LeftCircleFilled","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","formatCurrency","value","replace","parserCurrency","Create","groups","t","notify","redirect","setStore","getAuth","getStore","loading","setLoading","form","useForm","userService","onFinish","values","rePassword","otherValues","error","result","create","code","message","validatorPassword","getFieldValue","validator","rule","Promise","resolve","reject","renderOption","map","item","push","id","name","fullname","username","email","phone","password","groupId","salary","required","whitespace","max","length","type","width","textAlign","marginRight","getInitialProps","ctx","userGroupService","index","pageSize","namespacesRequired","get","permissions"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Row, Col, Form, Input, Select, InputNumber } from 'antd';\r\nimport UserService from 'themes/services/api/UserService';\r\nimport UserGroupService from 'themes/services/api/UserGroupService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { DeleteFilled, LeftCircleFilled } from '@ant-design/icons';\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 18 },\r\n  },\r\n};\r\n\r\nconst formatCurrency = (value: any) =>`${value}`.replace(/[^0-9]+/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\nconst parserCurrency = (value: any) =>value ? value.replace(/\\$\\s?|(,*)/g, \"\") : \"\"\r\n\r\nconst Create = ({ groups }: { groups: UserGroup[] }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const userService = new UserService()\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    setLoading(true)\r\n    let { rePassword, ...otherValues } = values;\r\n    let [error, result]: any[] = await to(userService.create(otherValues));\r\n    setLoading(false)\r\n\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(error.message), 'error')\r\n    }\r\n    notify(t(\"message.recordCreated\"))\r\n    redirect(\"frontend.admin.users.index\")\r\n  }\r\n\r\n  //validate input password\r\n  const validatorPassword = ({ getFieldValue }: { getFieldValue: Function }) => ({\r\n    validator: (rule: any, value: any) => {\r\n      if (!value || getFieldValue('password') === value) {\r\n        return Promise.resolve();\r\n      }\r\n      return Promise.reject(t('form.rePassword'));\r\n    }\r\n  })\r\n\r\n  //render option\r\n  const renderOption = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    groups.map(item => {\r\n      result.push(\r\n        <Option value={item.id} key={item.id}>{item.name}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n  \r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"createUser\"\r\n        initialValues={{\r\n          code: \"\",\r\n          fullname: \"\",\r\n          username: \"\",\r\n          email: \"\",\r\n          phone: \"\",\r\n          password: \"\",\r\n          rePassword: \"\",\r\n          groupId: \"\",\r\n          salary: \"\"\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"code\")}\r\n          name=\"code\"\r\n          rules={[\r\n            { required: true, message: t('form.required'), whitespace: true },\r\n            { max: 10, message: t('form.maxLength', { length: 10 }) }\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={t(\"fullname\")}\r\n          name=\"fullname\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={t(\"username\")}\r\n          name=\"username\"\r\n          rules={[\r\n            { required: true, message: t('form.required'), whitespace: true },\r\n            { max: 15, message: t('form.maxLength', { length: 15 }) }\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={t(\"email\")}\r\n          name=\"email\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n            { type: 'email', message: t('form.email') }\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={t(\"phone\")}\r\n          name=\"phone\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={t(\"password\")}\r\n          name=\"password\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={t(\"rePassword\")}\r\n          name=\"rePassword\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n            validatorPassword\r\n          ]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={t(\"userGroup\")}\r\n          name=\"groupId\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select>\r\n            {renderOption()}\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item\r\n            label={t(\"salary.salary\")}\r\n            name=\"salary\"\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"100%\" }}\r\n              formatter={formatCurrency}\r\n              parser={parserCurrency}\r\n            />\r\n          </Form.Item>\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{textAlign: \"center\"}}>\r\n          <Button onClick={() => redirect(\"frontend.admin.users.index\")} style={{ marginRight: 8}}>\r\n            <LeftCircleFilled /> {t('cancel')}\r\n          </Button>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n            <DeleteFilled /> {t('submit')}\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nCreate.getInitialProps = async (ctx: any) => {\r\n  const userGroupService = new UserGroupService(ctx)\r\n  const [error, groups] = await to(userGroupService.index({ pageSize: -1 }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages','menu'],\r\n    error: error,\r\n    groups: _.get(groups, \"data\", []),\r\n  }\r\n}\r\nCreate.permissions = {\r\n  \"admin.users\": \"C\"\r\n};\r\nexport default Create"]},"metadata":{},"sourceType":"module"}