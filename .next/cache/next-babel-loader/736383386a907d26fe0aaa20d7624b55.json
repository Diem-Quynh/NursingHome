{"ast":null,"code":"var _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\statistics\\\\healthStatus.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Select, DatePicker } from 'antd';\nimport HealthService from 'themes/services/api/HealthStatusService';\nimport PatientService from 'themes/services/api/PatientService';\nimport _ from 'lodash';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { RightCircleFilled } from '@ant-design/icons';\nimport { TimelineChart } from 'ant-design-pro/lib/Charts';\nconst {\n  RangePicker\n} = DatePicker;\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 9\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 15\n    }\n  }\n};\n\nconst Statistic = ({\n  patients\n}) => {\n  const {\n    t,\n    notify,\n    redirect,\n    setStore,\n    getAuth,\n    getStore\n  } = useBaseHook();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const [form] = Form.useForm();\n  const healthService = new HealthService();\n\n  const DisplayError = err => {\n    return notify(t(`errors:${err.code}`), t(err.message), 'error');\n  };\n\n  let healths = []; //submit form\n\n  const onFinish = async values => {\n    setLoading(true);\n    console.log(values); // const filters = JSON.stringify({field:\"patientId\",operator:\"contains\",value:values.patientId})\n    // const [error, result] = await to(healthService.index({ pageSize: -1, filters: [filters] }));\n\n    setLoading(false); // if(error) return DisplayError(error)\n    // healths = result\n  }; //render option\n\n\n  const renderOptionPatient = () => {\n    let result = [];\n    patients.map(item => {\n      result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }\n      }, item.code, \" - \", item.fullname, \" - \", item.roomCode, \" - \", item.bedCode));\n    });\n    return result;\n  }; //   render chart Blood pressure\n\n\n  const renderChartBloodPressure = () => {\n    if (!_.isEmpty(healths)) return __jsx(TimelineChart, {\n      height: 200,\n      data: healths,\n      titleMap: {\n        y1: t('healthStatuses.upperIndex'),\n        y2: t('healthStatuses.lowerIndex')\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 20\n      }\n    });\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 16\n      }\n    });\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    layout: \"inline\",\n    name: \"statisticHealth\",\n    initialValues: {\n      patientId: undefined,\n      date: \"\"\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), __jsx(Form.Item, {\n    label: t(\"patient\"),\n    name: \"patientId\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: t('placeholder.patient'),\n    filterOption: (input, option) => {\n      return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, renderOptionPatient())), __jsx(Form.Item, {\n    label: t(\"healthStatuses.date\"),\n    name: \"date\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, __jsx(RangePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    style: {\n      marginRight: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, t('statistic'), \" \", __jsx(RightCircleFilled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 28\n    }\n  })))), renderChartBloodPressure()));\n};\n\nStatistic.getInitialProps = async ctx => {\n  const patientService = new PatientService(ctx);\n  const [errorPatient, patients] = await to(patientService.index({\n    pageSize: -1\n  }));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    patients: _.get(patients, \"data\", [])\n  };\n};\n\nStatistic.permissions = {\n  \"admin.healthStatuses\": \"U\"\n};\nexport default Statistic;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/statistics/healthStatus.tsx"],"names":["React","useState","Layout","Button","Form","Select","DatePicker","HealthService","PatientService","_","to","useBaseHook","RightCircleFilled","TimelineChart","RangePicker","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","Statistic","patients","t","notify","redirect","setStore","getAuth","getStore","loading","setLoading","form","useForm","healthService","DisplayError","err","code","message","healths","onFinish","values","console","log","renderOptionPatient","result","map","item","push","id","fullname","roomCode","bedCode","renderChartBloodPressure","isEmpty","y1","y2","patientId","undefined","date","required","input","option","children","toLowerCase","indexOf","textAlign","marginRight","getInitialProps","ctx","patientService","errorPatient","index","pageSize","namespacesRequired","get","permissions"],"mappings":"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","sourcesContent":["import ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\n\r\nimport React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Form, Input, Select, DatePicker, InputNumber } from 'antd';\r\nimport HealthService from 'themes/services/api/HealthStatusService';\r\nimport PatientService from 'themes/services/api/PatientService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { RightCircleFilled } from '@ant-design/icons';\r\nimport { TimelineChart } from 'ant-design-pro/lib/Charts';\r\nconst { RangePicker } = DatePicker;\r\nimport moment from 'moment'\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 9 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 15 },\r\n  },\r\n};\r\n\r\nconst Statistic = ({ patients }: { patients: Patient[] }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const healthService = new HealthService()\r\n\r\n  const DisplayError = (err: any) => {\r\n    return notify(t(`errors:${err.code}`), t(err.message), 'error')\r\n  }\r\n\r\n  let healths: [] = []\r\n\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    setLoading(true)\r\n    console.log(values)\r\n    // const filters = JSON.stringify({field:\"patientId\",operator:\"contains\",value:values.patientId})\r\n    // const [error, result] = await to(healthService.index({ pageSize: -1, filters: [filters] }));\r\n    setLoading(false)\r\n    // if(error) return DisplayError(error)\r\n    // healths = result\r\n  }\r\n\r\n  //render option\r\n  const renderOptionPatient = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    patients.map(item => {\r\n      result.push(\r\n      <Option value={item.id} key={item.id}>{item.code} - {item.fullname} - {item.roomCode} - {item.bedCode}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n\r\n    //   render chart Blood pressure\r\n    const renderChartBloodPressure = () => {\r\n        if(!_.isEmpty(healths))\r\n            return <TimelineChart height={200} data={healths} titleMap={{ y1: t('healthStatuses.upperIndex'), y2: t('healthStatuses.lowerIndex') }} />\r\n        return <div></div>\r\n    }\r\n\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        layout=\"inline\"\r\n        name=\"statisticHealth\"\r\n        initialValues={{\r\n          patientId: undefined,\r\n          date: \"\",\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"patient\")}\r\n          name=\"patientId\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select \r\n            showSearch\r\n            placeholder = {t('placeholder.patient')}\r\n            filterOption={ (input: any, option: any) => {\r\n              return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            } }\r\n          >\r\n            {renderOptionPatient()}\r\n          </Select>\r\n        </Form.Item>\r\n        \r\n        <Form.Item\r\n          label={t(\"healthStatuses.date\")}\r\n          name=\"date\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <RangePicker format={'YYYY-MM-DD'} showTime={false} />\r\n        </Form.Item>\r\n\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: \"center\" }}>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading} style={{ marginRight: 8 }}>\r\n          {t('statistic')} <RightCircleFilled /> \r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n\r\n      { renderChartBloodPressure() }\r\n      {/* <TimelineChart height={200} data={healths} titleMap={{ y1: t('healthStatuses.upperIndex'), y2: t('healthStatuses.lowerIndex') }} /> */}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nStatistic.getInitialProps = async (ctx: any) => {\r\n  const patientService = new PatientService(ctx)\r\n\r\n  const [errorPatient, patients] = await to(patientService.index({ pageSize: -1 }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    patients: _.get(patients, \"data\", [])\r\n  }\r\n}\r\nStatistic.permissions = {\r\n  \"admin.healthStatuses\": \"U\"\r\n};\r\nexport default Statistic"]},"metadata":{},"sourceType":"module"}