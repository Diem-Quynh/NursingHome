{"ast":null,"code":"var _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\statistics\\\\healthStatus.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Select, DatePicker } from 'antd';\nimport HealthService from 'themes/services/api/HealthStatusService';\nimport PatientService from 'themes/services/api/PatientService';\nimport _ from 'lodash';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { SaveFilled } from '@ant-design/icons';\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 18\n    }\n  }\n};\n\nconst Edit = ({\n  patients\n}) => {\n  const {\n    t,\n    notify,\n    redirect,\n    setStore,\n    getAuth,\n    getStore\n  } = useBaseHook();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const [form] = Form.useForm();\n  const healthService = new HealthService();\n\n  const DisplayError = err => {\n    return notify(t(`errors:${err.code}`), t(err.message), 'error');\n  }; //submit form\n\n\n  const onFinish = async values => {\n    setLoading(true);\n\n    let {\n      bloodPressureUpper,\n      bloodPressureLower\n    } = values,\n        otherValues = _objectWithoutProperties(values, [\"bloodPressureUpper\", \"bloodPressureLower\"]);\n\n    let bloodPressure = bloodPressureUpper.toString() + \"/\" + bloodPressureLower.toString();\n    const params = Object.assign(otherValues, {\n      bloodPressure: bloodPressure\n    });\n    let [error, result] = await to(healthService.edit({\n      //   id: health.id,\n      params\n    }));\n    setLoading(false);\n    if (error) return DisplayError(error);\n    notify(t(\"message.recordUpdated\"));\n    redirect(\"frontend.admin.healthStatuses.index\");\n  }; //render option\n\n\n  const renderOptionPatient = () => {\n    let result = [];\n    patients.map(item => {\n      result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }\n      }, item.code, \" - \", item.fullname, \" - \", item.roomCode, \" - \", item.bedCode));\n    });\n    return result;\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    name: \"statisticHealth\",\n    initialValues: {\n      patientId: undefined,\n      date: \"\"\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), __jsx(Form.Item, {\n    label: t(\"patient\"),\n    name: \"patientId\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: t('placeholder.patient'),\n    filterOption: (input, option) => {\n      return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, renderOptionPatient())), __jsx(Form.Item, {\n    label: t(\"healthStatuses.date\"),\n    name: \"date\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    placeholder: t('placeholder.date'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    style: {\n      marginRight: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, __jsx(SaveFilled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }), \" \", t('submit'))))));\n};\n\nEdit.getInitialProps = async ctx => {\n  const patientService = new PatientService(ctx);\n  const [errorPatient, patients] = await to(patientService.index({\n    pageSize: -1\n  }));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    patients: _.get(patients, \"data\", [])\n  };\n};\n\nEdit.permissions = {\n  \"admin.healthStatuses\": \"U\"\n};\nexport default Edit;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/statistics/healthStatus.tsx"],"names":["React","useState","Layout","Button","Form","Select","DatePicker","HealthService","PatientService","_","to","useBaseHook","SaveFilled","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","Edit","patients","t","notify","redirect","setStore","getAuth","getStore","loading","setLoading","form","useForm","healthService","DisplayError","err","code","message","onFinish","values","bloodPressureUpper","bloodPressureLower","otherValues","bloodPressure","toString","params","Object","assign","error","result","edit","renderOptionPatient","map","item","push","id","fullname","roomCode","bedCode","patientId","undefined","date","required","input","option","children","toLowerCase","indexOf","textAlign","marginRight","getInitialProps","ctx","patientService","errorPatient","index","pageSize","namespacesRequired","get","permissions"],"mappings":"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","sourcesContent":["import ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\n\r\nimport React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Form, Input, Select, DatePicker, InputNumber } from 'antd';\r\nimport HealthService from 'themes/services/api/HealthStatusService';\r\nimport PatientService from 'themes/services/api/PatientService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { SaveFilled, LeftCircleFilled } from '@ant-design/icons';\r\nimport moment from 'moment'\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 18 },\r\n  },\r\n};\r\n\r\nconst Edit = ({ patients }: { patients: Patient[] }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const healthService = new HealthService()\r\n\r\n  const DisplayError = (err: any) => {\r\n    return notify(t(`errors:${err.code}`), t(err.message), 'error')\r\n  }\r\n\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    setLoading(true)\r\n    let { bloodPressureUpper, bloodPressureLower, ...otherValues } = values;\r\n    let bloodPressure = bloodPressureUpper.toString() + \"/\" + bloodPressureLower.toString()\r\n    const params = Object.assign(otherValues,{bloodPressure: bloodPressure})\r\n    let [error, result]: any[] = await to(healthService.edit({\r\n    //   id: health.id,\r\n      params\r\n    }));\r\n    setLoading(false)\r\n    if(error) return DisplayError(error)\r\n    notify(t(\"message.recordUpdated\"))\r\n    redirect(\"frontend.admin.healthStatuses.index\")\r\n  }\r\n\r\n  //render option\r\n  const renderOptionPatient = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    patients.map(item => {\r\n      result.push(\r\n      <Option value={item.id} key={item.id}>{item.code} - {item.fullname} - {item.roomCode} - {item.bedCode}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"statisticHealth\"\r\n        initialValues={{\r\n          patientId: undefined,\r\n          date: \"\",\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"patient\")}\r\n          name=\"patientId\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select \r\n            showSearch\r\n            placeholder = {t('placeholder.patient')}\r\n            filterOption={ (input: any, option: any) => {\r\n              return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            } }\r\n          >\r\n            {renderOptionPatient()}\r\n          </Select>\r\n        </Form.Item>\r\n        \r\n        <Form.Item\r\n          label={t(\"healthStatuses.date\")}\r\n          name=\"date\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} showTime={false} placeholder={t('placeholder.date')} />\r\n        </Form.Item>\r\n\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: \"center\" }}>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading} style={{ marginRight: 8 }}>\r\n            <SaveFilled /> {t('submit')}\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nEdit.getInitialProps = async (ctx: any) => {\r\n  const patientService = new PatientService(ctx)\r\n\r\n  const [errorPatient, patients] = await to(patientService.index({ pageSize: -1 }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    patients: _.get(patients, \"data\", [])\r\n  }\r\n}\r\nEdit.permissions = {\r\n  \"admin.healthStatuses\": \"U\"\r\n};\r\nexport default Edit"]},"metadata":{},"sourceType":"module"}