{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Input, Select, DatePicker } from 'antd';\nimport NurseAssignService from 'themes/services/api/NurseAssignmentService';\nimport PatientService from 'themes/services/api/PatientService';\nimport UserService from 'themes/services/api/UserService';\nimport _ from 'lodash';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { DeleteFilled, SaveFilled, LeftCircleFilled } from '@ant-design/icons';\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\nimport moment from 'moment';\nvar Option = Select.Option;\nvar formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 18\n    }\n  }\n};\n\nvar Edit = function Edit(_ref) {\n  var patients = _ref.patients,\n      users = _ref.users,\n      nurseAssign = _ref.nurseAssign,\n      nurseAssignError = _ref.nurseAssignError;\n\n  var _useBaseHook = useBaseHook(),\n      t = _useBaseHook.t,\n      notify = _useBaseHook.notify,\n      redirect = _useBaseHook.redirect,\n      setStore = _useBaseHook.setStore,\n      getAuth = _useBaseHook.getAuth,\n      getStore = _useBaseHook.getStore;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var nurseAssignService = new NurseAssignService();\n  var confirmRef = React.createRef();\n\n  var _usePermissionHook = usePermissionHook(),\n      checkPermission = _usePermissionHook.checkPermission;\n\n  var deletePer = checkPermission({\n    \"admin.nurseAssignments\": \"D\"\n  });\n\n  var DisplayError = function DisplayError(err) {\n    return notify(t(\"errors:\".concat(err.code)), t(err.message), 'error');\n  }; //submit form\n\n\n  var onFinish = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var _yield$to, _yield$to2, error, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!nurseAssignError) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", DisplayError(nurseAssignError));\n\n            case 2:\n              setLoading(true);\n              _context.next = 5;\n              return to(nurseAssignService.edit({\n                id: nurseAssign.id,\n                values: values\n              }));\n\n            case 5:\n              _yield$to = _context.sent;\n              _yield$to2 = _slicedToArray(_yield$to, 2);\n              error = _yield$to2[0];\n              result = _yield$to2[1];\n              setLoading(false);\n\n              if (!error) {\n                _context.next = 12;\n                break;\n              }\n\n              return _context.abrupt(\"return\", DisplayError(error));\n\n            case 12:\n              notify(t(\"message.recordUpdated\"));\n              redirect(\"frontend.admin.nurseAssignments.index\");\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onFinish(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onDelete = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _yield$to3, _yield$to4, error, result;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!nurseAssignError) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", DisplayError(nurseAssignError));\n\n            case 2:\n              _context2.next = 4;\n              return to(nurseAssignService[\"delete\"]({\n                ids: [nurseAssign.id]\n              }));\n\n            case 4:\n              _yield$to3 = _context2.sent;\n              _yield$to4 = _slicedToArray(_yield$to3, 2);\n              error = _yield$to4[0];\n              result = _yield$to4[1];\n\n              if (!error) {\n                _context2.next = 10;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", DisplayError(error));\n\n            case 10:\n              notify(t('message.recordDeleted'));\n              redirect(\"frontend.admin.nurseAssignments.index\");\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onDelete() {\n      return _ref3.apply(this, arguments);\n    };\n  }(); //render option\n\n\n  var renderOptionPatient = function renderOptionPatient() {\n    var result = [];\n    patients.map(function (item) {\n      result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id\n      }, item.code, \" - \", item.fullname, \" - \", item.roomCode, \" - \", item.bedCode));\n    });\n    return result;\n  };\n\n  var renderOptionUser = function renderOptionUser() {\n    var result = [];\n    users.map(function (item) {\n      result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id\n      }, item.code, \" - \", item.fullname));\n    });\n    return result;\n  };\n\n  var renderDeleteDialog = function renderDeleteDialog() {\n    return __jsx(ConfirmDialog, {\n      ref: confirmRef,\n      onSubmit: onDelete,\n      title: t('deleteItem'),\n      content: t('message.deleteConfirm')\n    });\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    name: \"createPatient\",\n    initialValues: {\n      nurseId: nurseAssign.nurseId,\n      patientId: nurseAssign.patientId,\n      dateBegin: nurseAssign.dateBegin ? moment(nurseAssign.dateBegin).subtract(7, 'h') : \"\",\n      dateEnd: nurseAssign.dateEnd ? moment(nurseAssign.dateEnd).subtract(7, 'h') : \"\",\n      note: nurseAssign.note\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true\n  }), __jsx(Form.Item, {\n    label: t(\"nurse\"),\n    name: \"nurseId\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: t('placeholder.user'),\n    filterOption: function filterOption(input, option) {\n      return option.children[2].toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    }\n  }, renderOptionUser())), __jsx(Form.Item, {\n    label: t(\"patient\"),\n    name: \"patientId\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: t('placeholder.patient'),\n    filterOption: function filterOption(input, option) {\n      return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    }\n  }, renderOptionPatient())), __jsx(Form.Item, {\n    label: t(\"nurseAssignments.dateBegin\"),\n    name: \"dateBegin\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    placeholder: t('placeholder.date')\n  })), __jsx(Form.Item, {\n    label: t(\"nurseAssignments.dateEnd\"),\n    name: \"dateEnd\"\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    placeholder: t('placeholder.date')\n  })), __jsx(Form.Item, {\n    label: t(\"note\"),\n    name: \"note\"\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return redirect(\"frontend.admin.nurseAssignments.index\");\n    },\n    style: {\n      marginRight: 8\n    }\n  }, __jsx(LeftCircleFilled, null), \" \", t('cancel')), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    style: {\n      marginRight: 8\n    }\n  }, __jsx(SaveFilled, null), \" \", t('submit')), __jsx(Button, {\n    hidden: !deletePer,\n    danger: true,\n    onClick: function onClick() {\n      if (confirmRef.current) confirmRef.current.show(nurseAssign.id);\n    }\n  }, __jsx(DeleteFilled, null), \" \", t('deleteItem')))), renderDeleteDialog()));\n};\n\nEdit.getInitialProps = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ctx) {\n    var nurseAssignService, patientService, userService, query, error, _yield$to5, _yield$to6, nurseAssignError, nurseAssign, _yield$to7, _yield$to8, errorPatient, patients, filters, _yield$to9, _yield$to10, errorUsers, users;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            nurseAssignService = new NurseAssignService(ctx);\n            patientService = new PatientService(ctx);\n            userService = new UserService(ctx);\n            query = ctx.query;\n\n            if (!query.id) {\n              //error missing id\n              error = {\n                code: 9996,\n                message: 'missing ID'\n              };\n            }\n\n            _context3.next = 7;\n            return to(nurseAssignService.detail({\n              id: query.id\n            }));\n\n          case 7:\n            _yield$to5 = _context3.sent;\n            _yield$to6 = _slicedToArray(_yield$to5, 2);\n            nurseAssignError = _yield$to6[0];\n            nurseAssign = _yield$to6[1];\n            if (nurseAssignError) nurseAssign = {};\n            _context3.next = 14;\n            return to(patientService.index({\n              pageSize: -1\n            }));\n\n          case 14:\n            _yield$to7 = _context3.sent;\n            _yield$to8 = _slicedToArray(_yield$to7, 2);\n            errorPatient = _yield$to8[0];\n            patients = _yield$to8[1];\n            filters = JSON.stringify({\n              field: \"position\",\n              operator: \"contains\",\n              value: \"Hộ lý\"\n            });\n            _context3.next = 21;\n            return to(userService.index({\n              pageSize: -1,\n              filters: [filters]\n            }));\n\n          case 21:\n            _yield$to9 = _context3.sent;\n            _yield$to10 = _slicedToArray(_yield$to9, 2);\n            errorUsers = _yield$to10[0];\n            users = _yield$to10[1];\n            return _context3.abrupt(\"return\", {\n              namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n              error: error,\n              nurseAssign: nurseAssign,\n              nurseAssignError: nurseAssignError,\n              patients: _.get(patients, \"data\", []),\n              users: _.get(users, \"data\", [])\n            });\n\n          case 26:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nEdit.permissions = {\n  \"admin.nurseAssignments\": \"U\"\n};\nexport default Edit;","map":{"version":3,"sources":["E:/nursinghome_github/pages/admin/nurseAssignments/edit.tsx"],"names":["ConfirmDialog","React","useState","Layout","Button","Form","Input","Select","DatePicker","NurseAssignService","PatientService","UserService","_","to","useBaseHook","DeleteFilled","SaveFilled","LeftCircleFilled","usePermissionHook","moment","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","Edit","patients","users","nurseAssign","nurseAssignError","t","notify","redirect","setStore","getAuth","getStore","loading","setLoading","useForm","form","nurseAssignService","confirmRef","createRef","checkPermission","deletePer","DisplayError","err","code","message","onFinish","values","edit","id","error","result","onDelete","ids","renderOptionPatient","map","item","push","fullname","roomCode","bedCode","renderOptionUser","renderDeleteDialog","nurseId","patientId","dateBegin","subtract","dateEnd","note","required","input","option","children","toLowerCase","indexOf","textAlign","marginRight","current","show","getInitialProps","ctx","patientService","userService","query","detail","index","pageSize","errorPatient","filters","JSON","stringify","field","operator","value","errorUsers","namespacesRequired","get","permissions"],"mappings":";;;;;AAAA,OAAOA,aAAP,MAA0B,yCAA1B;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,MAA9B,EAAsCC,UAAtC,QAAwD,MAAxD;AACA,OAAOC,kBAAP,MAA+B,4CAA/B;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,EAAP,MAAe,aAAf;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,gBAAnC,QAAuE,mBAAvE;AACA,OAAOC,iBAAP,MAA8B,6BAA9B;AACA,OAAOC,MAAP,MAAmB,QAAnB;IAEQC,M,GAAWb,M,CAAXa,M;AAER,IAAMC,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,EAAE,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KADI;AAERC,IAAAA,EAAE,EAAE;AAAED,MAAAA,IAAI,EAAE;AAAR;AAFI,GADW;AAKrBE,EAAAA,UAAU,EAAE;AACVH,IAAAA,EAAE,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KADM;AAEVC,IAAAA,EAAE,EAAE;AAAED,MAAAA,IAAI,EAAE;AAAR;AAFM;AALS,CAAvB;;AAWA,IAAMG,IAAI,GAAG,SAAPA,IAAO,OACsF;AAAA,MADnFC,QACmF,QADnFA,QACmF;AAAA,MADzEC,KACyE,QADzEA,KACyE;AAAA,MADlEC,WACkE,QADlEA,WACkE;AAAA,MADrDC,gBACqD,QADrDA,gBACqD;;AAAA,qBACpCjB,WAAW,EADyB;AAAA,MACzFkB,CADyF,gBACzFA,CADyF;AAAA,MACtFC,MADsF,gBACtFA,MADsF;AAAA,MAC9EC,QAD8E,gBAC9EA,QAD8E;AAAA,MACpEC,QADoE,gBACpEA,QADoE;AAAA,MAC1DC,OAD0D,gBAC1DA,OAD0D;AAAA,MACjDC,QADiD,gBACjDA,QADiD;;AAAA,kBAEnEnC,QAAQ,CAAC,KAAD,CAF2D;AAAA,MAE1FoC,OAF0F;AAAA,MAEjFC,UAFiF;;AAAA,sBAGlFlC,IAAI,CAACmC,OAAL,EAHkF;AAAA;AAAA,MAG1FC,IAH0F;;AAIjG,MAAMC,kBAAkB,GAAG,IAAIjC,kBAAJ,EAA3B;AACA,MAAMkC,UAAU,GAAG1C,KAAK,CAAC2C,SAAN,EAAnB;;AALiG,2BAOrE1B,iBAAiB,EAPoD;AAAA,MAOzF2B,eAPyF,sBAOzFA,eAPyF;;AAQjG,MAAMC,SAAS,GAAGD,eAAe,CAAC;AAChC,8BAA0B;AADM,GAAD,CAAjC;;AAGA,MAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAc;AACjC,WAAOf,MAAM,CAACD,CAAC,kBAAWgB,GAAG,CAACC,IAAf,EAAF,EAA0BjB,CAAC,CAACgB,GAAG,CAACE,OAAL,CAA3B,EAA0C,OAA1C,CAAb;AACD,GAFD,CAXiG,CAcjG;;;AACA,MAAMC,QAAQ;AAAA,yEAAG,iBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBACZrB,gBADY;AAAA;AAAA;AAAA;;AAAA,+CACagB,YAAY,CAAChB,gBAAD,CADzB;;AAAA;AAEfQ,cAAAA,UAAU,CAAC,IAAD,CAAV;AAFe;AAAA,qBAGoB1B,EAAE,CAAC6B,kBAAkB,CAACW,IAAnB,CAAwB;AAC5DC,gBAAAA,EAAE,EAAExB,WAAW,CAACwB,EAD4C;AAE5DF,gBAAAA,MAAM,EAANA;AAF4D,eAAxB,CAAD,CAHtB;;AAAA;AAAA;AAAA;AAGVG,cAAAA,KAHU;AAGHC,cAAAA,MAHG;AAOfjB,cAAAA,UAAU,CAAC,KAAD,CAAV;;AAPe,mBAQZgB,KARY;AAAA;AAAA;AAAA;;AAAA,+CAQER,YAAY,CAACQ,KAAD,CARd;;AAAA;AASftB,cAAAA,MAAM,CAACD,CAAC,CAAC,uBAAD,CAAF,CAAN;AACAE,cAAAA,QAAQ,CAAC,uCAAD,CAAR;;AAVe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAARiB,QAAQ;AAAA;AAAA;AAAA,KAAd;;AAaA,MAAMM,QAAQ;AAAA,yEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBACZ1B,gBADY;AAAA;AAAA;AAAA;;AAAA,gDACagB,YAAY,CAAChB,gBAAD,CADzB;;AAAA;AAAA;AAAA,qBAEoBlB,EAAE,CAAC6B,kBAAkB,UAAlB,CAA0B;AAAEgB,gBAAAA,GAAG,EAAE,CAAC5B,WAAW,CAACwB,EAAb;AAAP,eAA1B,CAAD,CAFtB;;AAAA;AAAA;AAAA;AAEVC,cAAAA,KAFU;AAEHC,cAAAA,MAFG;;AAAA,mBAGZD,KAHY;AAAA;AAAA;AAAA;;AAAA,gDAGER,YAAY,CAACQ,KAAD,CAHd;;AAAA;AAIftB,cAAAA,MAAM,CAACD,CAAC,CAAC,uBAAD,CAAF,CAAN;AACAE,cAAAA,QAAQ,CAAC,uCAAD,CAAR;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAARuB,QAAQ;AAAA;AAAA;AAAA,KAAd,CA5BiG,CAoCjG;;;AACA,MAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAqB;AAC/C,QAAIH,MAAqB,GAAG,EAA5B;AACA5B,IAAAA,QAAQ,CAACgC,GAAT,CAAa,UAAAC,IAAI,EAAI;AACnBL,MAAAA,MAAM,CAACM,IAAP,CACA,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAED,IAAI,CAACP,EAApB;AAAwB,QAAA,GAAG,EAAEO,IAAI,CAACP;AAAlC,SAAuCO,IAAI,CAACZ,IAA5C,SAAqDY,IAAI,CAACE,QAA1D,SAAuEF,IAAI,CAACG,QAA5E,SAAyFH,IAAI,CAACI,OAA9F,CADA;AAGD,KAJD;AAKA,WAAOT,MAAP;AACD,GARD;;AAUA,MAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAqB;AAC5C,QAAIV,MAAqB,GAAG,EAA5B;AACA3B,IAAAA,KAAK,CAAC+B,GAAN,CAAU,UAAAC,IAAI,EAAI;AAChBL,MAAAA,MAAM,CAACM,IAAP,CACA,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAED,IAAI,CAACP,EAApB;AAAwB,QAAA,GAAG,EAAEO,IAAI,CAACP;AAAlC,SAAuCO,IAAI,CAACZ,IAA5C,SAAqDY,IAAI,CAACE,QAA1D,CADA;AAGD,KAJD;AAKA,WAAOP,MAAP;AACD,GARD;;AAUA,MAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,WACE,MAAC,aAAD;AACE,MAAA,GAAG,EAAExB,UADP;AAEE,MAAA,QAAQ,EAAEc,QAFZ;AAGE,MAAA,KAAK,EAAEzB,CAAC,CAAC,YAAD,CAHV;AAIE,MAAA,OAAO,EAAEA,CAAC,CAAC,uBAAD;AAJZ,MADF;AAQD,GATD;;AAWA,SAAO,MAAC,MAAD,QACL;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,MAAC,IAAD,eACMX,cADN;AAEE,IAAA,IAAI,EAAEoB,IAFR;AAGE,IAAA,IAAI,EAAC,eAHP;AAIE,IAAA,aAAa,EAAE;AACb2B,MAAAA,OAAO,EAAEtC,WAAW,CAACsC,OADR;AAEbC,MAAAA,SAAS,EAAEvC,WAAW,CAACuC,SAFV;AAGbC,MAAAA,SAAS,EAAExC,WAAW,CAACwC,SAAZ,GAAwBnD,MAAM,CAACW,WAAW,CAACwC,SAAb,CAAN,CAA8BC,QAA9B,CAAuC,CAAvC,EAAyC,GAAzC,CAAxB,GAAwE,EAHtE;AAIbC,MAAAA,OAAO,EAAE1C,WAAW,CAAC0C,OAAZ,GAAsBrD,MAAM,CAACW,WAAW,CAAC0C,OAAb,CAAN,CAA4BD,QAA5B,CAAqC,CAArC,EAAuC,GAAvC,CAAtB,GAAoE,EAJhE;AAKbE,MAAAA,IAAI,EAAE3C,WAAW,CAAC2C;AALL,KAJjB;AAWE,IAAA,QAAQ,EAAEtB,QAXZ;AAYE,IAAA,kBAAkB;AAZpB,MAcE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,KAAK,EAAEnB,CAAC,CAAC,OAAD,CADV;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,KAAK,EAAE,CACL;AAAE0C,MAAAA,QAAQ,EAAE,IAAZ;AAAkBxB,MAAAA,OAAO,EAAElB,CAAC,CAAC,eAAD;AAA5B,KADK;AAHT,KAOE,MAAC,MAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,WAAW,EAAIA,CAAC,CAAC,kBAAD,CAFlB;AAGE,IAAA,YAAY,EAAG,sBAAC2C,KAAD,EAAaC,MAAb,EAA6B;AAC1C,aAAOA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmBC,WAAnB,GAAiCC,OAAjC,CAAyCJ,KAAK,CAACG,WAAN,EAAzC,KAAiE,CAAxE;AACD;AALH,KAOGZ,gBAAgB,EAPnB,CAPF,CAdF,EAgCE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,KAAK,EAAElC,CAAC,CAAC,SAAD,CADV;AAEE,IAAA,IAAI,EAAC,WAFP;AAGE,IAAA,KAAK,EAAE,CACL;AAAE0C,MAAAA,QAAQ,EAAE,IAAZ;AAAkBxB,MAAAA,OAAO,EAAElB,CAAC,CAAC,eAAD;AAA5B,KADK;AAHT,KAOE,MAAC,MAAD;AACE,IAAA,UAAU,MADZ;AAEE,IAAA,WAAW,EAAIA,CAAC,CAAC,qBAAD,CAFlB;AAGE,IAAA,YAAY,EAAG,sBAAC2C,KAAD,EAAaC,MAAb,EAA6B;AAC1C,aAAOA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmBC,WAAnB,GAAiCC,OAAjC,CAAyCJ,KAAK,CAACG,WAAN,EAAzC,KAAiE,CAAxE;AACD;AALH,KAOGnB,mBAAmB,EAPtB,CAPF,CAhCF,EAkDE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,KAAK,EAAE3B,CAAC,CAAC,4BAAD,CADV;AAEE,IAAA,IAAI,EAAC,WAFP;AAGE,IAAA,KAAK,EAAE,CACL;AAAE0C,MAAAA,QAAQ,EAAE,IAAZ;AAAkBxB,MAAAA,OAAO,EAAElB,CAAC,CAAC,eAAD;AAA5B,KADK;AAHT,KAOE,MAAC,UAAD;AAAY,IAAA,MAAM,EAAE,YAApB;AAAkC,IAAA,QAAQ,EAAE,KAA5C;AAAmD,IAAA,WAAW,EAAEA,CAAC,CAAC,kBAAD;AAAjE,IAPF,CAlDF,EA4DE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,KAAK,EAAEA,CAAC,CAAC,0BAAD,CADV;AAEE,IAAA,IAAI,EAAC;AAFP,KAIE,MAAC,UAAD;AAAY,IAAA,MAAM,EAAE,YAApB;AAAkC,IAAA,QAAQ,EAAE,KAA5C;AAAmD,IAAA,WAAW,EAAEA,CAAC,CAAC,kBAAD;AAAjE,IAJF,CA5DF,EAmEE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,KAAK,EAAEA,CAAC,CAAC,MAAD,CADV;AAEE,IAAA,IAAI,EAAC;AAFP,KAIE,MAAC,KAAD,OAJF,CAnEF,EA0EE,MAAC,IAAD,CAAM,IAAN;AAAW,IAAA,UAAU,EAAE;AAAER,MAAAA,IAAI,EAAE;AAAR,KAAvB;AAAqC,IAAA,KAAK,EAAE;AAAEwD,MAAAA,SAAS,EAAE;AAAb;AAA5C,KACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAM9C,QAAQ,CAAC,uCAAD,CAAd;AAAA,KAAjB;AAA0E,IAAA,KAAK,EAAE;AAAE+C,MAAAA,WAAW,EAAE;AAAf;AAAjF,KACE,MAAC,gBAAD,OADF,OACwBjD,CAAC,CAAC,QAAD,CADzB,CADF,EAKE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEM,OAAlD;AAA2D,IAAA,KAAK,EAAE;AAAE2C,MAAAA,WAAW,EAAE;AAAf;AAAlE,KACE,MAAC,UAAD,OADF,OACkBjD,CAAC,CAAC,QAAD,CADnB,CALF,EASE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAE,CAACc,SAAjB;AAA4B,IAAA,MAAM,MAAlC;AAAmC,IAAA,OAAO,EAAE,mBAAM;AAC9C,UAAIH,UAAU,CAACuC,OAAf,EAAwBvC,UAAU,CAACuC,OAAX,CAAmBC,IAAnB,CAAwBrD,WAAW,CAACwB,EAApC;AACzB;AAFH,KAGE,MAAC,YAAD,OAHF,OAGoBtB,CAAC,CAAC,YAAD,CAHrB,CATF,CA1EF,CADF,EA4FGmC,kBAAkB,EA5FrB,CADK,CAAP;AAgGD,CArKD;;AAuKAxC,IAAI,CAACyD,eAAL;AAAA,uEAAuB,kBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACf3C,YAAAA,kBADe,GACM,IAAIjC,kBAAJ,CAAuB4E,GAAvB,CADN;AAEfC,YAAAA,cAFe,GAEE,IAAI5E,cAAJ,CAAmB2E,GAAnB,CAFF;AAGfE,YAAAA,WAHe,GAGD,IAAI5E,WAAJ,CAAgB0E,GAAhB,CAHC;AAIfG,YAAAA,KAJe,GAIPH,GAAG,CAACG,KAJG;;AAOrB,gBAAI,CAACA,KAAK,CAAClC,EAAX,EAAe;AACb;AACAC,cAAAA,KAAK,GAAG;AACNN,gBAAAA,IAAI,EAAE,IADA;AAENC,gBAAAA,OAAO,EAAE;AAFH,eAAR;AAID;;AAboB;AAAA,mBAeuBrC,EAAE,CAAC6B,kBAAkB,CAAC+C,MAAnB,CAA0B;AAAEnC,cAAAA,EAAE,EAAEkC,KAAK,CAAClC;AAAZ,aAA1B,CAAD,CAfzB;;AAAA;AAAA;AAAA;AAehBvB,YAAAA,gBAfgB;AAeED,YAAAA,WAfF;AAgBrB,gBAAGC,gBAAH,EAAqBD,WAAW,GAAG,EAAd;AAhBA;AAAA,mBAiBkBjB,EAAE,CAACyE,cAAc,CAACI,KAAf,CAAqB;AAAEC,cAAAA,QAAQ,EAAE,CAAC;AAAb,aAArB,CAAD,CAjBpB;;AAAA;AAAA;AAAA;AAiBdC,YAAAA,YAjBc;AAiBAhE,YAAAA,QAjBA;AAkBfiE,YAAAA,OAlBe,GAkBLC,IAAI,CAACC,SAAL,CAAe;AAACC,cAAAA,KAAK,EAAC,UAAP;AAAkBC,cAAAA,QAAQ,EAAC,UAA3B;AAAsCC,cAAAA,KAAK,EAAC;AAA5C,aAAf,CAlBK;AAAA;AAAA,mBAmBarF,EAAE,CAAC0E,WAAW,CAACG,KAAZ,CAAkB;AAAEC,cAAAA,QAAQ,EAAE,CAAC,CAAb;AAAgBE,cAAAA,OAAO,EAAE,CAACA,OAAD;AAAzB,aAAlB,CAAD,CAnBf;;AAAA;AAAA;AAAA;AAmBdM,YAAAA,UAnBc;AAmBFtE,YAAAA,KAnBE;AAAA,8CAoBd;AACLuE,cAAAA,kBAAkB,EAAE,CAAC,QAAD,EAAW,OAAX,EAAoB,MAApB,EAA2B,QAA3B,CADf;AAEL7C,cAAAA,KAAK,EAAEA,KAFF;AAGLzB,cAAAA,WAAW,EAAEA,WAHR;AAILC,cAAAA,gBAAgB,EAAEA,gBAJb;AAKLH,cAAAA,QAAQ,EAAEhB,CAAC,CAACyF,GAAF,CAAMzE,QAAN,EAAgB,MAAhB,EAAwB,EAAxB,CALL;AAMLC,cAAAA,KAAK,EAAEjB,CAAC,CAACyF,GAAF,CAAMxE,KAAN,EAAa,MAAb,EAAqB,EAArB;AANF,aApBc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AA6BAF,IAAI,CAAC2E,WAAL,GAAmB;AACjB,4BAA0B;AADT,CAAnB;AAGA,eAAe3E,IAAf","sourcesContent":["import ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\n\r\nimport React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Form, Input, Select, DatePicker } from 'antd';\r\nimport NurseAssignService from 'themes/services/api/NurseAssignmentService';\r\nimport PatientService from 'themes/services/api/PatientService';\r\nimport UserService from 'themes/services/api/UserService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { DeleteFilled, SaveFilled, LeftCircleFilled, CopyFilled } from '@ant-design/icons';\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport moment from 'moment'\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 18 },\r\n  },\r\n};\r\n\r\nconst Edit = ({ patients, users, nurseAssign, nurseAssignError }: \r\n  { patients: Patient[], users : User[], nurseAssign: NurseAssignment, nurseAssignError: any }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const nurseAssignService = new NurseAssignService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n\r\n  const { checkPermission } = usePermissionHook();\r\n  const deletePer = checkPermission({\r\n    \"admin.nurseAssignments\": \"D\"\r\n  })\r\n  const DisplayError = (err: any) => {\r\n    return notify(t(`errors:${err.code}`), t(err.message), 'error')\r\n  }\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    if(nurseAssignError) return DisplayError(nurseAssignError)\r\n    setLoading(true)\r\n    let [error, result]: any[] = await to(nurseAssignService.edit({\r\n      id: nurseAssign.id,\r\n      values\r\n    }));\r\n    setLoading(false)\r\n    if(error) return DisplayError(error)\r\n    notify(t(\"message.recordUpdated\"))\r\n    redirect(\"frontend.admin.nurseAssignments.index\")\r\n  }\r\n\r\n  const onDelete = async (): Promise<void> => {\r\n    if(nurseAssignError) return DisplayError(nurseAssignError)\r\n    let [error, result]: any[] = await to(nurseAssignService.delete({ ids: [nurseAssign.id] }));\r\n    if(error) return DisplayError(error)\r\n    notify(t('message.recordDeleted'))\r\n    redirect(\"frontend.admin.nurseAssignments.index\")\r\n  }\r\n\r\n  //render option\r\n  const renderOptionPatient = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    patients.map(item => {\r\n      result.push(\r\n      <Option value={item.id} key={item.id}>{item.code} - {item.fullname} - {item.roomCode} - {item.bedCode}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n\r\n  const renderOptionUser = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    users.map(item => {\r\n      result.push(\r\n      <Option value={item.id} key={item.id}>{item.code} - {item.fullname}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"createPatient\"\r\n        initialValues={{\r\n          nurseId: nurseAssign.nurseId,\r\n          patientId: nurseAssign.patientId,\r\n          dateBegin: nurseAssign.dateBegin ? moment(nurseAssign.dateBegin).subtract(7,'h') : \"\",\r\n          dateEnd: nurseAssign.dateEnd ? moment(nurseAssign.dateEnd).subtract(7,'h') : \"\",\r\n          note: nurseAssign.note\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"nurse\")}\r\n          name=\"nurseId\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select \r\n            showSearch\r\n            placeholder = {t('placeholder.user')}\r\n            filterOption={ (input: any, option: any) => {\r\n              return option.children[2].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            } }\r\n          >\r\n            {renderOptionUser()}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"patient\")}\r\n          name=\"patientId\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select\r\n            showSearch\r\n            placeholder = {t('placeholder.patient')}\r\n            filterOption={ (input: any, option: any) => {\r\n              return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            } }\r\n          >\r\n            {renderOptionPatient()}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"nurseAssignments.dateBegin\")}\r\n          name=\"dateBegin\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} showTime={false} placeholder={t('placeholder.date')} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"nurseAssignments.dateEnd\")}\r\n          name=\"dateEnd\"\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} showTime={false} placeholder={t('placeholder.date')} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"note\")}\r\n          name=\"note\"\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: \"center\" }}>\r\n          <Button onClick={() => redirect(\"frontend.admin.nurseAssignments.index\")} style={{ marginRight: 8 }}>\r\n            <LeftCircleFilled /> {t('cancel')}\r\n          </Button>\r\n\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading} style={{ marginRight: 8 }}>\r\n            <SaveFilled /> {t('submit')}\r\n          </Button>\r\n          \r\n          <Button hidden={!deletePer} danger onClick={() => { \r\n              if (confirmRef.current) confirmRef.current.show(nurseAssign.id) \r\n            }}>\r\n            <DeleteFilled /> {t('deleteItem')}\r\n          </Button>\r\n         \r\n        </Form.Item>\r\n      </Form>\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nEdit.getInitialProps = async (ctx: any) => {\r\n  const nurseAssignService = new NurseAssignService(ctx)\r\n  const patientService = new PatientService(ctx)\r\n  const userService = new UserService(ctx)\r\n  const query = ctx.query;\r\n  let error: any;\r\n\r\n  if (!query.id) {\r\n    //error missing id\r\n    error = {\r\n      code: 9996,\r\n      message: 'missing ID'\r\n    }\r\n  }\r\n\r\n  let [nurseAssignError, nurseAssign] = await to(nurseAssignService.detail({ id: query.id }));\r\n  if(nurseAssignError) nurseAssign = {}\r\n  const [errorPatient, patients] = await to(patientService.index({ pageSize: -1 }));\r\n  const filters = JSON.stringify({field:\"position\",operator:\"contains\",value:\"Hộ lý\"})\r\n  const [errorUsers, users] = await to(userService.index({ pageSize: -1, filters: [filters] }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    error: error,\r\n    nurseAssign: nurseAssign,\r\n    nurseAssignError: nurseAssignError,\r\n    patients: _.get(patients, \"data\", []),\r\n    users: _.get(users, \"data\", [])\r\n  }\r\n}\r\nEdit.permissions = {\r\n  \"admin.nurseAssignments\": \"U\"\r\n};\r\nexport default Edit"]},"metadata":{},"sourceType":"module"}