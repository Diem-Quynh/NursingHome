{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport Layout from 'themes/layouts/Admin';\nimport { GridTable, GridTableHelper } from 'themes/components/Table';\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\nimport { Button } from 'antd';\nimport DoctorAssignService from 'themes/services/api/DoctorAssignmentService';\nimport to from 'await-to-js';\nimport React, { useState } from 'react';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\nimport { PlusCircleOutlined, DeleteOutlined } from '@ant-design/icons';\n\nvar formaterDate = function formaterDate(value) {\n  value = value ? String(value) : \"\";\n  value = value.substr(0, 10);\n  return \"\".concat(value);\n};\n\nvar Index = function Index(_ref) {\n  var doctorAssigns = _ref.doctorAssigns,\n      total = _ref.total;\n\n  var _useBaseHook = useBaseHook(),\n      t = _useBaseHook.t,\n      notify = _useBaseHook.notify,\n      redirect = _useBaseHook.redirect,\n      setStore = _useBaseHook.setStore,\n      getAuth = _useBaseHook.getAuth,\n      getStore = _useBaseHook.getStore;\n\n  var _useState = useState(true),\n      hiddenDeleteBtn = _useState[0],\n      setHiddenDeleteBtn = _useState[1];\n\n  var _useState2 = useState([]),\n      selectedIds = _useState2[0],\n      setSelectedIds = _useState2[1];\n\n  var doctorAssignService = new DoctorAssignService();\n  var confirmRef = React.createRef();\n  var tableRef = React.createRef();\n\n  var _usePermissionHook = usePermissionHook(),\n      checkPermission = _usePermissionHook.checkPermission;\n\n  var createPer = checkPermission({\n    \"admin.doctorAssignments\": \"C\"\n  });\n  var deletePer = checkPermission({\n    \"admin.doctorAssignment\": \"D\"\n  });\n  var columns = [{\n    title: t(\"doctor\"),\n    dataIndex: 'fullname',\n    key: 'users.fullname',\n    sorter: true,\n    filterable: true,\n    render: function render(text, record) {\n      return __jsx(\"a\", {\n        onClick: function onClick() {\n          return redirect('frontend.admin.doctorAssignments.edit', {\n            id: record.id\n          });\n        }\n      }, record.doctorCode, \" - \", record.fullname);\n    }\n  }, {\n    title: t('room'),\n    dataIndex: 'roomCode',\n    key: 'roomCode',\n    sorter: true,\n    filterable: true,\n    width: '15%'\n  }, {\n    title: t(\"doctorAssignments.dateBegin\"),\n    dataIndex: 'dateBegin',\n    key: 'dateBegin',\n    sorter: true,\n    filterDate: true,\n    width: '15%',\n    render: function render(text, record) {\n      return __jsx(\"div\", null, formaterDate(text));\n    }\n  }, {\n    title: t(\"doctorAssignments.dateEnd\"),\n    dataIndex: 'dateEnd',\n    key: 'dateEnd',\n    sorter: true,\n    filterDate: true,\n    width: '15%',\n    render: function render(text, record) {\n      return __jsx(\"div\", null, formaterDate(text));\n    }\n  }, {\n    title: t(\"note\"),\n    dataIndex: 'note',\n    key: 'note'\n  }];\n\n  var onChangeSelection = function onChangeSelection(data) {\n    if (data.length > 0) {\n      setHiddenDeleteBtn(false);\n    } else {\n      setHiddenDeleteBtn(true);\n    }\n\n    setSelectedIds(data);\n  };\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var _yield$to, _yield$to2, error, doctorAssigns, code, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return to(doctorAssignService.index(values));\n\n            case 2:\n              _yield$to = _context.sent;\n              _yield$to2 = _slicedToArray(_yield$to, 2);\n              error = _yield$to2[0];\n              doctorAssigns = _yield$to2[1];\n\n              if (!error) {\n                _context.next = 10;\n                break;\n              }\n\n              code = error.code, message = error.message;\n              notify(t(\"errors:\".concat(code)), t(message), 'error');\n              return _context.abrupt(\"return\", {});\n\n            case 10:\n              return _context.abrupt(\"return\", doctorAssigns);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchData(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onDelete = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _yield$to3, _yield$to4, error, result;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return to(doctorAssignService[\"delete\"]({\n                ids: selectedIds\n              }));\n\n            case 2:\n              _yield$to3 = _context2.sent;\n              _yield$to4 = _slicedToArray(_yield$to3, 2);\n              error = _yield$to4[0];\n              result = _yield$to4[1];\n\n              if (!error) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", notify(t(\"errors:\".concat(error.code)), t(\"\".concat(error.message)), 'error'));\n\n            case 8:\n              notify(t(\"message.recordDeleted\"));\n\n              if (tableRef.current !== null) {\n                tableRef.current.reload();\n              }\n\n              setSelectedIds([]);\n              setHiddenDeleteBtn(true);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onDelete() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var renderDeleteDialog = function renderDeleteDialog() {\n    return __jsx(ConfirmDialog, {\n      ref: confirmRef,\n      onSubmit: onDelete,\n      title: t('deleteItem'),\n      content: t('message.deleteConfirm')\n    });\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Button, {\n    hidden: !createPer,\n    onClick: function onClick() {\n      return redirect(\"frontend.admin.doctorAssignments.create\");\n    },\n    type: \"primary\",\n    className: \"btn-top\"\n  }, __jsx(PlusCircleOutlined, null), t('create')), __jsx(Button, {\n    danger: true,\n    onClick: function onClick() {\n      if (confirmRef.current) confirmRef.current.show();\n    },\n    className: \"btn-top\",\n    hidden: hiddenDeleteBtn || !deletePer\n  }, __jsx(DeleteOutlined, null), t('delete')), __jsx(GridTable, {\n    ref: tableRef,\n    columns: columns,\n    data: doctorAssigns,\n    rowSelection: {\n      selectedRowKeys: selectedIds,\n      onChange: function onChange(data) {\n        return onChangeSelection(data);\n      }\n    },\n    fetchData: fetchData,\n    total: total\n  }), renderDeleteDialog()));\n};\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ctx) {\n    var doctorAssignService, defaultOptions, query, filters, _yield$to5, _yield$to6, error, doctorAssigns;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            doctorAssignService = new DoctorAssignService(ctx);\n            defaultOptions = {\n              filters: [],\n              sorting: []\n            };\n            query = ctx.query;\n            filters = GridTableHelper.getOptions(query, defaultOptions);\n            _context3.next = 6;\n            return to(doctorAssignService.index(filters));\n\n          case 6:\n            _yield$to5 = _context3.sent;\n            _yield$to6 = _slicedToArray(_yield$to5, 2);\n            error = _yield$to6[0];\n            doctorAssigns = _yield$to6[1];\n            return _context3.abrupt(\"return\", {\n              namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n              error: error,\n              doctorAssigns: useBaseHook.getData(doctorAssigns, \"data\", []),\n              total: useBaseHook.getData(doctorAssigns, \"total\", 0),\n              defaultQuery: {\n                filters: GridTableHelper.makeQuery(filters)\n              }\n            });\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nIndex.permissions = {\n  \"admin.doctorAssignments\": \"R\",\n  \"doctor.doctorAssignments\": \"R\",\n  \"admin.users.doctorAssignments\": \"R\"\n};\nexport default Index;","map":{"version":3,"sources":["E:/nursinghome_github/pages/admin/doctorAssignments/index.tsx"],"names":["Layout","GridTable","GridTableHelper","ConfirmDialog","Button","DoctorAssignService","to","React","useState","useBaseHook","usePermissionHook","PlusCircleOutlined","DeleteOutlined","formaterDate","value","String","substr","Index","doctorAssigns","total","t","notify","redirect","setStore","getAuth","getStore","hiddenDeleteBtn","setHiddenDeleteBtn","selectedIds","setSelectedIds","doctorAssignService","confirmRef","createRef","tableRef","checkPermission","createPer","deletePer","columns","title","dataIndex","key","sorter","filterable","render","text","record","id","doctorCode","fullname","width","filterDate","onChangeSelection","data","length","fetchData","values","index","error","code","message","onDelete","ids","result","current","reload","renderDeleteDialog","show","selectedRowKeys","onChange","getInitialProps","ctx","defaultOptions","filters","sorting","query","getOptions","namespacesRequired","getData","defaultQuery","makeQuery","permissions"],"mappings":"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","sourcesContent":["import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper, FilterInput } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button } from 'antd';\r\nimport DoctorAssignService from 'themes/services/api/DoctorAssignmentService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport {PlusCircleOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\nconst formaterDate = (value: any) => {\r\n  value = value? String(value) : \"\"\r\n  value = value.substr(0,10)\r\n  return `${value}`\r\n}\r\n\r\nconst Index = ({ doctorAssigns, total }: { doctorAssigns: DoctorAssignment[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const doctorAssignService = new DoctorAssignService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"admin.doctorAssignments\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"admin.doctorAssignment\": \"D\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t(\"doctor\"),\r\n      dataIndex: 'fullname',\r\n      key: 'users.fullname',\r\n      sorter: true,\r\n      filterable:true,\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.doctorAssignments.edit', \r\n        { id: record.id })}>{record.doctorCode} - {record.fullname}</a>\r\n    },\r\n    {\r\n      title: t('room'),\r\n      dataIndex: 'roomCode',\r\n      key: 'roomCode',\r\n      sorter: true,\r\n      filterable:true,\r\n      width: '15%'\r\n    },\r\n    {\r\n      title: t(\"doctorAssignments.dateBegin\"),\r\n      dataIndex: 'dateBegin',\r\n      key: 'dateBegin',\r\n      sorter: true,\r\n      filterDate: true,\r\n      width: '15%',\r\n      render: (text: string, record: any) => <div>{formaterDate(text)}</div>\r\n    },\r\n    {\r\n      title: t(\"doctorAssignments.dateEnd\"),\r\n      dataIndex: 'dateEnd',\r\n      key: 'dateEnd',\r\n      sorter: true,\r\n      filterDate: true,\r\n      width: '15%',\r\n      render: (text: string, record: any) => <div>{formaterDate(text)}</div>\r\n    },\r\n    {\r\n      title: t(\"note\"),\r\n      dataIndex: 'note',\r\n      key: 'note',\r\n    },\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, doctorAssigns]: any[] = await to(doctorAssignService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return doctorAssigns\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(doctorAssignService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.doctorAssignments.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      \r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={doctorAssigns}\r\n        rowSelection={{selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let doctorAssignService = new DoctorAssignService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, doctorAssigns]: any[] = await to(doctorAssignService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\r\n    error: error,\r\n    doctorAssigns: useBaseHook.getData(doctorAssigns, \"data\", []),\r\n    total: useBaseHook.getData(doctorAssigns, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.doctorAssignments\": \"R\",\r\n  \"doctor.doctorAssignments\":\"R\",\r\n  \"admin.users.doctorAssignments\":\"R\",\r\n};\r\nexport default Index"]},"metadata":{},"sourceType":"module"}