{"ast":null,"code":"const charToNum = {\n  C: 8,\n  R: 4,\n  U: 2,\n  D: 1\n};\n\nconst crudToDec = text => {\n  return text.toUpperCase().split(\"\").reduce((total, char) => total + charToNum[char], 0);\n};\n\nconst decToCrud = dec => {\n  let result = \"\";\n  let char;\n\n  for (char in charToNum) {\n    if ((dec & charToNum[char]) == charToNum[char]) result += char;\n  }\n\n  return result;\n};\n\nconst hasPermission = (requirePermission, userPermission) => {\n  return (userPermission & requirePermission) === requirePermission;\n};\n\nconst checkPermission = (permissions, userPermissions, showError = false) => {\n  if (!permissions) return true;\n\n  for (let permission in permissions) {\n    const requirePermission = crudToDec(permissions[permission]);\n    const rootPermission = userPermissions[\"root\"] || 0;\n    let userPermission = userPermissions[permission] || 0;\n    userPermission = userPermission | rootPermission;\n    if (hasPermission(requirePermission, userPermission)) return true;\n\n    if (!hasPermission(requirePermission, userPermission)) {\n      if (!showError) return false;\n      return {\n        error: true,\n        permission: permission,\n        requirePermission: decToCrud(requirePermission),\n        userPermission: decToCrud(userPermission)\n      };\n    }\n  }\n\n  return true;\n};\n\nexport { checkPermission, hasPermission, crudToDec, decToCrud };","map":{"version":3,"sources":["E:/DATN/nursinghome/themes/utils/Permission.ts"],"names":["charToNum","C","R","U","D","crudToDec","text","toUpperCase","split","reduce","total","char","decToCrud","dec","result","hasPermission","requirePermission","userPermission","checkPermission","permissions","userPermissions","showError","permission","rootPermission","error"],"mappings":"AAEA,MAAMA,SAAS,GAAG;AAAEC,EAAAA,CAAC,EAAE,CAAL;AAAQC,EAAAA,CAAC,EAAE,CAAX;AAAcC,EAAAA,CAAC,EAAE,CAAjB;AAAoBC,EAAAA,CAAC,EAAE;AAAvB,CAAlB;;AACA,MAAMC,SAAS,GAAIC,IAAD,IAAe;AAC7B,SAAOA,IAAI,CAACC,WAAL,GAAmBC,KAAnB,CAAyB,EAAzB,EAA6BC,MAA7B,CAAoC,CAACC,KAAD,EAAgBC,IAAhB,KAAgDD,KAAK,GAAGV,SAAS,CAACW,IAAD,CAArG,EAA6G,CAA7G,CAAP;AAEH,CAHD;;AAIA,MAAMC,SAAS,GAAIC,GAAD,IAAiB;AAC/B,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIH,IAAJ;;AACA,OAAKA,IAAL,IAAaX,SAAb,EAAwB;AACpB,QAAI,CAACa,GAAG,GAAGb,SAAS,CAACW,IAAD,CAAhB,KAA2BX,SAAS,CAACW,IAAD,CAAxC,EAAgDG,MAAM,IAAIH,IAAV;AACnD;;AACD,SAAOG,MAAP;AACH,CAPD;;AASA,MAAMC,aAAa,GAAG,CAACC,iBAAD,EAA4BC,cAA5B,KAAuD;AACzE,SAAO,CAACA,cAAc,GAAGD,iBAAlB,MAAyCA,iBAAhD;AACD,CAFH;;AAIA,MAAME,eAAe,GAAG,CAACC,WAAD,EAAmBC,eAAnB,EAAyCC,SAAkB,GAAG,KAA9D,KAAwE;AAC5F,MAAG,CAACF,WAAJ,EAAiB,OAAO,IAAP;;AACjB,OAAK,IAAIG,UAAT,IAAuBH,WAAvB,EAAoC;AAChC,UAAMH,iBAAiB,GAAGX,SAAS,CAACc,WAAW,CAACG,UAAD,CAAZ,CAAnC;AACA,UAAMC,cAAc,GAAGH,eAAe,CAAC,MAAD,CAAf,IAA2B,CAAlD;AACA,QAAIH,cAAc,GAAGG,eAAe,CAACE,UAAD,CAAf,IAA+B,CAApD;AACAL,IAAAA,cAAc,GAAGA,cAAc,GAAGM,cAAlC;AACA,QAAIR,aAAa,CAACC,iBAAD,EAAoBC,cAApB,CAAjB,EAAsD,OAAO,IAAP;;AACtD,QAAI,CAACF,aAAa,CAACC,iBAAD,EAAoBC,cAApB,CAAlB,EAAuD;AACnD,UAAI,CAACI,SAAL,EAAgB,OAAO,KAAP;AAChB,aAAO;AACHG,QAAAA,KAAK,EAAE,IADJ;AAEHF,QAAAA,UAAU,EAAEA,UAFT;AAGHN,QAAAA,iBAAiB,EAAEJ,SAAS,CAACI,iBAAD,CAHzB;AAIHC,QAAAA,cAAc,EAAEL,SAAS,CAACK,cAAD;AAJtB,OAAP;AAMH;AACJ;;AACD,SAAO,IAAP;AACH,CAnBD;;AAqBA,SACIC,eADJ,EAEIH,aAFJ,EAGIV,SAHJ,EAIIO,SAJJ","sourcesContent":["import routeConfig from '../_routes.json'\r\n\r\nconst charToNum = { C: 8, R: 4, U: 2, D: 1 }\r\nconst crudToDec = (text: any) => {\r\n    return text.toUpperCase().split(\"\").reduce((total: number, char: 'C' | 'R' | 'U' | 'D') => total + charToNum[char], 0)\r\n\r\n}\r\nconst decToCrud = (dec: number) => {\r\n    let result = \"\";\r\n    let char: 'C' | 'R' | 'U' | 'D'\r\n    for (char in charToNum) {\r\n        if ((dec & charToNum[char]) == charToNum[char]) result += char\r\n    }\r\n    return result\r\n}\r\n\r\nconst hasPermission = (requirePermission: number, userPermission: number) => {\r\n    return (userPermission & requirePermission) === requirePermission\r\n  }\r\n\r\nconst checkPermission = (permissions: any, userPermissions: any, showError: boolean = false) => {\r\n    if(!permissions) return true\r\n    for (let permission in permissions) {\r\n        const requirePermission = crudToDec(permissions[permission]);\r\n        const rootPermission = userPermissions[\"root\"] || 0\r\n        let userPermission = userPermissions[permission] || 0\r\n        userPermission = userPermission | rootPermission\r\n        if (hasPermission(requirePermission, userPermission)) return true\r\n        if (!hasPermission(requirePermission, userPermission)) {\r\n            if (!showError) return false;\r\n            return {\r\n                error: true,\r\n                permission: permission,\r\n                requirePermission: decToCrud(requirePermission),\r\n                userPermission: decToCrud(userPermission)\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport {\r\n    checkPermission,\r\n    hasPermission,\r\n    crudToDec,\r\n    decToCrud\r\n}\r\n"]},"metadata":{},"sourceType":"module"}