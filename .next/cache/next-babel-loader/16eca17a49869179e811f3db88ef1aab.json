{"ast":null,"code":"var _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\userPermissions\\\\index.tsx\";\nvar __jsx = React.createElement;\n\n/* import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper, FilterInput } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button } from 'antd';\r\nimport UserPermissionService from 'themes/services/api/UserPermissionService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport {PlusCircleOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\nconst Index = ({ permissions, total }: { permissions: Permission[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const permissionService = new UserPermissionService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"admin.userPermissions\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"admin.userPermissions\": \"D\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t(\"userPermissions.key\"),\r\n      dataIndex: 'key',\r\n      key: 'key',\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.userPermissions.edit', { id: record.id })}> {record.keyName} </a>\r\n    },\r\n    {\r\n      title: t('userPermissions.name'),\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: t(\"description\"),\r\n      dataIndex: 'description',\r\n      key: 'description',\r\n    },\r\n    {\r\n      title: t(\"userPermissions.avalibleValue\"),\r\n      dataIndex: 'avalibleValue',\r\n      key: 'avalibleValue',\r\n    }\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, permissions]: any[] = await to(permissionService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return permissions\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(permissionService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.userPermissions.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      \r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={permissions}\r\n        rowSelection={{selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let permissionService = new UserPermissionService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, permissions]: any[] = await to(permissionService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    error: error,\r\n    permissions: useBaseHook.getData(permissions, \"data\", []),\r\n    total: useBaseHook.getData(permissions, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.userPermissions\": \"R\"\r\n};\r\nexport default Index */\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Typography, Checkbox } from 'antd';\nimport { Table } from 'antd';\nimport UserPermissionService from 'themes/services/api/UserPermissionService';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { LeftCircleFilled, SaveFilled } from '@ant-design/icons';\nconst {\n  Title,\n  Text\n} = Typography;\n\nconst Role = ({\n  permissions,\n  total\n}) => {\n  let result = {};\n  const {\n    t,\n    notify,\n    redirect,\n    router\n  } = useBaseHook();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const PermissionService = new UserPermissionService();\n\n  const renderCheckbox = (row, permission) => {\n    function onChange(e) {\n      e.target.checked ? row.value += permission : row.value -= permission;\n      result[row.key] = row.value;\n      console.log(result);\n    }\n\n    const checked = (row.value & permission) === permission;\n    const disabled = (row.avalibleValue & permission) !== permission;\n    return __jsx(Checkbox, {\n      defaultChecked: checked,\n      disabled: disabled,\n      onChange: onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const renderPermission = permission => {\n    const columns = [{\n      title: t('userPermissions.key'),\n      dataIndex: 'key',\n      key: 'key',\n      width: '5%'\n    }, {\n      title: t('userPermissions.name'),\n      dataIndex: 'name',\n      key: 'name'\n    }, {\n      title: t('description'),\n      dataIndex: 'description',\n      key: 'description'\n    }, {\n      title: t(\"create\"),\n      dataIndex: 'value',\n      key: 'valueC',\n      width: '10%',\n      render: (value, row) => renderCheckbox(row, 8)\n    }, {\n      title: t(\"view\"),\n      dataIndex: 'value',\n      key: 'valueR',\n      width: '10%',\n      render: (value, row) => renderCheckbox(row, 4)\n    }, {\n      title: t(\"edit\"),\n      dataIndex: 'value',\n      key: 'valueU',\n      width: '10%',\n      render: (value, row) => renderCheckbox(row, 2)\n    }, {\n      title: t(\"delete\"),\n      dataIndex: 'value',\n      key: 'valueD',\n      width: '10%',\n      render: (value, row) => renderCheckbox(row, 1)\n    }];\n    return __jsx(Table, {\n      size: \"small\",\n      key: category.id,\n      columns: columns,\n      dataSource: category.permissions,\n      pagination: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 12\n      }\n    });\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 5\n    }\n  }, permissionCategories.map(g => renderPermissionCategory(g)), __jsx(\"div\", {\n    style: {\n      marginTop: \"24px\",\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    onClick: () => onFinish(result),\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    style: {\n      marginRight: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }, __jsx(SaveFilled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }), \" \", t('submit')), __jsx(Button, {\n    onClick: () => router.back(),\n    style: {\n      marginRight: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }, __jsx(LeftCircleFilled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 11\n    }\n  }), \" \", t('cancel')))));\n};\n\nRole.getInitialProps = async ctx => {\n  const userPermissionService = new UserPermissionService(ctx);\n  const query = ctx.query;\n  let error;\n\n  if (!query.id) {\n    error = {\n      code: 9996,\n      message: 'missing ID'\n    };\n  }\n\n  let [userError, permissionCategories] = await to(userPermissionService.getByGroupId({\n    groupId: query.id\n  }));\n  console.log(permissionCategories, 'index');\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    error: error,\n    permissionCategories: permissionCategories,\n    groupId: query.id\n  };\n};\n\nRole.permissions = {\n  \"admin.userGroups\": \"U\"\n};\nexport default Role;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/userPermissions/index.tsx"],"names":["React","useState","Layout","Button","Typography","Checkbox","Table","UserPermissionService","to","useBaseHook","LeftCircleFilled","SaveFilled","Title","Text","Role","permissions","total","result","t","notify","redirect","router","loading","setLoading","PermissionService","renderCheckbox","row","permission","onChange","e","target","checked","value","key","console","log","disabled","avalibleValue","renderPermission","columns","title","dataIndex","width","render","category","id","permissionCategories","map","g","renderPermissionCategory","marginTop","textAlign","onFinish","marginRight","back","getInitialProps","ctx","userPermissionService","query","error","code","message","userError","getByGroupId","groupId","namespacesRequired"],"mappings":"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","sourcesContent":["/* import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper, FilterInput } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button } from 'antd';\r\nimport UserPermissionService from 'themes/services/api/UserPermissionService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport {PlusCircleOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\nconst Index = ({ permissions, total }: { permissions: Permission[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const permissionService = new UserPermissionService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"admin.userPermissions\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"admin.userPermissions\": \"D\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t(\"userPermissions.key\"),\r\n      dataIndex: 'key',\r\n      key: 'key',\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.userPermissions.edit', { id: record.id })}> {record.keyName} </a>\r\n    },\r\n    {\r\n      title: t('userPermissions.name'),\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: t(\"description\"),\r\n      dataIndex: 'description',\r\n      key: 'description',\r\n    },\r\n    {\r\n      title: t(\"userPermissions.avalibleValue\"),\r\n      dataIndex: 'avalibleValue',\r\n      key: 'avalibleValue',\r\n    }\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, permissions]: any[] = await to(permissionService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return permissions\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(permissionService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.userPermissions.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      \r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={permissions}\r\n        rowSelection={{selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let permissionService = new UserPermissionService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, permissions]: any[] = await to(permissionService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    error: error,\r\n    permissions: useBaseHook.getData(permissions, \"data\", []),\r\n    total: useBaseHook.getData(permissions, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.userPermissions\": \"R\"\r\n};\r\nexport default Index */\r\n\r\n\r\nimport React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Row, Col, Form, Input, Select, Typography, Checkbox } from 'antd';\r\nimport { Table } from 'antd';\r\nimport { AppstoreOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport UserPermissionService from 'themes/services/api/UserPermissionService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { LeftCircleFilled, SaveFilled, DeleteFilled } from '@ant-design/icons';\r\nimport BreadCrumb from 'themes/components/Breadcumb'\r\nimport { getInputClassName } from 'antd/lib/input/Input';\r\nconst { Title, Text } = Typography;\r\n\r\nconst Role = ({ permissions, total }: { permissions: Permission[], total: number }) => {\r\n  let result: any = {}\r\n  const { t, notify, redirect, router } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const PermissionService = new UserPermissionService()\r\n\r\n  const renderCheckbox = (row: any, permission: number) => {\r\n    function onChange(e: any) {\r\n      e.target.checked ? row.value += permission : row.value -= permission;\r\n      result[row.key] = row.value\r\n      console.log(result)\r\n    }\r\n    const checked = (row.value & permission) === permission\r\n    const disabled = (row.avalibleValue & permission) !== permission\r\n    return <Checkbox defaultChecked={checked} disabled={disabled} onChange={onChange}></Checkbox>\r\n  }\r\n\r\n  const renderPermission = (permission: any) => {\r\n    const columns = [\r\n      {\r\n        title: t('userPermissions.key'),\r\n        dataIndex: 'key',\r\n        key: 'key',\r\n        width: '5%',\r\n      },\r\n      {\r\n        title: t('userPermissions.name'),\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n      },\r\n      {\r\n        title: t('description'),\r\n        dataIndex: 'description',\r\n        key: 'description',\r\n      },\r\n      {\r\n        title: t(\"create\"),\r\n        dataIndex: 'value',\r\n        key: 'valueC',\r\n        width: '10%',\r\n        render: (value: any, row: any) => renderCheckbox(row, 8)\r\n      },\r\n      {\r\n        title: t(\"view\"),\r\n        dataIndex: 'value',\r\n        key: 'valueR',\r\n        width: '10%',\r\n        render: (value: any, row: any) => renderCheckbox(row, 4)\r\n      },\r\n      {\r\n        title: t(\"edit\"),\r\n        dataIndex: 'value',\r\n        key: 'valueU',\r\n        width: '10%',\r\n        render: (value: any, row: any) => renderCheckbox(row, 2)\r\n      },\r\n      {\r\n        title: t(\"delete\"),\r\n        dataIndex: 'value',\r\n        key: 'valueD',\r\n        width: '10%',\r\n        render: (value: any, row: any) => renderCheckbox(row, 1)\r\n      }\r\n    ];\r\n    return <Table size=\"small\" key={category.id} columns={columns} dataSource={category.permissions} pagination={false} />\r\n  }\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      {permissionCategories.map((g: any) => renderPermissionCategory(g))}\r\n      <div style={{ marginTop: \"24px\", textAlign: \"center\"}}>\r\n        <Button onClick={() => onFinish(result)} type=\"primary\" htmlType=\"submit\" loading={loading} style={{ marginRight: 8 }}>\r\n          <SaveFilled /> {t('submit')}\r\n        </Button>\r\n        <Button onClick={() => router.back()} style={{ marginRight: 8 }}>\r\n          <LeftCircleFilled /> {t('cancel')}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n\r\n  </Layout>\r\n}\r\n\r\nRole.getInitialProps = async (ctx: any) => {\r\n  const userPermissionService = new UserPermissionService(ctx)\r\n  const query = ctx.query;\r\n  let error: any;\r\n\r\n  if (!query.id) {\r\n    error = {\r\n      code: 9996,\r\n      message: 'missing ID'\r\n    }\r\n  }\r\n\r\n  let [userError, permissionCategories] = await to(userPermissionService.getByGroupId({ groupId: query.id }));\r\n  console.log(permissionCategories,'index')\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    error: error,\r\n    permissionCategories: permissionCategories,\r\n    groupId: query.id\r\n  }\r\n}\r\nRole.permissions = {\r\n  \"admin.userGroups\": \"U\"\r\n}\r\nexport default Role"]},"metadata":{},"sourceType":"module"}