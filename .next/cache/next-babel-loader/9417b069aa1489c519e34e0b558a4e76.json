{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\themes\\\\components\\\\Table\\\\Table.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Table, Button, Input, Radio, Divider } from 'antd';\nimport { addQuery } from 'themes/route';\nimport { withRouter, useRouter } from 'next/router';\nimport Highlighter from \"react-highlight-words\";\nimport { Base64 } from 'js-base64';\nimport _ from 'lodash';\nimport FilterInput from './SearchComponents/Input';\nimport DatePicker from './SearchComponents/DatePicker';\n\nvar GridTable = /*#__PURE__*/function (_React$Component) {\n  _inherits(GridTable, _React$Component);\n\n  var _super = _createSuper(GridTable);\n\n  function GridTable(props) {\n    var _this;\n\n    _classCallCheck(this, GridTable);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultOptionToColumns\", function (defaultOptions) {\n      _this.columns = _this.columns.map(function (column) {\n        //set field\n        if (!column.field) column.field = column.key;\n        var sort = defaultOptions.sorting.find(function (item) {\n          return item.field === column.field;\n        });\n\n        if (sort) {\n          var direction = sort.direction;\n          column.sortOrder = direction === \"asc\" ? 'ascend' : 'descend';\n        }\n\n        var filters = defaultOptions.filters.filter(function (item) {\n          return item.field === column.field;\n        });\n\n        if (filters.length) {\n          column.filteredValue = _toConsumableArray(filters);\n        } else {\n          delete column.filteredValue;\n        }\n\n        if (column.filterable) {\n          //    delete column.filterable;\n          column = _objectSpread(_objectSpread({}, column), _this.getColumnSearchProps(column, 'input'));\n        }\n\n        if (column.filterDate) {\n          //    delete column.filterable;\n          column = _objectSpread(_objectSpread({}, column), _this.getColumnSearchProps(column, 'date'));\n        }\n\n        if (column.filterCheck) {\n          column = _objectSpread(_objectSpread({}, column), {}, {\n            filters: [{\n              text: column.text['0'],\n              value: 0\n            }, {\n              text: column.text['1'],\n              value: 1\n            }],\n            onFilter: function onFilter(value, record) {\n              return record[column.key].includes(value);\n            }\n          });\n        }\n\n        return column;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getColumnSearchProps\", function (column, type) {\n      var ref = React.createRef();\n      return {\n        filterDropdown: function filterDropdown(_ref) {\n          var confirm = _ref.confirm,\n              setSelectedKeys = _ref.setSelectedKeys;\n\n          var confirmFnc = function confirmFnc(values) {\n            var currentColumn = _this.columns.find(function (c) {\n              return c.dataIndex === column.dataIndex;\n            });\n\n            setSelectedKeys(values);\n            confirm();\n\n            _this.reload();\n          };\n\n          if (column.renderFilter) {\n            return column.renderFilter({\n              column: column,\n              confirm: confirmFnc,\n              ref: ref\n            });\n          }\n\n          if (type == 'input') return __jsx(FilterInput, {\n            column: column,\n            ref: ref,\n            confirm: confirmFnc,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 28\n            }\n          });\n          if (type == 'date') return __jsx(DatePicker, {\n            column: column,\n            ref: ref,\n            confirm: confirmFnc,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 28\n            }\n          });\n        },\n        filterIcon: function filterIcon(filtered) {\n          return __jsx(SearchOutlined, {\n            style: {\n              color: filtered ? \"#1890ff\" : undefined\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }\n          });\n        },\n        onFilterDropdownVisibleChange: function onFilterDropdownVisibleChange(visible) {\n          if (!visible && column.visibleSearch != visible) {\n            column.visibleSearch = visible;\n\n            if (ref.current) {\n              ref.current.onSubmit();\n            }\n          }\n\n          column.visibleSearch = visible;\n        }\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearAll\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _this$pagination, pageSize, page;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$pagination = _this.pagination, pageSize = _this$pagination.pageSize, page = _this$pagination.page;\n              _context.next = 3;\n              return _this.handleTableChange({\n                pageSize: pageSize,\n                current: page\n              }, {}, {});\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"setFiltersToColumns\", function () {\n      var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this.columns = _this.columns.map(function (column) {\n        var filter = filters[column.field];\n\n        if (filter) {\n          column.filteredValue = filter;\n        } else {\n          delete column.filteredValue;\n        }\n\n        return column;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setSorterToColumns\", function () {\n      var sorter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this.columns = _this.columns.map(function (column) {\n        if (column.key == sorter.columnKey) {\n          column.sortOrder = sorter.order;\n        } else {\n          delete column.sortOrder;\n        }\n\n        return column;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPagination\", function (pagination) {\n      _this.pagination = {\n        pageSize: pagination.pageSize,\n        page: pagination.current - 1\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTableChange\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(pagination, filters, sorter) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this.setFiltersToColumns(filters);\n\n                _this.setSorterToColumns(sorter);\n\n                _this.setPagination(pagination);\n\n                _this.reload();\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"buildFetchData\", function () {\n      var params = {\n        filters: [],\n        sorting: [],\n        pageSize: _this.pagination.pageSize,\n        page: _this.pagination.page\n      };\n\n      _this.columns.map(function (column) {\n        if (column.filteredValue) {\n          params.filters = [].concat(_toConsumableArray(params.filters), _toConsumableArray(column.filteredValue));\n        }\n\n        if (column.sortOrder) {\n          params.sorting.push({\n            field: column.field,\n            direction: column.sortOrder == \"ascend\" ? \"asc\" : \"desc\"\n          });\n        }\n      });\n\n      return params;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPagination\", function () {\n      var pagination = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _this$pagination2 = _this.pagination,\n          pageSize = _this$pagination2.pageSize,\n          page = _this$pagination2.page;\n      return _objectSpread(_objectSpread({}, pagination), {}, {\n        total: _this.total,\n        position: 'bottom',\n        pageSize: pageSize || 50,\n        current: page + 1,\n        showSizeChanger: true,\n        pageSizeOptions: ['2', '10', '50', '100', '200', '500']\n      });\n    });\n\n    _this.initialProps = {\n      bordered: true,\n      size: 'middle',\n      showHeader: true,\n      hasData: true\n    };\n    _this.state = {\n      loading: false,\n      reload: false\n    };\n    _this.pagination = {};\n    _this.total = _this.props.total || 100;\n    _this.data = _this.props.data;\n    _this.handleTableChange = _this.handleTableChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\r\n   * Khởi tạo các options từ query trên url\r\n   */\n\n\n  _createClass(GridTable, [{\n    key: \"init\",\n    value: function init() {\n      var query = this.props.router.query;\n      var defaultOptions = GridTable.getDataFromQuery(query, this.props);\n      this.pagination = {\n        pageSize: defaultOptions.pageSize || 50,\n        page: defaultOptions.page || 0\n      };\n      this.columns = this.props.columns;\n      this.defaultOptionToColumns(defaultOptions);\n    }\n    /**\r\n     * Convert lại dữ liệu từ query đổi sang đúng format của column trong antd\r\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.init();\n      this.setState({\n        reload: !this.state.reload\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      //update data trong trường hợp đổi từ props bên ngoài\n      if (JSON.stringify(prevProps.data) !== JSON.stringify(this.props.data)) {\n        this.data = this.props.data;\n      }\n\n      if (JSON.stringify(this.props.router.query) != JSON.stringify(prevProps.router.query)) {\n        this.init();\n        this.setState({\n          reload: !this.state.reload\n        }); //chỉ cần render lại view\n      }\n    }\n  }, {\n    key: \"reload\",\n\n    /**\r\n     * Reload Table\r\n     */\n    value: function () {\n      var _reload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var params, queryOptions, result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.setState({\n                  loading: true\n                });\n\n                if (!(typeof this.props.fetchData === 'function')) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                params = this.buildFetchData();\n                queryOptions = GridTable.makeQuery(params); // console.log(params, queryOptions)\n\n                addQuery({\n                  filters: queryOptions\n                });\n                _context3.next = 7;\n                return this.props.fetchData(params);\n\n              case 7:\n                _context3.t0 = _context3.sent;\n\n                if (_context3.t0) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                _context3.t0 = {};\n\n              case 10:\n                result = _context3.t0;\n                if (result.total != undefined) this.total = result.total;\n                this.data = _.get(result, 'data', []);\n\n              case 13:\n                this.setState({\n                  loading: false\n                });\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function reload() {\n        return _reload.apply(this, arguments);\n      }\n\n      return reload;\n    }()\n    /**\r\n     * Set filter từ table vào biến this.columns để controlled\r\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _this$props$hasData = _this$props.hasData,\n          hasData = _this$props$hasData === void 0 ? true : _this$props$hasData,\n          _this$props$data = _this$props.data,\n          data = _this$props$data === void 0 ? [] : _this$props$data,\n          ellipsis = _this$props.ellipsis,\n          fetchData = _this$props.fetchData,\n          columns = _this$props.columns,\n          pagination = _this$props.pagination,\n          otherProps = _objectWithoutProperties(_this$props, [\"hasData\", \"data\", \"ellipsis\", \"fetchData\", \"columns\", \"pagination\"]);\n\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }\n      }, __jsx(Table, _extends({}, this.initialProps, {\n        // tableLayout=\"fixed\"\n        scroll: {\n          x: 900,\n          scrollToFirstRowOnChange: true\n        }\n      }, otherProps, {\n        columns: this.columns,\n        dataSource: hasData ? this.data.map(function (row) {\n          return _objectSpread(_objectSpread({}, row), {}, {\n            key: row.id\n          });\n        }) : null,\n        onChange: this.handleTableChange,\n        loading: this.state.loading,\n        pagination: this.getPagination(pagination),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 17\n        }\n      })));\n    }\n  }], [{\n    key: \"makeQuery\",\n    value: function makeQuery(options) {\n      var _options$filters = options.filters,\n          filters = _options$filters === void 0 ? [] : _options$filters,\n          _options$sorting = options.sorting,\n          sorting = _options$sorting === void 0 ? [] : _options$sorting,\n          pageSize = options.pageSize,\n          page = options.page;\n      var queryObj = {\n        f: [],\n        s: {},\n        ps: pageSize,\n        p: page\n      };\n\n      var _iterator = _createForOfIteratorHelper(filters),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var filter = _step.value;\n          queryObj.f.push([filter.field, filter.operator || 'contains', filter.value]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(sorting),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var sort = _step2.value;\n          queryObj.s[sort.field] = sort.direction;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return Base64.encode(JSON.stringify(queryObj));\n    }\n    /**\r\n     * Khai báo các function cho dropdown search box\r\n     */\n\n  }, {\n    key: \"getDataFromQuery\",\n    value: function getDataFromQuery() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryObj = query.filters || {};\n\n      if (typeof query.filters == 'string') {\n        try {\n          queryObj = JSON.parse(Base64.decode(query.filters));\n        } catch (e) {\n          throw new Error(\"filters params invalid format.\");\n        }\n      }\n\n      if (!queryObj) return {};\n      var filters = queryObj.f || [];\n      var sorting = queryObj.s || {};\n      var queryOut = {\n        filters: defaultOptions.filters || [],\n        sorting: defaultOptions.sorting || [],\n        pageSize: queryObj.ps || defaultOptions.pageSize,\n        page: queryObj.p || defaultOptions.page\n      };\n\n      var _iterator3 = _createForOfIteratorHelper(filters),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var filter = _step3.value;\n          queryOut.filters.push({\n            field: filter[0],\n            operator: filter[1],\n            value: filter[2]\n          });\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      for (var field in sorting) {\n        queryOut.sorting.push({\n          field: field,\n          direction: sorting[field]\n        });\n      }\n\n      return queryOut;\n    }\n  }, {\n    key: \"getOptions\",\n    value: function getOptions(query, defaultOptions) {\n      if (query && Object.keys(query).length > 0) return this.getDataFromQuery(query, defaultOptions);\n      return defaultOptions;\n    }\n    /**\r\n     * Build data từ this.columns để khớp với format trên server\r\n     */\n\n  }]);\n\n  return GridTable;\n}(React.Component);\n\nexport default GridTable;","map":{"version":3,"sources":["E:/DATN/nursinghome/themes/components/Table/Table.jsx"],"names":["SearchOutlined","Table","Button","Input","Radio","Divider","addQuery","withRouter","useRouter","Highlighter","Base64","_","FilterInput","DatePicker","GridTable","props","defaultOptions","columns","map","column","field","key","sort","sorting","find","item","direction","sortOrder","filters","filter","length","filteredValue","filterable","getColumnSearchProps","filterDate","filterCheck","text","value","onFilter","record","includes","type","ref","React","createRef","filterDropdown","confirm","setSelectedKeys","confirmFnc","values","currentColumn","c","dataIndex","reload","renderFilter","filterIcon","filtered","color","undefined","onFilterDropdownVisibleChange","visible","visibleSearch","current","onSubmit","pagination","pageSize","page","handleTableChange","sorter","columnKey","order","setFiltersToColumns","setSorterToColumns","setPagination","params","push","total","position","showSizeChanger","pageSizeOptions","initialProps","bordered","size","showHeader","hasData","state","loading","data","bind","query","router","getDataFromQuery","defaultOptionToColumns","init","setState","prevProps","JSON","stringify","fetchData","buildFetchData","queryOptions","makeQuery","result","get","ellipsis","otherProps","x","scrollToFirstRowOnChange","row","id","getPagination","options","queryObj","f","s","ps","p","operator","encode","parse","decode","e","Error","queryOut","Object","keys","Component"],"mappings":"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","sourcesContent":["import { SearchOutlined } from '@ant-design/icons';\r\nimport { Table, Button, Input, Radio, Divider } from 'antd';\r\nimport { addQuery } from 'themes/route'\r\nimport { withRouter, useRouter } from 'next/router'\r\nimport Highlighter from \"react-highlight-words\";\r\nimport { Base64 } from 'js-base64';\r\nimport _ from 'lodash'\r\nimport FilterInput from './SearchComponents/Input'\r\nimport DatePicker from './SearchComponents/DatePicker'\r\n\r\nclass GridTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.initialProps = {\r\n            bordered: true,\r\n            size: 'middle',\r\n            showHeader: true,\r\n            hasData: true,\r\n        }\r\n\r\n        this.state = {\r\n            loading: false,\r\n            reload: false\r\n        }\r\n        this.pagination = {}\r\n        this.total = this.props.total || 100\r\n        this.data = this.props.data\r\n        this.handleTableChange = this.handleTableChange.bind(this)\r\n    }\r\n\r\n    /**\r\n     * Khởi tạo các options từ query trên url\r\n     */\r\n    init() {\r\n        const query = this.props.router.query\r\n        const defaultOptions = GridTable.getDataFromQuery(query, this.props)\r\n        this.pagination = {\r\n            pageSize: defaultOptions.pageSize || 50,\r\n            page: defaultOptions.page || 0,\r\n        }\r\n        this.columns = this.props.columns;\r\n\r\n        this.defaultOptionToColumns(defaultOptions);\r\n    }\r\n\r\n    /**\r\n     * Convert lại dữ liệu từ query đổi sang đúng format của column trong antd\r\n     */\r\n    defaultOptionToColumns = (defaultOptions) => {\r\n        this.columns = this.columns.map(column => {\r\n            //set field\r\n            if(!column.field) column.field = column.key\r\n            \r\n            let sort = defaultOptions.sorting.find(item => item.field === column.field);\r\n            if (sort) {\r\n                let { direction } = sort;\r\n                column.sortOrder = direction === \"asc\" ? 'ascend' : 'descend';\r\n            }\r\n            let filters = defaultOptions.filters.filter(item => item.field === column.field);\r\n            if (filters.length) {\r\n                column.filteredValue = [...filters];\r\n            }\r\n            else {\r\n                delete column.filteredValue\r\n            }\r\n            if (column.filterable) {\r\n                //    delete column.filterable;\r\n                column = { ...column, ...this.getColumnSearchProps(column,'input') }\r\n            }\r\n            if (column.filterDate) {\r\n                //    delete column.filterable;\r\n                column = { ...column, ...this.getColumnSearchProps(column,'date') }\r\n            }\r\n            if (column.filterCheck) {\r\n                column = { \r\n                    ...column, \r\n                    filters:[\r\n                        {text: column.text['0'], value: 0},\r\n                        {text: column.text['1'], value: 1}\r\n                    ],\r\n                    onFilter: (value, record) => record[column.key].includes(value)\r\n                }\r\n            }\r\n            return column;\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        this.init();\r\n        this.setState({reload: !this.state.reload})\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        //update data trong trường hợp đổi từ props bên ngoài\r\n        if (JSON.stringify(prevProps.data) !== JSON.stringify(this.props.data)) {\r\n            this.data = this.props.data;\r\n        }\r\n        if (JSON.stringify(this.props.router.query) != JSON.stringify(prevProps.router.query)) {\r\n            this.init();\r\n            this.setState({reload: !this.state.reload}) //chỉ cần render lại view\r\n        }\r\n    }\r\n\r\n    static makeQuery(options) {\r\n        const { filters = [], sorting = [], pageSize, page } = options\r\n        let queryObj = {\r\n            f: [],\r\n            s: {},\r\n            ps: pageSize,\r\n            p: page\r\n        }\r\n\r\n        for (let filter of filters) {\r\n            queryObj.f.push([filter.field, filter.operator || 'contains', filter.value])\r\n        }\r\n        for (let sort of sorting) {\r\n            queryObj.s[sort.field] = sort.direction\r\n        }\r\n        return Base64.encode(JSON.stringify(queryObj))\r\n    }\r\n\r\n    /**\r\n     * Khai báo các function cho dropdown search box\r\n     */\r\n    getColumnSearchProps = (column,type) => {\r\n        let ref = React.createRef()\r\n        return {\r\n            filterDropdown: ({ confirm, setSelectedKeys }) => {\r\n                let confirmFnc = (values) => {\r\n                    let currentColumn = this.columns.find(c => c.dataIndex === column.dataIndex)\r\n                    setSelectedKeys(values)\r\n                    confirm()\r\n                    this.reload();\r\n                }\r\n                if (column.renderFilter) {\r\n                    return column.renderFilter({ column, confirm: confirmFnc, ref })\r\n                }\r\n                if(type == 'input')\r\n                    return <FilterInput\r\n                        column={column}\r\n                        ref={ref}\r\n                        confirm={confirmFnc}\r\n                    />\r\n                if(type == 'date')\r\n                    return <DatePicker\r\n                        column={column}\r\n                        ref={ref}\r\n                        confirm={confirmFnc}\r\n                    />\r\n                \r\n            },\r\n            filterIcon: filtered => (\r\n                <SearchOutlined style={{ color: filtered ? \"#1890ff\" : undefined }} />\r\n            ),\r\n            onFilterDropdownVisibleChange: visible => {\r\n                if (!visible && column.visibleSearch != visible) {\r\n                    column.visibleSearch = visible\r\n                    if (ref.current) {\r\n                        ref.current.onSubmit();\r\n                    }\r\n                }\r\n                column.visibleSearch = visible\r\n                \r\n            }\r\n        };\r\n    }\r\n\r\n    clearAll = async () => {\r\n        let { pageSize, page } = this.pagination\r\n        await this.handleTableChange({ pageSize, current: page }, {}, {})\r\n    }\r\n\r\n    /**\r\n     * Reload Table\r\n     */\r\n    async reload() {\r\n        this.setState({ loading: true })\r\n        if (typeof this.props.fetchData === 'function') {\r\n            const params = this.buildFetchData()\r\n            \r\n            const queryOptions = GridTable.makeQuery(params)\r\n            // console.log(params, queryOptions)\r\n            addQuery({ filters: queryOptions })\r\n            \r\n            let result = await this.props.fetchData(params) || {}\r\n            if (result.total != undefined) this.total = result.total\r\n            this.data = _.get(result, 'data', []);\r\n        }\r\n        this.setState({ loading: false })\r\n    }\r\n\r\n    /**\r\n     * Set filter từ table vào biến this.columns để controlled\r\n     */\r\n    setFiltersToColumns = (filters = {}) => {\r\n        this.columns = this.columns.map(column => {\r\n            let filter = filters[column.field];\r\n            if (filter) {\r\n                column.filteredValue = filter;\r\n            } else {\r\n                delete column.filteredValue;\r\n            }\r\n            return column;\r\n        })\r\n    }\r\n\r\n    setSorterToColumns = (sorter = {}) => {\r\n        this.columns = this.columns.map(column => {\r\n            if (column.key == sorter.columnKey) {\r\n                column.sortOrder = sorter.order;\r\n            } else {\r\n                delete column.sortOrder;\r\n            }\r\n            return column;\r\n        })\r\n    }\r\n    setPagination = (pagination) => {\r\n        this.pagination = {\r\n            pageSize: pagination.pageSize,\r\n            page: pagination.current - 1\r\n        }\r\n    }\r\n\r\n\r\n    handleTableChange = async (pagination, filters, sorter) => {\r\n        this.setFiltersToColumns(filters);\r\n        this.setSorterToColumns(sorter);\r\n        this.setPagination(pagination);\r\n        this.reload();\r\n    }\r\n\r\n    static getDataFromQuery(query = {}, defaultOptions = {}) {\r\n        let queryObj = query.filters || {}\r\n        if (typeof query.filters == 'string') {\r\n            try {\r\n                queryObj = JSON.parse(Base64.decode(query.filters))\r\n            }\r\n            catch (e) {\r\n                throw new Error(`filters params invalid format.`)\r\n            }\r\n        }\r\n        if (!queryObj) return {}\r\n        let filters = queryObj.f || []\r\n        let sorting = queryObj.s || {}\r\n        let queryOut = {\r\n            filters: defaultOptions.filters || [],\r\n            sorting: defaultOptions.sorting || [],\r\n            pageSize: queryObj.ps || defaultOptions.pageSize,\r\n            page: queryObj.p || defaultOptions.page\r\n        } \r\n\r\n        for (let filter of filters) {\r\n            queryOut.filters.push({\r\n                field: filter[0],\r\n                operator: filter[1],\r\n                value: filter[2]\r\n            })\r\n        }\r\n        for (let field in sorting) {\r\n            queryOut.sorting.push({\r\n                field: field,\r\n                direction: sorting[field]\r\n            })\r\n        }\r\n\r\n        return queryOut;\r\n    }\r\n\r\n    static getOptions(query, defaultOptions) {\r\n        if (query && Object.keys(query).length > 0) return this.getDataFromQuery(query, defaultOptions)\r\n        return defaultOptions\r\n    }\r\n\r\n    /**\r\n     * Build data từ this.columns để khớp với format trên server\r\n     */\r\n    buildFetchData = () => {\r\n        let params = {\r\n            filters: [],\r\n            sorting: [],\r\n            pageSize: this.pagination.pageSize,\r\n            page: this.pagination.page\r\n        }\r\n\r\n        this.columns.map(column => {\r\n            if (column.filteredValue) {\r\n                params.filters = [\r\n                    ...params.filters,\r\n                    ...column.filteredValue\r\n                ]\r\n            }\r\n            if (column.sortOrder) {\r\n                params.sorting.push({\r\n                    field: column.field,\r\n                    direction: column.sortOrder == \"ascend\" ? \"asc\" : \"desc\",\r\n                })\r\n            }\r\n        })\r\n        return params\r\n\r\n    }\r\n\r\n    getPagination = (pagination = {}) => {\r\n        const { pageSize, page } = this.pagination;\r\n        return {\r\n            ...pagination,\r\n            total: this.total,\r\n            position: 'bottom',\r\n            pageSize: pageSize || 50,\r\n            current: page + 1,\r\n            showSizeChanger: true,\r\n            pageSizeOptions: ['2', '10', '50', '100', '200', '500']\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { hasData = true, data = [], ellipsis, fetchData, columns, pagination, ...otherProps } = this.props;\r\n        return (\r\n            <div>\r\n                <Table\r\n                    {...this.initialProps}\r\n                    // tableLayout=\"fixed\"\r\n                    scroll={{\r\n                        x: 900,\r\n                        scrollToFirstRowOnChange: true\r\n                    }}\r\n                    {...otherProps}\r\n                    columns={this.columns}\r\n                    dataSource={hasData ? this.data.map(row => ({ ...row, key: row.id })) : null}\r\n                    onChange={this.handleTableChange}\r\n                    loading={this.state.loading}\r\n                    pagination={this.getPagination(pagination)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridTable"]},"metadata":{},"sourceType":"module"}