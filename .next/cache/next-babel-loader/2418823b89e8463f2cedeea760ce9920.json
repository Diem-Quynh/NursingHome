{"ast":null,"code":"var _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\beds\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport Layout from 'themes/layouts/Admin';\nimport { GridTable, GridTableHelper } from 'themes/components/Table';\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\nimport { Button } from 'antd';\nimport BedService from 'themes/services/api/BedService';\nimport to from 'await-to-js';\nimport React, { useState } from 'react';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\nimport { PlusCircleOutlined, DeleteOutlined } from '@ant-design/icons';\n\nconst formaterStatus = value => {\n  const {\n    t\n  } = useBaseHook();\n  value = Math.round(Number(value));\n  value = value == 0 ? t('beds.empty') : t('beds.full');\n  return `${value}`;\n};\n\nconst Index = ({\n  beds,\n  total\n}) => {\n  const {\n    t,\n    notify,\n    redirect,\n    setStore,\n    getAuth,\n    getStore\n  } = useBaseHook();\n  const {\n    0: hiddenDeleteBtn,\n    1: setHiddenDeleteBtn\n  } = useState(true);\n  const {\n    0: selectedIds,\n    1: setSelectedIds\n  } = useState([]);\n  const bedService = new BedService();\n  const confirmRef = React.createRef();\n  const tableRef = React.createRef();\n  const {\n    checkPermission\n  } = usePermissionHook();\n  const createPer = checkPermission({\n    \"admin.beds\": \"C\"\n  });\n  const deletePer = checkPermission({\n    \"admin.beds\": \"D\"\n  });\n  const columns = [{\n    title: t(\"room\"),\n    dataIndex: 'roomCode',\n    key: 'roomCode',\n    sorter: true,\n    filterable: true,\n    render: (text, record) => __jsx(\"a\", {\n      onClick: () => redirect('frontend.admin.beds.edit', {\n        id: record.id\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, record.roomCode)\n  }, {\n    title: t('beds.bedId'),\n    dataIndex: 'bedId',\n    key: 'bedId'\n  }, {\n    title: t('status'),\n    dataIndex: 'status',\n    sorter: true,\n    key: 'status',\n    render: (text, record) => __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 46\n      }\n    }, formaterStatus(text))\n  }, {\n    title: t(\"note\"),\n    dataIndex: 'note',\n    key: 'note'\n  }];\n\n  const onChangeSelection = data => {\n    if (data.length > 0) {\n      setHiddenDeleteBtn(false);\n    } else {\n      setHiddenDeleteBtn(true);\n    }\n\n    setSelectedIds(data);\n  };\n\n  const fetchData = async values => {\n    let [error, beds] = await to(bedService.index(values));\n\n    if (error) {\n      const {\n        code,\n        message\n      } = error;\n      notify(t(`errors:${code}`), t(message), 'error');\n      return {};\n    }\n\n    return beds;\n  };\n\n  const onDelete = async () => {\n    let [error, result] = await to(bedService.delete({\n      ids: selectedIds\n    }));\n\n    if (error) {\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error');\n    }\n\n    notify(t(\"message.recordDeleted\"));\n\n    if (tableRef.current !== null) {\n      tableRef.current.reload();\n    }\n\n    setSelectedIds([]);\n    setHiddenDeleteBtn(true);\n  };\n\n  const renderDeleteDialog = () => {\n    return __jsx(ConfirmDialog, {\n      ref: confirmRef,\n      onSubmit: onDelete,\n      title: t('deleteItem'),\n      content: t('message.deleteConfirm'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, __jsx(Button, {\n    hidden: !createPer,\n    onClick: () => redirect(\"frontend.admin.beds.create\"),\n    type: \"primary\",\n    className: \"btn-top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, __jsx(PlusCircleOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), t('create')), __jsx(Button, {\n    danger: true,\n    onClick: () => {\n      if (confirmRef.current) confirmRef.current.show();\n    },\n    className: \"btn-top\",\n    hidden: hiddenDeleteBtn || !deletePer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, __jsx(DeleteOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }), t('delete')), __jsx(GridTable, {\n    ref: tableRef,\n    columns: columns,\n    data: beds,\n    rowSelection: {\n      selectedRowKeys: selectedIds,\n      onChange: data => onChangeSelection(data)\n    },\n    fetchData: fetchData,\n    total: total,\n    scroll: {\n      y: 390\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), renderDeleteDialog()));\n};\n\nIndex.getInitialProps = async ctx => {\n  let bedService = new BedService(ctx);\n  let defaultOptions = {\n    filters: [],\n    sorting: []\n  };\n  let query = ctx.query;\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\n  let [error, beds] = await to(bedService.index(filters));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    error: error,\n    beds: useBaseHook.getData(beds, \"data\", []),\n    total: useBaseHook.getData(beds, \"total\", 0),\n    defaultQuery: {\n      filters: GridTableHelper.makeQuery(filters)\n    }\n  };\n};\n\nIndex.permissions = {\n  \"admin.beds\": \"R\"\n};\nexport default Index;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/beds/index.tsx"],"names":["Layout","GridTable","GridTableHelper","ConfirmDialog","Button","BedService","to","React","useState","useBaseHook","usePermissionHook","PlusCircleOutlined","DeleteOutlined","formaterStatus","value","t","Math","round","Number","Index","beds","total","notify","redirect","setStore","getAuth","getStore","hiddenDeleteBtn","setHiddenDeleteBtn","selectedIds","setSelectedIds","bedService","confirmRef","createRef","tableRef","checkPermission","createPer","deletePer","columns","title","dataIndex","key","sorter","filterable","render","text","record","id","roomCode","onChangeSelection","data","length","fetchData","values","error","index","code","message","onDelete","result","delete","ids","current","reload","renderDeleteDialog","show","selectedRowKeys","onChange","y","getInitialProps","ctx","defaultOptions","filters","sorting","query","getOptions","namespacesRequired","getData","defaultQuery","makeQuery","permissions"],"mappings":"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","sourcesContent":["import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper, FilterInput } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button } from 'antd';\r\nimport BedService from 'themes/services/api/BedService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport {PlusCircleOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\nconst formaterStatus = (value: any) => {\r\n  const { t } = useBaseHook();\r\n  value = Math.round(Number(value))\r\n  value = (value == 0 ? t('beds.empty') : t('beds.full'))\r\n  return `${value}`\r\n}\r\n\r\nconst Index = ({ beds, total }: { beds: Bed[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const bedService = new BedService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"admin.beds\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"admin.beds\": \"D\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t(\"room\"),\r\n      dataIndex: 'roomCode',\r\n      key: 'roomCode',\r\n      sorter: true,\r\n      filterable:true,\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.beds.edit', { id: record.id })}>{record.roomCode}</a>\r\n    },\r\n    {\r\n      title: t('beds.bedId'),\r\n      dataIndex: 'bedId',\r\n      key: 'bedId',\r\n    },\r\n    {\r\n      title: t('status'),\r\n      dataIndex: 'status',\r\n      sorter: true,\r\n      key: 'status',\r\n      render: (text: string, record: any) => <div>{formaterStatus(text)}</div>\r\n    },\r\n    {\r\n      title: t(\"note\"),\r\n      dataIndex: 'note',\r\n      key: 'note',\r\n    },\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, beds]: any[] = await to(bedService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return beds\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(bedService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.beds.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      \r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={beds}\r\n        rowSelection={{selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n        scroll={{ y:390 }}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let bedService = new BedService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, beds]: any[] = await to(bedService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\r\n    error: error,\r\n    beds: useBaseHook.getData(beds, \"data\", []),\r\n    total: useBaseHook.getData(beds, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"admin.beds\": \"R\"\r\n};\r\nexport default Index"]},"metadata":{},"sourceType":"module"}