{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Typography, Checkbox } from 'antd';\nimport { Table } from 'antd';\nimport UserPermissionService from 'themes/services/api/UserPermissionService';\nimport UserGroupPermissionService from 'themes/services/api/UserGroupPermissionService';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { LeftCircleFilled, SaveFilled } from '@ant-design/icons';\nconst {\n  Title,\n  Text\n} = Typography;\n\nconst Role = ({\n  permissionCategories,\n  groupId,\n  groupName\n}) => {\n  let result = {};\n  const {\n    t,\n    notify,\n    redirect,\n    router\n  } = useBaseHook();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const userGroupPermissionService = new UserGroupPermissionService();\n\n  const onFinish = async values => {\n    setLoading(true);\n    let [error, result] = await to(userGroupPermissionService.update({\n      permissions: values,\n      groupId: groupId\n    }));\n    setLoading(false);\n\n    if (error) {\n      return notify(t(`errors:${error.code}`), t(error.message), 'error');\n    }\n\n    notify(t(\"message.recordCreated\"));\n    redirect(\"frontend.admin.userGroups.index\");\n  };\n\n  const renderCheckbox = (row, permission) => {\n    function onChange(e) {\n      e.target.checked ? row.value += permission : row.value -= permission;\n      result[row.key] = row.value;\n    }\n\n    const checked = (row.value & permission) === permission;\n    const disabled = (row.avalibleValue & permission) !== permission;\n    return __jsx(Checkbox, {\n      defaultChecked: checked,\n      disabled: disabled,\n      onChange: onChange\n    });\n  };\n\n  const renderPermissionCategory = category => {\n    const columns = [{\n      title: \"#\",\n      // dataIndex: 'id',\n      key: 'id',\n      width: '5%'\n    }, {\n      title: category.name,\n      // dataIndex: 'name',\n      key: 'name'\n    }, {\n      title: t(\"create\"),\n      dataIndex: 'value',\n      key: 'valueC',\n      width: '10%',\n      render: (value, row) => renderCheckbox(row, 8)\n    }, {\n      title: t(\"view\"),\n      dataIndex: 'value',\n      key: 'valueR',\n      width: '10%',\n      render: (value, row) => renderCheckbox(row, 4)\n    }, {\n      title: t(\"edit\"),\n      dataIndex: 'value',\n      key: 'valueU',\n      width: '10%',\n      render: (value, row) => renderCheckbox(row, 2)\n    }, {\n      title: t(\"delete\"),\n      dataIndex: 'value',\n      key: 'valueD',\n      width: '10%',\n      render: (value, row) => renderCheckbox(row, 1)\n    }];\n    return __jsx(Table, {\n      size: \"small\",\n      key: category.id,\n      columns: columns,\n      dataSource: [category],\n      pagination: false\n    });\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(\"div\", {\n    style: {\n      fontSize: \"17px\",\n      marginBottom: \"15px\"\n    }\n  }, t('group'), \": \", groupName), permissionCategories.map(g => renderPermissionCategory(g)), __jsx(\"div\", {\n    style: {\n      marginTop: \"24px\",\n      textAlign: \"center\"\n    }\n  }, __jsx(Button, {\n    onClick: () => router.back(),\n    style: {\n      marginRight: 8\n    }\n  }, __jsx(LeftCircleFilled, null), \" \", t('cancel')), __jsx(Button, {\n    onClick: () => onFinish(result),\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    style: {\n      marginRight: 8\n    }\n  }, __jsx(SaveFilled, null), \" \", t('submit')))));\n};\n\nRole.getInitialProps = async ctx => {\n  const userPermissionService = new UserPermissionService(ctx);\n  const query = ctx.query;\n  let error;\n\n  if (!query.id) {\n    error = {\n      code: 9996,\n      message: 'missing ID'\n    };\n  }\n\n  let [permissionError, permissionCategories] = await to(userPermissionService.getByGroupId({\n    groupId: query.id\n  }));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    error: error,\n    permissionCategories: permissionCategories,\n    groupId: query.id,\n    groupName: query.name\n  };\n};\n\nRole.permissions = {\n  \"root\": \"U\"\n};\nexport default Role;","map":{"version":3,"sources":["E:/nursinghome_github/pages/admin/userGroups/role.tsx"],"names":["React","useState","Layout","Button","Typography","Checkbox","Table","UserPermissionService","UserGroupPermissionService","to","useBaseHook","LeftCircleFilled","SaveFilled","Title","Text","Role","permissionCategories","groupId","groupName","result","t","notify","redirect","router","loading","setLoading","userGroupPermissionService","onFinish","values","error","update","permissions","code","message","renderCheckbox","row","permission","onChange","e","target","checked","value","key","disabled","avalibleValue","renderPermissionCategory","category","columns","title","width","name","dataIndex","render","id","fontSize","marginBottom","map","g","marginTop","textAlign","back","marginRight","getInitialProps","ctx","userPermissionService","query","permissionError","getByGroupId","namespacesRequired"],"mappings":"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","sourcesContent":["import ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\n\r\nimport React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Row, Col, Form, Input, Select, Typography, Checkbox } from 'antd';\r\nimport { Table } from 'antd';\r\nimport { AppstoreOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport UserPermissionService from 'themes/services/api/UserPermissionService';\r\nimport UserGroupPermissionService from 'themes/services/api/UserGroupPermissionService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { LeftCircleFilled, SaveFilled, DeleteFilled } from '@ant-design/icons';\r\nimport BreadCrumb from 'themes/components/Breadcumb'\r\nimport { getInputClassName } from 'antd/lib/input/Input';\r\nconst { Title, Text } = Typography;\r\n\r\nconst Role = ({ permissionCategories, groupId, groupName }: { permissionCategories: PermissionCategories[], groupId: number, groupName: string }) => {\r\n  let result: any = {}\r\n  const { t, notify, redirect, router } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const userGroupPermissionService = new UserGroupPermissionService()\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    setLoading(true)\r\n    let [error, result]: any[] = await to(userGroupPermissionService.update({\r\n      permissions: values,\r\n      groupId: groupId\r\n    }));\r\n    setLoading(false)\r\n\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(error.message), 'error')\r\n    }\r\n    notify(t(\"message.recordCreated\"))\r\n    redirect(\"frontend.admin.userGroups.index\")\r\n  }\r\n\r\n  const renderCheckbox = (row: any, permission: number) => {\r\n    function onChange(e: any) {\r\n      e.target.checked ? row.value += permission : row.value -= permission;\r\n      result[row.key] = row.value\r\n    }\r\n    const checked = (row.value & permission) === permission\r\n    const disabled = (row.avalibleValue & permission) !== permission\r\n    return <Checkbox defaultChecked={checked} disabled={disabled} onChange={onChange}></Checkbox>\r\n  }\r\n\r\n  const renderPermissionCategory = (category: any) => {\r\n    const columns = [\r\n      {\r\n        title: \"#\",\r\n        // dataIndex: 'id',\r\n        key: 'id',\r\n        width: '5%',\r\n      },\r\n      {\r\n        title: category.name,\r\n        // dataIndex: 'name',\r\n        key: 'name',\r\n\r\n      },\r\n      {\r\n        title: t(\"create\"),\r\n        dataIndex: 'value',\r\n        key: 'valueC',\r\n        width: '10%',\r\n        render: (value: any, row: any) => renderCheckbox(row, 8)\r\n      },\r\n      {\r\n        title: t(\"view\"),\r\n        dataIndex: 'value',\r\n        key: 'valueR',\r\n        width: '10%',\r\n        render: (value: any, row: any) => renderCheckbox(row, 4)\r\n      },\r\n      {\r\n        title: t(\"edit\"),\r\n        dataIndex: 'value',\r\n        key: 'valueU',\r\n        width: '10%',\r\n        render: (value: any, row: any) => renderCheckbox(row, 2)\r\n      },\r\n      {\r\n        title: t(\"delete\"),\r\n        dataIndex: 'value',\r\n        key: 'valueD',\r\n        width: '10%',\r\n        render: (value: any, row: any) => renderCheckbox(row, 1)\r\n      }\r\n    ];\r\n    return <Table size=\"small\" key={category.id} columns={columns} dataSource={[category]} pagination={false} />\r\n  }\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <div style={{ fontSize: \"17px\", marginBottom: \"15px\" }}>{t('group')}: { groupName }</div>\r\n      {permissionCategories.map((g: any) => renderPermissionCategory(g))}\r\n      <div style={{ marginTop: \"24px\", textAlign: \"center\"}}>\r\n        <Button onClick={() => router.back()} style={{ marginRight: 8 }}>\r\n          <LeftCircleFilled /> {t('cancel')}\r\n        </Button>\r\n        <Button onClick={() => onFinish(result)} type=\"primary\" htmlType=\"submit\" loading={loading} style={{ marginRight: 8 }}>\r\n          <SaveFilled /> {t('submit')}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n\r\n  </Layout>\r\n}\r\n\r\nRole.getInitialProps = async (ctx: any) => {\r\n  const userPermissionService = new UserPermissionService(ctx)\r\n  const query = ctx.query;\r\n  let error: any;\r\n\r\n  if (!query.id) {\r\n    error = {\r\n      code: 9996,\r\n      message: 'missing ID'\r\n    }\r\n  }\r\n\r\n  let [permissionError, permissionCategories] = await to(userPermissionService.getByGroupId({ groupId: query.id }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    error: error,\r\n    permissionCategories: permissionCategories,\r\n    groupId: query.id,\r\n    groupName: query.name\r\n  }\r\n}\r\nRole.permissions = {\r\n  \"root\": \"U\"\r\n}\r\nexport default Role"]},"metadata":{},"sourceType":"module"}