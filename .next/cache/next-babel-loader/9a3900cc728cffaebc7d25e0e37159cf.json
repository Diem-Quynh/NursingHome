{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\rooms\\\\create.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Input, Select, Typography } from 'antd';\nimport RoomService from 'themes/services/api/RoomService';\nimport _ from 'lodash';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { LeftCircleFilled, SaveFilled } from '@ant-design/icons';\nvar Title = Typography.Title,\n    Text = Typography.Text;\nvar Option = Select.Option;\nvar formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 18\n    }\n  }\n};\n\nvar Create = function Create() {\n  var _useBaseHook = useBaseHook(),\n      t = _useBaseHook.t,\n      notify = _useBaseHook.notify,\n      redirect = _useBaseHook.redirect,\n      router = _useBaseHook.router;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var roomService = new RoomService(); //submit form\n\n  var onFinish = function onFinish(values) {\n    var rePassword, otherValues, _await$to, _await$to2, error, result;\n\n    return _regeneratorRuntime.async(function onFinish$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            rePassword = values.rePassword, otherValues = _objectWithoutProperties(values, [\"rePassword\"]);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(to(roomService.create(otherValues)));\n\n          case 4:\n            _await$to = _context.sent;\n            _await$to2 = _slicedToArray(_await$to, 2);\n            error = _await$to2[0];\n            result = _await$to2[1];\n            setLoading(false);\n\n            if (!error) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\", notify(t(\"errors:\".concat(error.code)), t(error.message), 'error'));\n\n          case 11:\n            notify(t(\"message.recordCreated\"));\n            redirect(\"frontend.admin.rooms.index\");\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    name: \"createRoom\",\n    initialValues: {\n      code: \"\",\n      bedNumber: 0,\n      note: \"\"\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), __jsx(Form.Item, {\n    label: t(\"code\"),\n    name: \"code\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"bedNumber\"),\n    name: \"bedNumber\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"note\"),\n    name: \"note\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return router.back();\n    },\n    style: {\n      marginRight: 8\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, __jsx(LeftCircleFilled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), \" \", t('cancel')), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    style: {\n      marginRight: 8\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, __jsx(SaveFilled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), \" \", t('submit'))))));\n};\n\nCreate.getInitialProps = function _callee(ctx) {\n  var roomService, _await$to3, _await$to4, error, rooms;\n\n  return _regeneratorRuntime.async(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          roomService = new RoomService(ctx);\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(to(roomService.index({\n            pageSize: -1\n          })));\n\n        case 3:\n          _await$to3 = _context2.sent;\n          _await$to4 = _slicedToArray(_await$to3, 2);\n          error = _await$to4[0];\n          rooms = _await$to4[1];\n          return _context2.abrupt(\"return\", {\n            namespacesRequired: ['common', 'pages', 'menu'],\n            error: error,\n            groups: _.get(rooms, \"data\", [])\n          });\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nCreate.permissions = {\n  \"admin.userGroups\": \"C\"\n};\nexport default Create;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/rooms/create.tsx"],"names":["React","useState","Layout","Button","Form","Input","Select","Typography","RoomService","_","to","useBaseHook","LeftCircleFilled","SaveFilled","Title","Text","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","Create","t","notify","redirect","router","loading","setLoading","useForm","form","roomService","onFinish","values","rePassword","otherValues","create","error","result","code","message","bedNumber","note","required","textAlign","back","marginRight","getInitialProps","ctx","index","pageSize","rooms","namespacesRequired","groups","get","permissions"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Row, Col, Form, Input, Select, Typography } from 'antd';\r\nimport RoomService from 'themes/services/api/RoomService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { LeftCircleFilled, SaveFilled } from '@ant-design/icons';\r\nimport BreadCrumb from 'themes/components/Breadcumb'\r\nconst { Title, Text } = Typography;\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 18 },\r\n  },\r\n};\r\n\r\n\r\nconst Create = () => {\r\n  const { t, notify, redirect, router } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const roomService = new RoomService()\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    setLoading(true)\r\n    let { rePassword, ...otherValues } = values;\r\n    let [error, result]: any[] = await to(roomService.create(otherValues));\r\n    setLoading(false)\r\n\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(error.message), 'error')\r\n    }\r\n    notify(t(\"message.recordCreated\"))\r\n    redirect(\"frontend.admin.rooms.index\")\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"createRoom\"\r\n        initialValues={{\r\n          code: \"\",\r\n          bedNumber: 0,\r\n          note: \"\",\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"code\")}\r\n          name=\"code\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={t(\"bedNumber\")}\r\n          name=\"bedNumber\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={t(\"note\")}\r\n          name=\"note\"\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: \"center\" }}>\r\n          <Button onClick={() => router.back()} style={{ marginRight: 8 }}>\r\n            <LeftCircleFilled /> {t('cancel')}\r\n          </Button>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading} style={{ marginRight: 8 }}>\r\n            <SaveFilled /> {t('submit')}\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nCreate.getInitialProps = async (ctx: any) => {\r\n  const roomService = new RoomService(ctx)\r\n  const [error, rooms] = await to(roomService.index({ pageSize: -1 }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu'],\r\n    error: error,\r\n    groups: _.get(rooms, \"data\", []),\r\n  }\r\n}\r\nCreate.permissions = {\r\n  \"admin.userGroups\": \"C\"\r\n}\r\nexport default Create"]},"metadata":{},"sourceType":"module"}