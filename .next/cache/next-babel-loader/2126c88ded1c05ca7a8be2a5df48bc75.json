{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\nursingAssignments\\\\edit.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Input, Select, DatePicker } from 'antd';\nimport NursingAssignService from 'themes/services/api/NursingAssignmentService';\nimport PatientService from 'themes/services/api/PatientService';\nimport UserService from 'themes/services/api/UserService';\nimport _ from 'lodash';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { DeleteFilled, SaveFilled, LeftCircleFilled } from '@ant-design/icons';\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\nimport moment from 'moment'; // import locale from 'antd/lib/date-picker/locale/vi_VN';\n\nvar Option = Select.Option;\nvar formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 18\n    }\n  }\n};\n\nvar Edit = function Edit(_ref) {\n  _s();\n\n  var patients = _ref.patients,\n      users = _ref.users,\n      nursingAssign = _ref.nursingAssign;\n\n  var _useBaseHook = useBaseHook(),\n      t = _useBaseHook.t,\n      notify = _useBaseHook.notify,\n      redirect = _useBaseHook.redirect,\n      setStore = _useBaseHook.setStore,\n      getAuth = _useBaseHook.getAuth,\n      getStore = _useBaseHook.getStore;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var nursingAssignService = new NursingAssignService();\n  var confirmRef = React.createRef();\n\n  var _usePermissionHook = usePermissionHook(),\n      checkPermission = _usePermissionHook.checkPermission;\n\n  var deletePer = checkPermission({\n    \"admin.nursingAssignments\": \"D\"\n  }); //submit form\n\n  var onFinish = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var _yield$to, _yield$to2, error, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.next = 3;\n              return to(nursingAssignService.edit({\n                id: nursingAssign.id,\n                values: values\n              }));\n\n            case 3:\n              _yield$to = _context.sent;\n              _yield$to2 = _slicedToArray(_yield$to, 2);\n              error = _yield$to2[0];\n              result = _yield$to2[1];\n              setLoading(false);\n\n              if (!error) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", notify(t(\"errors:\".concat(error.code)), t(error.message), 'error'));\n\n            case 10:\n              notify(t(\"message.recordUpdated\"));\n              redirect(\"frontend.admin.nursingAssignments.index\");\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onFinish(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onDelete = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _yield$to3, _yield$to4, error, result;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return to(nursingAssignService[\"delete\"]({\n                ids: [nursingAssign.id]\n              }));\n\n            case 2:\n              _yield$to3 = _context2.sent;\n              _yield$to4 = _slicedToArray(_yield$to3, 2);\n              error = _yield$to4[0];\n              result = _yield$to4[1];\n\n              if (!error) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", notify(t(\"errors:\".concat(error.code)), t(\"\".concat(error.message)), 'error'));\n\n            case 8:\n              notify(t('message.recordDeleted'));\n              redirect(\"frontend.admin.nursingAssignments.index\");\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onDelete() {\n      return _ref3.apply(this, arguments);\n    };\n  }(); //render option\n\n\n  var renderOptionPatient = function renderOptionPatient() {\n    var result = [];\n    patients.map(function (item) {\n      result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }\n      }, item.fullname, \" - \", item.roomCode, \" - \", item.bedCode));\n    });\n    return result;\n  };\n\n  var renderOptionUser = function renderOptionUser() {\n    var result = [];\n    users.map(function (item) {\n      item.position = item.position ? item.position.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : \"\";\n      if (item.position == \"Bác sỹ\") result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }\n      }, item.code, \" - \", item.fullname));\n    });\n    return result;\n  };\n\n  var renderDeleteDialog = function renderDeleteDialog() {\n    return __jsx(ConfirmDialog, {\n      ref: confirmRef,\n      onSubmit: onDelete,\n      title: t('deleteItem'),\n      content: t('message.deleteConfirm'),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    name: \"createPatient\",\n    initialValues: {\n      nurseId: nursingAssign.nurseId,\n      patientId: nursingAssign.patientId,\n      dateBegin: nursingAssign.dateBegin ? moment(nursingAssign.dateBegin) : \"\",\n      dateEnd: nursingAssign.dateEnd ? moment(nursingAssign.dateEnd) : \"\",\n      note: nursingAssign.note\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }), __jsx(Form.Item, {\n    label: t(\"nursingAssignments.nurseCode\"),\n    name: \"nurseId\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, __jsx(Select, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, renderOptionUser())), __jsx(Form.Item, {\n    label: t(\"nursingAssignments.patientCode\"),\n    name: \"patientId\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, __jsx(Select, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, renderOptionPatient())), __jsx(Form.Item, {\n    label: t(\"nursingAssignments.dateBegin\"),\n    name: \"dateBegin\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"nursingAssignments.dateEnd\"),\n    name: \"dateEnd\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"note\"),\n    name: \"note\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return redirect(\"frontend.admin.nursingAssignments.index\");\n    },\n    style: {\n      marginRight: 8\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, __jsx(LeftCircleFilled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }), \" \", t('cancel')), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    style: {\n      marginRight: 8\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, __jsx(SaveFilled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }), \" \", t('submit')), __jsx(Button, {\n    hidden: !deletePer,\n    danger: true,\n    onClick: function onClick() {\n      if (confirmRef.current) confirmRef.current.show(nursingAssign.id);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }, __jsx(DeleteFilled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }), \" \", t('deleteItem')))), renderDeleteDialog()));\n};\n\n_s(Edit, \"iUB1GndivFDhzIDYimUOdud+Mtc=\", false, function () {\n  return [useBaseHook, Form.useForm, usePermissionHook];\n});\n\n_c = Edit;\n\nEdit.getInitialProps = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ctx) {\n    var nursingAssignService, patientService, userService, query, error, _yield$to5, _yield$to6, nursingAssignError, nursingAssign, _yield$to7, _yield$to8, errorPatient, patients, _yield$to9, _yield$to10, errorUser, users;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            nursingAssignService = new NursingAssignService(ctx);\n            patientService = new PatientService(ctx);\n            userService = new UserService(ctx);\n            query = ctx.query;\n\n            if (!query.id) {\n              //error missing id\n              error = {\n                code: 9996,\n                message: 'missing ID'\n              };\n            }\n\n            _context3.next = 7;\n            return to(nursingAssignService.detail({\n              id: query.id\n            }));\n\n          case 7:\n            _yield$to5 = _context3.sent;\n            _yield$to6 = _slicedToArray(_yield$to5, 2);\n            nursingAssignError = _yield$to6[0];\n            nursingAssign = _yield$to6[1];\n            _context3.next = 13;\n            return to(patientService.index({\n              pageSize: -1\n            }));\n\n          case 13:\n            _yield$to7 = _context3.sent;\n            _yield$to8 = _slicedToArray(_yield$to7, 2);\n            errorPatient = _yield$to8[0];\n            patients = _yield$to8[1];\n            _context3.next = 19;\n            return to(userService.index({\n              pageSize: -1\n            }));\n\n          case 19:\n            _yield$to9 = _context3.sent;\n            _yield$to10 = _slicedToArray(_yield$to9, 2);\n            errorUser = _yield$to10[0];\n            users = _yield$to10[1];\n            return _context3.abrupt(\"return\", {\n              namespacesRequired: ['common', 'pages', 'menu'],\n              error: error,\n              nursingAssign: nursingAssign,\n              patients: _.get(patients, \"data\", []),\n              users: _.get(users, \"data\", [])\n            });\n\n          case 24:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nEdit.permissions = {\n  \"admin.doctorAssignments\": \"U\"\n};\nexport default Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/nursingAssignments/edit.tsx"],"names":["ConfirmDialog","React","useState","Layout","Button","Form","Input","Select","DatePicker","NursingAssignService","PatientService","UserService","_","to","useBaseHook","DeleteFilled","SaveFilled","LeftCircleFilled","usePermissionHook","moment","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","Edit","patients","users","nursingAssign","t","notify","redirect","setStore","getAuth","getStore","loading","setLoading","modalVisible","setModalVisible","useForm","form","nursingAssignService","confirmRef","createRef","checkPermission","deletePer","onFinish","values","edit","id","error","result","code","message","onDelete","ids","renderOptionPatient","map","item","push","fullname","roomCode","bedCode","renderOptionUser","position","replace","renderDeleteDialog","nurseId","patientId","dateBegin","dateEnd","note","required","textAlign","marginRight","current","show","getInitialProps","ctx","patientService","userService","query","detail","nursingAssignError","index","pageSize","errorPatient","errorUser","namespacesRequired","get","permissions"],"mappings":"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","sourcesContent":["import ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\n\r\nimport React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Form, Input, Select, DatePicker } from 'antd';\r\nimport NursingAssignService from 'themes/services/api/NursingAssignmentService';\r\nimport PatientService from 'themes/services/api/PatientService';\r\nimport UserService from 'themes/services/api/UserService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { DeleteFilled, SaveFilled, LeftCircleFilled, CopyFilled } from '@ant-design/icons';\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nimport moment from 'moment'\r\n// import locale from 'antd/lib/date-picker/locale/vi_VN';\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 18 },\r\n  },\r\n};\r\n\r\nconst Edit = ({ patients, users, nursingAssign }: { patients: Patient[], users : User[], nursingAssign: NursingAssignment }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [modalVisible, setModalVisible] = useState(false)\r\n  const [form] = Form.useForm();\r\n  const nursingAssignService = new NursingAssignService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n\r\n  const { checkPermission } = usePermissionHook();\r\n  const deletePer = checkPermission({\r\n    \"admin.nursingAssignments\": \"D\"\r\n  })\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    setLoading(true)\r\n    let [error, result]: any[] = await to(nursingAssignService.edit({\r\n      id: nursingAssign.id,\r\n      values\r\n    }));\r\n    setLoading(false)\r\n\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(error.message), 'error')\r\n    }\r\n    notify(t(\"message.recordUpdated\"))\r\n    redirect(\"frontend.admin.nursingAssignments.index\")\r\n  }\r\n\r\n  const onDelete = async (): Promise<void> => {\r\n    let [error, result]: any[] = await to(nursingAssignService.delete({ ids: [nursingAssign.id] }));\r\n\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t('message.recordDeleted'))\r\n    redirect(\"frontend.admin.nursingAssignments.index\")\r\n  }\r\n\r\n  //render option\r\n  const renderOptionPatient = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    patients.map(item => {\r\n      result.push(\r\n      <Option value={item.id} key={item.id}>{item.fullname} - {item.roomCode} - {item.bedCode}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n\r\n  const renderOptionUser = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    users.map(item => {\r\n      item.position = item.position? item.position.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : \"\"\r\n      if(item.position == \"Bác sỹ\")\r\n      result.push(\r\n      <Option value={item.id} key={item.id}>{item.code} - {item.fullname}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"createPatient\"\r\n        initialValues={{\r\n          nurseId: nursingAssign.nurseId,\r\n          patientId: nursingAssign.patientId,\r\n          dateBegin: nursingAssign.dateBegin ? moment(nursingAssign.dateBegin) : \"\",\r\n          dateEnd: nursingAssign.dateEnd ? moment(nursingAssign.dateEnd) : \"\",\r\n          note: nursingAssign.note\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"nursingAssignments.nurseCode\")}\r\n          name=\"nurseId\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select>\r\n            {renderOptionUser()}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"nursingAssignments.patientCode\")}\r\n          name=\"patientId\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select>\r\n            {renderOptionPatient()}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"nursingAssignments.dateBegin\")}\r\n          name=\"dateBegin\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'}  />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"nursingAssignments.dateEnd\")}\r\n          name=\"dateEnd\"\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"note\")}\r\n          name=\"note\"\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: \"center\" }}>\r\n          <Button onClick={() => redirect(\"frontend.admin.nursingAssignments.index\")} style={{ marginRight: 8 }}>\r\n            <LeftCircleFilled /> {t('cancel')}\r\n          </Button>\r\n\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading} style={{ marginRight: 8 }}>\r\n            <SaveFilled /> {t('submit')}\r\n          </Button>\r\n          \r\n          <Button hidden={!deletePer} danger onClick={() => { \r\n              if (confirmRef.current) confirmRef.current.show(nursingAssign.id) \r\n            }}>\r\n            <DeleteFilled /> {t('deleteItem')}\r\n          </Button>\r\n         \r\n        </Form.Item>\r\n      </Form>\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nEdit.getInitialProps = async (ctx: any) => {\r\n  const nursingAssignService = new NursingAssignService(ctx)\r\n  const patientService = new PatientService(ctx)\r\n  const userService = new UserService(ctx)\r\n  const query = ctx.query;\r\n  let error: any;\r\n\r\n  if (!query.id) {\r\n    //error missing id\r\n    error = {\r\n      code: 9996,\r\n      message: 'missing ID'\r\n    }\r\n  }\r\n\r\n  let [nursingAssignError, nursingAssign] = await to(nursingAssignService.detail({ id: query.id }));\r\n  const [errorPatient, patients] = await to(patientService.index({ pageSize: -1 }));\r\n  const [errorUser, users] = await to(userService.index({ pageSize: -1 }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu'],\r\n    error: error,\r\n    nursingAssign: nursingAssign,\r\n    patients: _.get(patients, \"data\", []),\r\n    users: _.get(users, \"data\", [])\r\n  }\r\n}\r\nEdit.permissions = {\r\n  \"admin.doctorAssignments\": \"U\"\r\n};\r\nexport default Edit"]},"metadata":{},"sourceType":"module"}