{"ast":null,"code":"var _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\userGroups\\\\edit.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Input, Select, Typography } from 'antd';\nimport UserGroupService from 'themes/services/api/UserGroupService';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { LeftCircleFilled, SaveFilled, DeleteFilled } from '@ant-design/icons';\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\nconst {\n  Title,\n  Text\n} = Typography;\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 18\n    }\n  }\n};\n\nconst Edit = ({\n  group\n}) => {\n  const {\n    t,\n    notify,\n    redirect,\n    router\n  } = useBaseHook();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: modalVisible,\n    1: setModalVisible\n  } = useState(false);\n  const [form] = Form.useForm();\n  const userGroupService = new UserGroupService();\n  const confirmRef = React.createRef();\n  const {\n    checkPermission\n  } = usePermissionHook();\n  const deletePer = checkPermission({\n    \"admin.userGroups\": \"D\"\n  }); //submit form\n\n  const onFinish = async values => {\n    setLoading(true);\n    let [error, result] = await to(userGroupService.edit({\n      id: group.id,\n      values\n    }));\n    setLoading(false);\n\n    if (error) {\n      return notify(t(`errors:${error.code}`), t(error.message), 'error');\n    }\n\n    notify(t(\"message.recordUpdated\"));\n    redirect(\"frontend.admin.userGroups.index\");\n  };\n\n  const onDelete = async () => {\n    let [error, result] = await to(userGroupService.delete({\n      ids: [group.id]\n    }));\n\n    if (error) {\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error');\n    }\n\n    notify(t('message.recordDeleted'));\n    redirect(\"frontend.admin.userGroups.index\");\n  };\n\n  const renderDeleteDialog = () => {\n    return __jsx(ConfirmDialog, {\n      ref: confirmRef,\n      onSubmit: onDelete,\n      title: t('deleteItem'),\n      content: t('message.deleteConfirm'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    name: \"createUserGroup\",\n    initialValues: {\n      name: group.name,\n      description: group.description\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), __jsx(Form.Item, {\n    label: t(\"name\"),\n    name: \"name\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    label: t(\"description\"),\n    name: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: () => router.back(),\n    style: {\n      marginRight: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, __jsx(LeftCircleFilled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }), \" \", t('cancel')), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    style: {\n      marginRight: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, __jsx(SaveFilled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }), \" \", t('submit')), __jsx(Button, {\n    hidden: !deletePer,\n    danger: true,\n    onClick: () => {\n      if (confirmRef.current) confirmRef.current.show(group.id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, __jsx(DeleteFilled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }), \" \", t('deleteItem')))), renderDeleteDialog()));\n};\n\nEdit.getInitialProps = async ctx => {\n  const userGroupService = new UserGroupService(ctx);\n  const query = ctx.query;\n  let error;\n\n  if (!query.id) {\n    //error missing id\n    error = {\n      code: 9996,\n      message: 'missing ID'\n    };\n  }\n\n  let [userError, group] = await to(userGroupService.detail({\n    id: query.id\n  }));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    error: error,\n    group: group\n  };\n};\n\nEdit.permissions = {\n  \"root\": \"U\"\n};\nexport default Edit;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/userGroups/edit.tsx"],"names":["ConfirmDialog","React","useState","Layout","Button","Form","Input","Select","Typography","UserGroupService","to","useBaseHook","LeftCircleFilled","SaveFilled","DeleteFilled","usePermissionHook","Title","Text","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","Edit","group","t","notify","redirect","router","loading","setLoading","modalVisible","setModalVisible","form","useForm","userGroupService","confirmRef","createRef","checkPermission","deletePer","onFinish","values","error","result","edit","id","code","message","onDelete","delete","ids","renderDeleteDialog","name","description","required","textAlign","back","marginRight","current","show","getInitialProps","ctx","query","userError","detail","namespacesRequired","permissions"],"mappings":"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","sourcesContent":["import ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\n\r\nimport React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Row, Col, Form, Input, Select, Typography } from 'antd';\r\nimport UserGroupService from 'themes/services/api/UserGroupService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { LeftCircleFilled, SaveFilled, DeleteFilled } from '@ant-design/icons';\r\nimport BreadCrumb from 'themes/components/Breadcumb'\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nconst { Title, Text } = Typography;\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 18 },\r\n  },\r\n};\r\n\r\n\r\nconst Edit = ({ group }: { group: UserGroup }) => {\r\n  const { t, notify, redirect, router } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [modalVisible, setModalVisible] = useState(false)\r\n  const [form] = Form.useForm();\r\n  const userGroupService = new UserGroupService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const deletePer = checkPermission({\r\n    \"admin.userGroups\": \"D\"\r\n  })\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    setLoading(true)\r\n    let [error, result]: any[] = await to(userGroupService.edit({\r\n      id: group.id,\r\n      values\r\n    }));\r\n    setLoading(false)\r\n\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(error.message), 'error')\r\n    }\r\n    notify(t(\"message.recordUpdated\"))\r\n    redirect(\"frontend.admin.userGroups.index\")\r\n  }\r\n\r\n  const onDelete = async (): Promise<void> => {\r\n    let [error, result]: any[] = await to(userGroupService.delete({ ids: [group.id] }));\r\n\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t('message.recordDeleted'))\r\n    redirect(\"frontend.admin.userGroups.index\")\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"createUserGroup\"\r\n        initialValues={{\r\n          name: group.name,\r\n          description: group.description,\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"name\")}\r\n          name=\"name\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={t(\"description\")}\r\n          name=\"description\"\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: \"center\" }}>\r\n          <Button onClick={() => router.back()} style={{ marginRight: 8 }}>\r\n            <LeftCircleFilled /> {t('cancel')}\r\n          </Button>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading} style={{ marginRight: 8 }}>\r\n            <SaveFilled /> {t('submit')}\r\n          </Button>\r\n          <Button hidden={!deletePer} danger onClick={() => { if (confirmRef.current) confirmRef.current.show(group.id) }}>\r\n            <DeleteFilled /> {t('deleteItem')}\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nEdit.getInitialProps = async (ctx: any) => {\r\n  const userGroupService = new UserGroupService(ctx)\r\n  const query = ctx.query;\r\n  let error: any;\r\n\r\n  if (!query.id) {\r\n    //error missing id\r\n    error = {\r\n      code: 9996,\r\n      message: 'missing ID'\r\n    }\r\n  }\r\n\r\n  let [userError, group] = await to(userGroupService.detail({ id: query.id }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    error: error,\r\n    group: group,\r\n  }\r\n}\r\nEdit.permissions = {\r\n  \"root\": \"U\"\r\n}\r\nexport default Edit"]},"metadata":{},"sourceType":"module"}