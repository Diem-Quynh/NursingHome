{"ast":null,"code":"var _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\pages\\\\admin\\\\userGroups\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport Layout from 'themes/layouts/Admin';\nimport { GridTable, GridTableHelper } from 'themes/components/Table';\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\nimport { Button, Typography } from 'antd';\nimport UserGroupService from 'themes/services/api/UserGroupService';\nimport to from 'await-to-js';\nimport React, { useState } from 'react';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { PlusCircleOutlined, DeleteOutlined } from '@ant-design/icons';\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\nconst {\n  Title,\n  Text\n} = Typography;\n\nconst Index = ({\n  userGroups,\n  total\n}) => {\n  const {\n    t,\n    notify,\n    redirect,\n    setStore,\n    getAuth,\n    getStore\n  } = useBaseHook();\n  const {\n    0: hiddenDeleteBtn,\n    1: setHiddenDeleteBtn\n  } = useState(true);\n  const {\n    0: selectedIds,\n    1: setSelectedIds\n  } = useState([]);\n  const userGroupService = new UserGroupService();\n  const confirmRef = React.createRef();\n  const tableRef = React.createRef();\n  const {\n    checkPermission\n  } = usePermissionHook();\n  const createPer = checkPermission({\n    \"root\": \"C\"\n  });\n  const deletePer = checkPermission({\n    \"root\": \"D\"\n  });\n  const updatePer = checkPermission({\n    \"root\": \"U\"\n  });\n  const columns = [{\n    title: t('name'),\n    dataIndex: 'name',\n    key: 'name',\n    filterable: true,\n    sorter: true,\n    render: (text, record) => __jsx(\"a\", {\n      onClick: () => redirect('frontend.admin.userGroups.edit', {\n        id: record.id\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, record.name)\n  }, {\n    title: t(\"description\"),\n    dataIndex: 'description',\n    key: 'description'\n  }, {\n    title: t(\"userGroups.decentralization\"),\n    dataIndex: 'decentralization',\n    key: \"decentralization\",\n    render: (text, record) => {\n      if (createPer || updatePer) {\n        return __jsx(Button, {\n          onClick: () => redirect(\"frontend.admin.userGroups.role\", {\n            id: record.id\n          }),\n          type: \"primary\",\n          className: \"btn-top\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }\n        }, __jsx(PlusCircleOutlined, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }\n        }), t('userGroups.add'));\n      } else return \"\";\n    }\n  }];\n\n  const onChangeSelection = data => {\n    if (data.length > 0) {\n      setHiddenDeleteBtn(false);\n    } else {\n      setHiddenDeleteBtn(true);\n    }\n\n    setSelectedIds(data);\n  };\n\n  const fetchData = async values => {\n    let [error, userGroups] = await to(userGroupService.index(values));\n\n    if (error) {\n      const {\n        code,\n        message\n      } = error;\n      notify(t(`errors:${code}`), t(message), 'error');\n      return {};\n    }\n\n    return userGroups;\n  };\n\n  const onDelete = async () => {\n    let [error, result] = await to(userGroupService.delete({\n      ids: selectedIds\n    }));\n\n    if (error) {\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error');\n    }\n\n    notify(t(\"message.recordDeleted\"));\n\n    if (tableRef.current !== null) {\n      tableRef.current.reload();\n    }\n\n    setSelectedIds([]);\n    setHiddenDeleteBtn(true);\n  };\n\n  const renderDeleteDialog = () => {\n    return __jsx(ConfirmDialog, {\n      ref: confirmRef,\n      onSubmit: onDelete,\n      title: t('deleteItem'),\n      content: t('message.deleteConfirm'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return __jsx(Layout, {\n    title: t(\"pages:userGroups.index.title\"),\n    description: t(\"pages:userGroups.index.description\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, __jsx(Button, {\n    hidden: !createPer,\n    onClick: () => redirect(\"frontend.admin.userGroups.create\"),\n    type: \"primary\",\n    className: \"btn-top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, __jsx(PlusCircleOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }), t('create')), __jsx(Button, {\n    danger: true,\n    onClick: () => {\n      if (confirmRef.current) confirmRef.current.show();\n    },\n    className: \"btn-top\",\n    hidden: hiddenDeleteBtn || !deletePer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(DeleteOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), t('delete')), __jsx(GridTable, {\n    ref: tableRef,\n    columns: columns,\n    data: userGroups,\n    rowSelection: {\n      selectedRowKeys: selectedIds,\n      onChange: data => onChangeSelection(data)\n    },\n    fetchData: fetchData,\n    total: total,\n    scroll: {\n      x: 600,\n      scrollToFirstRowOnChange: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), renderDeleteDialog()));\n};\n\nIndex.getInitialProps = async ctx => {\n  let userGroupService = new UserGroupService(ctx);\n  let defaultOptions = {\n    filters: [],\n    sorting: []\n  };\n  let query = ctx.query;\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\n  let [error, userGroups] = await to(userGroupService.index(filters));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    error: error,\n    userGroups: useBaseHook.getData(userGroups, \"data\", []),\n    total: useBaseHook.getData(userGroups, \"total\", 0),\n    defaultQuery: {\n      filters: GridTableHelper.makeQuery(filters)\n    }\n  };\n};\n\nIndex.permissions = {\n  \"root\": \"R\"\n};\nexport default Index;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/userGroups/index.tsx"],"names":["Layout","GridTable","GridTableHelper","ConfirmDialog","Button","Typography","UserGroupService","to","React","useState","useBaseHook","PlusCircleOutlined","DeleteOutlined","usePermissionHook","Title","Text","Index","userGroups","total","t","notify","redirect","setStore","getAuth","getStore","hiddenDeleteBtn","setHiddenDeleteBtn","selectedIds","setSelectedIds","userGroupService","confirmRef","createRef","tableRef","checkPermission","createPer","deletePer","updatePer","columns","title","dataIndex","key","filterable","sorter","render","text","record","id","name","onChangeSelection","data","length","fetchData","values","error","index","code","message","onDelete","result","delete","ids","current","reload","renderDeleteDialog","show","selectedRowKeys","onChange","x","scrollToFirstRowOnChange","getInitialProps","ctx","defaultOptions","filters","sorting","query","getOptions","namespacesRequired","getData","defaultQuery","makeQuery","permissions"],"mappings":"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","sourcesContent":["import Layout from 'themes/layouts/Admin'\r\nimport { GridTable, GridTableHelper } from 'themes/components/Table';\r\nimport ConfirmDialog from 'themes/components/Dialogs/ConfirmDialog';\r\nimport { Button, Typography, Row, Col } from 'antd';\r\nimport UserGroupService from 'themes/services/api/UserGroupService';\r\nimport _ from 'lodash'\r\nimport to from 'await-to-js'\r\nimport React, { useState } from 'react';\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { UsergroupAddOutlined } from '@ant-design/icons';\r\nimport BreadCrumb from 'themes/components/Breadcumb'\r\nimport { PlusCircleOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport usePermissionHook from \"themes/hooks/PermissionHook\";\r\nconst { Title, Text } = Typography;\r\n\r\nconst Index = ({ userGroups, total }: { userGroups: UserGroup[], total: number }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [hiddenDeleteBtn, setHiddenDeleteBtn] = useState(true)\r\n  const [selectedIds, setSelectedIds] = useState([])\r\n  const userGroupService = new UserGroupService()\r\n  const confirmRef = React.createRef<ConfirmDialog>()\r\n  const tableRef = React.createRef<GridTable>()\r\n  const { checkPermission } = usePermissionHook();\r\n  const createPer = checkPermission({\r\n    \"root\": \"C\"\r\n  })\r\n  const deletePer = checkPermission({\r\n    \"root\": \"D\"\r\n  })\r\n  const updatePer = checkPermission({\r\n    \"root\": \"U\"\r\n  })\r\n  const columns = [\r\n    {\r\n      title: t('name'),\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      filterable:true,\r\n      sorter:true,\r\n      render: (text: string, record: any) =>\r\n        <a onClick={() => redirect('frontend.admin.userGroups.edit', { id: record.id })}>{record.name}</a>\r\n    },\r\n    {\r\n      title: t(\"description\"),\r\n      dataIndex: 'description',\r\n      key: 'description',\r\n    },\r\n    {\r\n      title: t(\"userGroups.decentralization\"),\r\n      dataIndex: 'decentralization',\r\n      key: \"decentralization\",\r\n      render: (text: string, record: any) => {\r\n        if (createPer || updatePer) {\r\n          return (\r\n          <Button onClick={() => redirect(\"frontend.admin.userGroups.role\", { id: record.id })} type=\"primary\" className='btn-top'>\r\n            <PlusCircleOutlined />\r\n            {t('userGroups.add')}\r\n          </Button>\r\n          )\r\n        } else return \"\"\r\n      }   \r\n    }\r\n  ]\r\n\r\n  const onChangeSelection = (data: any) => {\r\n    if (data.length > 0) {\r\n      setHiddenDeleteBtn(false)\r\n    }\r\n    else {\r\n      setHiddenDeleteBtn(true)\r\n    }\r\n    setSelectedIds(data)\r\n  }\r\n\r\n  const fetchData = async (values: any) => {\r\n    let [error, userGroups]: any[] = await to(userGroupService.index(values))\r\n    if (error) {\r\n      const { code, message } = error\r\n      notify(t(`errors:${code}`), t(message), 'error')\r\n      return {}\r\n    }\r\n    return userGroups\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    let [error, result]: any[] = await to(userGroupService.delete({ ids: selectedIds }));\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(`${error.message}`), 'error')\r\n    }\r\n    notify(t(\"message.recordDeleted\"));\r\n    if (tableRef.current !== null) {\r\n      tableRef.current.reload()\r\n    }\r\n    setSelectedIds([])\r\n    setHiddenDeleteBtn(true)\r\n  }\r\n\r\n  const renderDeleteDialog = () => {\r\n    return (\r\n      <ConfirmDialog\r\n        ref={confirmRef}\r\n        onSubmit={onDelete}\r\n        title={t('deleteItem')}\r\n        content={t('message.deleteConfirm')}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <Layout title={t(\"pages:userGroups.index.title\")} description={t(\"pages:userGroups.index.description\")}>\r\n    <div className=\"content\">\r\n      <Button hidden={!createPer} onClick={() => redirect(\"frontend.admin.userGroups.create\")} type=\"primary\" className='btn-top'>\r\n        <PlusCircleOutlined />\r\n        {t('create')}\r\n      </Button>\r\n      <Button danger onClick={() => { if (confirmRef.current) confirmRef.current.show() }} className='btn-top' hidden={hiddenDeleteBtn || !deletePer}>\r\n        <DeleteOutlined />\r\n        {t('delete')}\r\n      </Button>\r\n      <GridTable\r\n        ref={tableRef}\r\n        columns={columns}\r\n        data={userGroups}\r\n        rowSelection={{ selectedRowKeys: selectedIds, onChange: (data: any[]) => onChangeSelection(data) }}\r\n        fetchData={fetchData}\r\n        total={total}\r\n        scroll={{\r\n          x: 600, \r\n          scrollToFirstRowOnChange: true\r\n        }}\r\n      />\r\n      {renderDeleteDialog()}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nIndex.getInitialProps = async (ctx: any) => {\r\n  let userGroupService = new UserGroupService(ctx)\r\n  let defaultOptions = {\r\n    filters: [],\r\n    sorting: []\r\n  }\r\n  let query = ctx.query\r\n  let filters = GridTableHelper.getOptions(query, defaultOptions);\r\n  let [error, userGroups]: any[] = await to(userGroupService.index(filters))\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\r\n    error: error,\r\n    userGroups: useBaseHook.getData(userGroups, \"data\", []),\r\n    total: useBaseHook.getData(userGroups, \"total\", 0),\r\n    defaultQuery: {\r\n      filters: GridTableHelper.makeQuery(filters)\r\n    }\r\n  }\r\n}\r\nIndex.permissions = {\r\n  \"root\": \"R\"\r\n}\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}