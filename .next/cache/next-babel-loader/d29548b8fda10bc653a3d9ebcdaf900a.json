{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Input, Select, Radio, DatePicker } from 'antd';\nimport PatientService from 'themes/services/api/PatientService';\nimport BedService from 'themes/services/api/BedService';\nimport _ from 'lodash';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { DeleteFilled, LeftCircleFilled } from '@ant-design/icons';\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 18\n    }\n  }\n};\n\nconst Create = ({\n  beds\n}) => {\n  const {\n    t,\n    notify,\n    redirect,\n    setStore,\n    getAuth,\n    getStore\n  } = useBaseHook();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const [form] = Form.useForm();\n  const patientService = new PatientService(); //submit form\n\n  const onFinish = async values => {\n    console.log(values);\n    setLoading(true);\n    let [error, result] = await to(patientService.create(values));\n    setLoading(false);\n\n    if (error) {\n      return notify(t(`errors:${error.code}`), t(error.message), 'error');\n    }\n\n    notify(t(\"message.recordCreated\"));\n    redirect(\"frontend.admin.patients.index\");\n  }; //render option\n\n\n  const renderOption = () => {\n    let result = [];\n    beds.map(item => {\n      result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id\n      }, item.roomCode, \" - \", item.bedId, \" - \", item.status ? t('beds.full') : t('beds.empty')));\n    });\n    return result;\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    name: \"createPatient\",\n    initialValues: {\n      code: \"\",\n      fullname: \"\",\n      birthday: \"\",\n      gender: \"\",\n      address: \"\",\n      cardId: \"\",\n      phone: \"\",\n      medicalHistory: \"\",\n      dateIn: \"\",\n      dateOut: \"\",\n      bedId: undefined\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true\n  }), __jsx(Form.Item, {\n    label: t(\"code\"),\n    name: \"code\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: t(\"fullname\"),\n    name: \"fullname\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: t(\"birthday\"),\n    name: \"birthday\"\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    placeholder: t('placeholder.date')\n  })), __jsx(Form.Item, {\n    label: t(\"gender\"),\n    name: \"gender\"\n  }, __jsx(Radio.Group, null, __jsx(Radio, {\n    value: 0,\n    key: 0\n  }, t(\"male\")), __jsx(Radio, {\n    value: 1,\n    key: 1\n  }, t(\"female\")))), __jsx(Form.Item, {\n    label: t(\"address\"),\n    name: \"address\"\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: t(\"cardId\"),\n    name: \"cardId\",\n    rules: [{\n      pattern: /^[0-9]+$/g,\n      message: t('form.number')\n    }, {\n      max: 12,\n      message: t('form.maxLength', {\n        length: 12\n      })\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: t(\"phone\"),\n    name: \"phone\",\n    rules: [{\n      pattern: /^[0-9]+$/g,\n      message: t('form.number')\n    }, {\n      max: 12,\n      message: t('form.maxLength', {\n        length: 12\n      })\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: t(\"patients.medicalHistory\"),\n    name: \"medicalHistory\"\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    label: t(\"patients.dateIn\"),\n    name: \"dateIn\"\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    placeholder: t('placeholder.date')\n  })), __jsx(Form.Item, {\n    label: t(\"patients.dateOut\"),\n    name: \"dateOut\"\n  }, __jsx(DatePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false,\n    placeholder: t('placeholder.date')\n  })), __jsx(Form.Item, {\n    label: t(\"bed\"),\n    name: \"bedId\"\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: t('placeholder.bed'),\n    filterOption: (input, option) => {\n      return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    }\n  }, renderOption())), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    }\n  }, __jsx(Button, {\n    onClick: () => redirect(\"frontend.admin.patients.index\"),\n    style: {\n      marginRight: 8\n    }\n  }, __jsx(LeftCircleFilled, null), \" \", t('cancel')), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading\n  }, __jsx(DeleteFilled, null), \" \", t('submit'))))));\n};\n\nCreate.getInitialProps = async ctx => {\n  const bedService = new BedService(ctx);\n  const [error, beds] = await to(bedService.index({\n    pageSize: -1\n  }));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    error: error,\n    beds: _.get(beds, \"data\", [])\n  };\n};\n\nCreate.permissions = {\n  \"admin.patients\": \"C\",\n  \"receptionist.patients\": \"C\"\n};\nexport default Create;","map":{"version":3,"sources":["E:/DATN/nursinghome/pages/admin/patients/create.tsx"],"names":["React","useState","Layout","Button","Form","Input","Select","Radio","DatePicker","PatientService","BedService","_","to","useBaseHook","DeleteFilled","LeftCircleFilled","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","Create","beds","t","notify","redirect","setStore","getAuth","getStore","loading","setLoading","form","useForm","patientService","onFinish","values","console","log","error","result","create","code","message","renderOption","map","item","push","id","roomCode","bedId","status","fullname","birthday","gender","address","cardId","phone","medicalHistory","dateIn","dateOut","undefined","required","pattern","max","length","input","option","children","toLowerCase","indexOf","textAlign","marginRight","getInitialProps","ctx","bedService","index","pageSize","namespacesRequired","get","permissions"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Row, Col, Form, Input, Select, InputNumber, Radio, DatePicker } from 'antd';\r\nimport PatientService from 'themes/services/api/PatientService';\r\nimport BedService from 'themes/services/api/BedService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { DeleteFilled, LeftCircleFilled } from '@ant-design/icons';\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 18 },\r\n  },\r\n};\r\n\r\nconst Create = ({ beds }: { beds: Bed[] }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const patientService = new PatientService()\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    console.log(values)\r\n    setLoading(true)\r\n    let [error, result]: any[] = await to(patientService.create(values));\r\n    setLoading(false)\r\n\r\n    if (error) {\r\n      return notify(t(`errors:${error.code}`), t(error.message), 'error')\r\n    }\r\n    notify(t(\"message.recordCreated\"))\r\n    redirect(\"frontend.admin.patients.index\")\r\n  }\r\n\r\n  //render option\r\n  const renderOption = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    beds.map(item => {\r\n      result.push(\r\n      <Option value={item.id} key={item.id}>{item.roomCode} - {item.bedId} - {item.status?t('beds.full'):t('beds.empty')}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n  \r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"createPatient\"\r\n        initialValues={{\r\n          code: \"\",\r\n          fullname: \"\",\r\n          birthday: \"\",\r\n          gender: \"\",\r\n          address: \"\",\r\n          cardId: \"\",\r\n          phone: \"\",\r\n          medicalHistory: \"\",\r\n          dateIn: \"\",\r\n          dateOut: \"\",\r\n          bedId: undefined\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"code\")}\r\n          name=\"code\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"fullname\")}\r\n          name=\"fullname\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"birthday\")}\r\n          name=\"birthday\"\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} showTime={false} placeholder={t('placeholder.date')} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"gender\")}\r\n          name=\"gender\"\r\n        >\r\n          <Radio.Group>\r\n            <Radio value={0} key={0}>{t(\"male\")}</Radio>\r\n            <Radio value={1} key={1}>{t(\"female\")}</Radio>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"address\")}\r\n          name=\"address\"\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"cardId\")}\r\n          name=\"cardId\"\r\n          rules={[\r\n            { pattern: /^[0-9]+$/g, message: t('form.number') },\r\n            { max: 12, message: t('form.maxLength', { length: 12 }) }\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"phone\")}\r\n          name=\"phone\"\r\n          rules={[\r\n            { pattern: /^[0-9]+$/g, message: t('form.number') },\r\n            { max: 12, message: t('form.maxLength', { length: 12 }) }\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"patients.medicalHistory\")}\r\n          name=\"medicalHistory\"\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"patients.dateIn\")}\r\n          name=\"dateIn\"\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} showTime={false} placeholder={t('placeholder.date')} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"patients.dateOut\")}\r\n          name=\"dateOut\"\r\n        >\r\n          <DatePicker format={'YYYY-MM-DD'} showTime={false} placeholder={t('placeholder.date')} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"bed\")}\r\n          name=\"bedId\"\r\n        >\r\n          <Select\r\n            showSearch\r\n            placeholder={t('placeholder.bed')}\r\n            filterOption={(input: any, option: any) => {\r\n              return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            }}\r\n          >\r\n            {renderOption()}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{textAlign: \"center\"}}>\r\n          <Button onClick={() => redirect(\"frontend.admin.patients.index\")} style={{ marginRight: 8}}>\r\n            <LeftCircleFilled /> {t('cancel')}\r\n          </Button>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n            <DeleteFilled /> {t('submit')}\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nCreate.getInitialProps = async (ctx: any) => {\r\n  const bedService = new BedService(ctx)\r\n  const [error, beds] = await to(bedService.index({ pageSize: -1 }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages','menu','errors'],\r\n    error: error,\r\n    beds: _.get(beds, \"data\", []),\r\n  }\r\n}\r\nCreate.permissions = {\r\n  \"admin.patients\": \"C\",\r\n  \"receptionist.patients\": \"C\"\r\n};\r\nexport default Create"]},"metadata":{},"sourceType":"module"}