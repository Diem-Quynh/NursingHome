{"ast":null,"code":"var _jsxFileName = \"E:\\\\DATN\\\\nursinghome\\\\themes\\\\components\\\\Table\\\\Table.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Table, Button, Input, Radio, Divider } from 'antd';\nimport { addQuery } from 'themes/route';\nimport { withRouter, useRouter } from 'next/router';\nimport Highlighter from \"react-highlight-words\";\nimport { Base64 } from 'js-base64';\nimport _ from 'lodash';\nimport FilterInput from './SearchComponents/Input';\nimport DatePicker from './SearchComponents/DatePicker';\n\nclass GridTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"defaultOptionToColumns\", defaultOptions => {\n      this.columns = this.columns.map(column => {\n        //set field\n        if (!column.field) column.field = column.key;\n        let sort = defaultOptions.sorting.find(item => item.field === column.field);\n\n        if (sort) {\n          let {\n            direction\n          } = sort;\n          column.sortOrder = direction === \"asc\" ? 'ascend' : 'descend';\n        }\n\n        let filters = defaultOptions.filters.filter(item => item.field === column.field);\n\n        if (filters.length) {\n          column.filteredValue = [...filters];\n        } else {\n          delete column.filteredValue;\n        }\n\n        if (column.filterable) {\n          //    delete column.filterable;\n          column = _objectSpread(_objectSpread({}, column), this.getColumnSearchProps(column, 'input'));\n        }\n\n        if (column.filterDate) {\n          //    delete column.filterable;\n          column = _objectSpread(_objectSpread({}, column), this.getColumnSearchProps(column, 'date'));\n        }\n\n        if (column.filterCheck) {\n          column = _objectSpread(_objectSpread({}, column), {}, {\n            filters: [{\n              text: column.text['0'],\n              value: 0\n            }, {\n              text: column.text['1'],\n              value: 1\n            }],\n            onFilter: (value, record) => record.name.includes(value)\n          });\n        }\n\n        return column;\n      });\n    });\n\n    _defineProperty(this, \"getColumnSearchProps\", (column, type) => {\n      let ref = React.createRef();\n      return {\n        filterDropdown: ({\n          confirm,\n          setSelectedKeys\n        }) => {\n          let confirmFnc = values => {\n            let currentColumn = this.columns.find(c => c.dataIndex === column.dataIndex);\n            setSelectedKeys(values);\n            confirm();\n            this.reload();\n          };\n\n          if (column.renderFilter) {\n            return column.renderFilter({\n              column,\n              confirm: confirmFnc,\n              ref\n            });\n          }\n\n          if (type == 'input') return __jsx(FilterInput, {\n            column: column,\n            ref: ref,\n            confirm: confirmFnc,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 28\n            }\n          });\n          if (type == 'date') return __jsx(DatePicker, {\n            column: column,\n            ref: ref,\n            confirm: confirmFnc,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 28\n            }\n          });\n        },\n        filterIcon: filtered => __jsx(SearchOutlined, {\n          style: {\n            color: filtered ? \"#1890ff\" : undefined\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }\n        }),\n        onFilterDropdownVisibleChange: visible => {\n          if (!visible && column.visibleSearch != visible) {\n            column.visibleSearch = visible;\n\n            if (ref.current) {\n              ref.current.onSubmit();\n            }\n          }\n\n          column.visibleSearch = visible;\n        }\n      };\n    });\n\n    _defineProperty(this, \"clearAll\", async () => {\n      let {\n        pageSize,\n        page\n      } = this.pagination;\n      await this.handleTableChange({\n        pageSize,\n        current: page\n      }, {}, {});\n    });\n\n    _defineProperty(this, \"setFiltersToColumns\", (filters = {}) => {\n      this.columns = this.columns.map(column => {\n        let filter = filters[column.field];\n\n        if (filter) {\n          column.filteredValue = filter;\n        } else {\n          delete column.filteredValue;\n        }\n\n        return column;\n      });\n    });\n\n    _defineProperty(this, \"setSorterToColumns\", (sorter = {}) => {\n      this.columns = this.columns.map(column => {\n        if (column.key == sorter.columnKey) {\n          column.sortOrder = sorter.order;\n        } else {\n          delete column.sortOrder;\n        }\n\n        return column;\n      });\n    });\n\n    _defineProperty(this, \"setPagination\", pagination => {\n      this.pagination = {\n        pageSize: pagination.pageSize,\n        page: pagination.current - 1\n      };\n    });\n\n    _defineProperty(this, \"handleTableChange\", async (pagination, filters, sorter) => {\n      this.setFiltersToColumns(filters);\n      this.setSorterToColumns(sorter);\n      this.setPagination(pagination);\n      this.reload();\n    });\n\n    _defineProperty(this, \"buildFetchData\", () => {\n      let params = {\n        filters: [],\n        sorting: [],\n        pageSize: this.pagination.pageSize,\n        page: this.pagination.page\n      };\n      this.columns.map(column => {\n        if (column.filteredValue) {\n          params.filters = [...params.filters, ...column.filteredValue];\n        }\n\n        if (column.sortOrder) {\n          params.sorting.push({\n            field: column.field,\n            direction: column.sortOrder == \"ascend\" ? \"asc\" : \"desc\"\n          });\n        }\n      });\n      return params;\n    });\n\n    _defineProperty(this, \"getPagination\", (pagination = {}) => {\n      const {\n        pageSize,\n        page\n      } = this.pagination;\n      return _objectSpread(_objectSpread({}, pagination), {}, {\n        total: this.total,\n        position: 'bottom',\n        pageSize: pageSize || 50,\n        current: page + 1,\n        showSizeChanger: true,\n        pageSizeOptions: ['2', '10', '50', '100', '200', '500']\n      });\n    });\n\n    this.initialProps = {\n      bordered: true,\n      size: 'middle',\n      showHeader: true,\n      hasData: true\n    };\n    this.state = {\n      loading: false,\n      reload: false\n    };\n    this.pagination = {};\n    this.total = this.props.total || 100;\n    this.data = this.props.data;\n    this.handleTableChange = this.handleTableChange.bind(this);\n  }\n  /**\r\n   * Khởi tạo các options từ query trên url\r\n   */\n\n\n  init() {\n    const query = this.props.router.query;\n    const defaultOptions = GridTable.getDataFromQuery(query, this.props);\n    this.pagination = {\n      pageSize: defaultOptions.pageSize || 50,\n      page: defaultOptions.page || 0\n    };\n    this.columns = this.props.columns;\n    this.defaultOptionToColumns(defaultOptions);\n  }\n  /**\r\n   * Convert lại dữ liệu từ query đổi sang đúng format của column trong antd\r\n   */\n\n\n  componentDidMount() {\n    this.init();\n    this.setState({\n      reload: !this.state.reload\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    //update data trong trường hợp đổi từ props bên ngoài\n    if (JSON.stringify(prevProps.data) !== JSON.stringify(this.props.data)) {\n      this.data = this.props.data;\n    }\n\n    if (JSON.stringify(this.props.router.query) != JSON.stringify(prevProps.router.query)) {\n      this.init();\n      this.setState({\n        reload: !this.state.reload\n      }); //chỉ cần render lại view\n    }\n  }\n\n  static makeQuery(options) {\n    const {\n      filters = [],\n      sorting = [],\n      pageSize,\n      page\n    } = options;\n    let queryObj = {\n      f: [],\n      s: {},\n      ps: pageSize,\n      p: page\n    };\n\n    for (let filter of filters) {\n      queryObj.f.push([filter.field, filter.operator || 'contains', filter.value]);\n    }\n\n    for (let sort of sorting) {\n      queryObj.s[sort.field] = sort.direction;\n    }\n\n    return Base64.encode(JSON.stringify(queryObj));\n  }\n  /**\r\n   * Khai báo các function cho dropdown search box\r\n   */\n\n\n  /**\r\n   * Reload Table\r\n   */\n  async reload() {\n    this.setState({\n      loading: true\n    });\n\n    if (typeof this.props.fetchData === 'function') {\n      const params = this.buildFetchData();\n      const queryOptions = GridTable.makeQuery(params); // console.log(params, queryOptions)\n\n      addQuery({\n        filters: queryOptions\n      });\n      let result = (await this.props.fetchData(params)) || {};\n      if (result.total != undefined) this.total = result.total;\n      this.data = _.get(result, 'data', []);\n    }\n\n    this.setState({\n      loading: false\n    });\n  }\n  /**\r\n   * Set filter từ table vào biến this.columns để controlled\r\n   */\n\n\n  static getDataFromQuery(query = {}, defaultOptions = {}) {\n    let queryObj = query.filters || {};\n\n    if (typeof query.filters == 'string') {\n      try {\n        queryObj = JSON.parse(Base64.decode(query.filters));\n      } catch (e) {\n        throw new Error(`filters params invalid format.`);\n      }\n    }\n\n    if (!queryObj) return {};\n    let filters = queryObj.f || [];\n    let sorting = queryObj.s || {};\n    let queryOut = {\n      filters: defaultOptions.filters || [],\n      sorting: defaultOptions.sorting || [],\n      pageSize: queryObj.ps || defaultOptions.pageSize,\n      page: queryObj.p || defaultOptions.page\n    };\n\n    for (let filter of filters) {\n      queryOut.filters.push({\n        field: filter[0],\n        operator: filter[1],\n        value: filter[2]\n      });\n    }\n\n    for (let field in sorting) {\n      queryOut.sorting.push({\n        field: field,\n        direction: sorting[field]\n      });\n    }\n\n    return queryOut;\n  }\n\n  static getOptions(query, defaultOptions) {\n    if (query && Object.keys(query).length > 0) return this.getDataFromQuery(query, defaultOptions);\n    return defaultOptions;\n  }\n  /**\r\n   * Build data từ this.columns để khớp với format trên server\r\n   */\n\n\n  render() {\n    const _this$props = this.props,\n          {\n      hasData = true,\n      data = [],\n      ellipsis,\n      fetchData,\n      columns,\n      pagination\n    } = _this$props,\n          otherProps = _objectWithoutProperties(_this$props, [\"hasData\", \"data\", \"ellipsis\", \"fetchData\", \"columns\", \"pagination\"]);\n\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }\n    }, __jsx(Table, _extends({}, this.initialProps, {\n      // tableLayout=\"fixed\"\n      scroll: {\n        x: 900,\n        scrollToFirstRowOnChange: true\n      }\n    }, otherProps, {\n      columns: this.columns,\n      dataSource: hasData ? this.data.map(row => _objectSpread(_objectSpread({}, row), {}, {\n        key: row.id\n      })) : null,\n      onChange: this.handleTableChange,\n      loading: this.state.loading,\n      pagination: this.getPagination(pagination),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }\n    })));\n  }\n\n}\n\nexport default GridTable;","map":{"version":3,"sources":["E:/DATN/nursinghome/themes/components/Table/Table.jsx"],"names":["SearchOutlined","Table","Button","Input","Radio","Divider","addQuery","withRouter","useRouter","Highlighter","Base64","_","FilterInput","DatePicker","GridTable","React","Component","constructor","props","defaultOptions","columns","map","column","field","key","sort","sorting","find","item","direction","sortOrder","filters","filter","length","filteredValue","filterable","getColumnSearchProps","filterDate","filterCheck","text","value","onFilter","record","name","includes","type","ref","createRef","filterDropdown","confirm","setSelectedKeys","confirmFnc","values","currentColumn","c","dataIndex","reload","renderFilter","filterIcon","filtered","color","undefined","onFilterDropdownVisibleChange","visible","visibleSearch","current","onSubmit","pageSize","page","pagination","handleTableChange","sorter","columnKey","order","setFiltersToColumns","setSorterToColumns","setPagination","params","push","total","position","showSizeChanger","pageSizeOptions","initialProps","bordered","size","showHeader","hasData","state","loading","data","bind","init","query","router","getDataFromQuery","defaultOptionToColumns","componentDidMount","setState","componentDidUpdate","prevProps","JSON","stringify","makeQuery","options","queryObj","f","s","ps","p","operator","encode","fetchData","buildFetchData","queryOptions","result","get","parse","decode","e","Error","queryOut","getOptions","Object","keys","render","ellipsis","otherProps","x","scrollToFirstRowOnChange","row","id","getPagination"],"mappings":"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","sourcesContent":["import { SearchOutlined } from '@ant-design/icons';\r\nimport { Table, Button, Input, Radio, Divider } from 'antd';\r\nimport { addQuery } from 'themes/route'\r\nimport { withRouter, useRouter } from 'next/router'\r\nimport Highlighter from \"react-highlight-words\";\r\nimport { Base64 } from 'js-base64';\r\nimport _ from 'lodash'\r\nimport FilterInput from './SearchComponents/Input'\r\nimport DatePicker from './SearchComponents/DatePicker'\r\n\r\nclass GridTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.initialProps = {\r\n            bordered: true,\r\n            size: 'middle',\r\n            showHeader: true,\r\n            hasData: true,\r\n        }\r\n\r\n        this.state = {\r\n            loading: false,\r\n            reload: false\r\n        }\r\n        this.pagination = {}\r\n        this.total = this.props.total || 100\r\n        this.data = this.props.data\r\n        this.handleTableChange = this.handleTableChange.bind(this)\r\n    }\r\n\r\n    /**\r\n     * Khởi tạo các options từ query trên url\r\n     */\r\n    init() {\r\n        const query = this.props.router.query\r\n        const defaultOptions = GridTable.getDataFromQuery(query, this.props)\r\n        this.pagination = {\r\n            pageSize: defaultOptions.pageSize || 50,\r\n            page: defaultOptions.page || 0,\r\n        }\r\n        this.columns = this.props.columns;\r\n\r\n        this.defaultOptionToColumns(defaultOptions);\r\n    }\r\n\r\n    /**\r\n     * Convert lại dữ liệu từ query đổi sang đúng format của column trong antd\r\n     */\r\n    defaultOptionToColumns = (defaultOptions) => {\r\n        this.columns = this.columns.map(column => {\r\n            //set field\r\n            if(!column.field) column.field = column.key\r\n            \r\n            let sort = defaultOptions.sorting.find(item => item.field === column.field);\r\n            if (sort) {\r\n                let { direction } = sort;\r\n                column.sortOrder = direction === \"asc\" ? 'ascend' : 'descend';\r\n            }\r\n            let filters = defaultOptions.filters.filter(item => item.field === column.field);\r\n            if (filters.length) {\r\n                column.filteredValue = [...filters];\r\n            }\r\n            else {\r\n                delete column.filteredValue\r\n            }\r\n            if (column.filterable) {\r\n                //    delete column.filterable;\r\n                column = { ...column, ...this.getColumnSearchProps(column,'input') }\r\n            }\r\n            if (column.filterDate) {\r\n                //    delete column.filterable;\r\n                column = { ...column, ...this.getColumnSearchProps(column,'date') }\r\n            }\r\n            if (column.filterCheck) {\r\n                column = { \r\n                    ...column, \r\n                    filters:[\r\n                        {text: column.text['0'], value: 0},\r\n                        {text: column.text['1'], value: 1}\r\n                    ],\r\n                    onFilter: (value, record) => record.name.includes(value)\r\n                }\r\n            }\r\n            return column;\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        this.init();\r\n        this.setState({reload: !this.state.reload})\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        //update data trong trường hợp đổi từ props bên ngoài\r\n        if (JSON.stringify(prevProps.data) !== JSON.stringify(this.props.data)) {\r\n            this.data = this.props.data;\r\n        }\r\n        if (JSON.stringify(this.props.router.query) != JSON.stringify(prevProps.router.query)) {\r\n            this.init();\r\n            this.setState({reload: !this.state.reload}) //chỉ cần render lại view\r\n        }\r\n    }\r\n\r\n    static makeQuery(options) {\r\n        const { filters = [], sorting = [], pageSize, page } = options\r\n        let queryObj = {\r\n            f: [],\r\n            s: {},\r\n            ps: pageSize,\r\n            p: page\r\n        }\r\n\r\n        for (let filter of filters) {\r\n            queryObj.f.push([filter.field, filter.operator || 'contains', filter.value])\r\n        }\r\n        for (let sort of sorting) {\r\n            queryObj.s[sort.field] = sort.direction\r\n        }\r\n        return Base64.encode(JSON.stringify(queryObj))\r\n    }\r\n\r\n    /**\r\n     * Khai báo các function cho dropdown search box\r\n     */\r\n    getColumnSearchProps = (column,type) => {\r\n        let ref = React.createRef()\r\n        return {\r\n            filterDropdown: ({ confirm, setSelectedKeys }) => {\r\n                let confirmFnc = (values) => {\r\n                    let currentColumn = this.columns.find(c => c.dataIndex === column.dataIndex)\r\n                    setSelectedKeys(values)\r\n                    confirm()\r\n                    this.reload();\r\n                }\r\n                if (column.renderFilter) {\r\n                    return column.renderFilter({ column, confirm: confirmFnc, ref })\r\n                }\r\n                if(type == 'input')\r\n                    return <FilterInput\r\n                        column={column}\r\n                        ref={ref}\r\n                        confirm={confirmFnc}\r\n                    />\r\n                if(type == 'date')\r\n                    return <DatePicker\r\n                        column={column}\r\n                        ref={ref}\r\n                        confirm={confirmFnc}\r\n                    />\r\n                \r\n            },\r\n            filterIcon: filtered => (\r\n                <SearchOutlined style={{ color: filtered ? \"#1890ff\" : undefined }} />\r\n            ),\r\n            onFilterDropdownVisibleChange: visible => {\r\n                if (!visible && column.visibleSearch != visible) {\r\n                    column.visibleSearch = visible\r\n                    if (ref.current) {\r\n                        ref.current.onSubmit();\r\n                    }\r\n                }\r\n                column.visibleSearch = visible\r\n                \r\n            }\r\n        };\r\n    }\r\n\r\n    clearAll = async () => {\r\n        let { pageSize, page } = this.pagination\r\n        await this.handleTableChange({ pageSize, current: page }, {}, {})\r\n    }\r\n\r\n    /**\r\n     * Reload Table\r\n     */\r\n    async reload() {\r\n        this.setState({ loading: true })\r\n        if (typeof this.props.fetchData === 'function') {\r\n            const params = this.buildFetchData()\r\n            \r\n            const queryOptions = GridTable.makeQuery(params)\r\n            // console.log(params, queryOptions)\r\n            addQuery({ filters: queryOptions })\r\n            \r\n            let result = await this.props.fetchData(params) || {}\r\n            if (result.total != undefined) this.total = result.total\r\n            this.data = _.get(result, 'data', []);\r\n        }\r\n        this.setState({ loading: false })\r\n    }\r\n\r\n    /**\r\n     * Set filter từ table vào biến this.columns để controlled\r\n     */\r\n    setFiltersToColumns = (filters = {}) => {\r\n        this.columns = this.columns.map(column => {\r\n            let filter = filters[column.field];\r\n            if (filter) {\r\n                column.filteredValue = filter;\r\n            } else {\r\n                delete column.filteredValue;\r\n            }\r\n            return column;\r\n        })\r\n    }\r\n\r\n    setSorterToColumns = (sorter = {}) => {\r\n        this.columns = this.columns.map(column => {\r\n            if (column.key == sorter.columnKey) {\r\n                column.sortOrder = sorter.order;\r\n            } else {\r\n                delete column.sortOrder;\r\n            }\r\n            return column;\r\n        })\r\n    }\r\n    setPagination = (pagination) => {\r\n        this.pagination = {\r\n            pageSize: pagination.pageSize,\r\n            page: pagination.current - 1\r\n        }\r\n    }\r\n\r\n\r\n    handleTableChange = async (pagination, filters, sorter) => {\r\n        this.setFiltersToColumns(filters);\r\n        this.setSorterToColumns(sorter);\r\n        this.setPagination(pagination);\r\n        this.reload();\r\n    }\r\n\r\n    static getDataFromQuery(query = {}, defaultOptions = {}) {\r\n        let queryObj = query.filters || {}\r\n        if (typeof query.filters == 'string') {\r\n            try {\r\n                queryObj = JSON.parse(Base64.decode(query.filters))\r\n            }\r\n            catch (e) {\r\n                throw new Error(`filters params invalid format.`)\r\n            }\r\n        }\r\n        if (!queryObj) return {}\r\n        let filters = queryObj.f || []\r\n        let sorting = queryObj.s || {}\r\n        let queryOut = {\r\n            filters: defaultOptions.filters || [],\r\n            sorting: defaultOptions.sorting || [],\r\n            pageSize: queryObj.ps || defaultOptions.pageSize,\r\n            page: queryObj.p || defaultOptions.page\r\n        } \r\n\r\n        for (let filter of filters) {\r\n            queryOut.filters.push({\r\n                field: filter[0],\r\n                operator: filter[1],\r\n                value: filter[2]\r\n            })\r\n        }\r\n        for (let field in sorting) {\r\n            queryOut.sorting.push({\r\n                field: field,\r\n                direction: sorting[field]\r\n            })\r\n        }\r\n\r\n        return queryOut;\r\n    }\r\n\r\n    static getOptions(query, defaultOptions) {\r\n        if (query && Object.keys(query).length > 0) return this.getDataFromQuery(query, defaultOptions)\r\n        return defaultOptions\r\n    }\r\n\r\n    /**\r\n     * Build data từ this.columns để khớp với format trên server\r\n     */\r\n    buildFetchData = () => {\r\n        let params = {\r\n            filters: [],\r\n            sorting: [],\r\n            pageSize: this.pagination.pageSize,\r\n            page: this.pagination.page\r\n        }\r\n\r\n        this.columns.map(column => {\r\n            if (column.filteredValue) {\r\n                params.filters = [\r\n                    ...params.filters,\r\n                    ...column.filteredValue\r\n                ]\r\n            }\r\n            if (column.sortOrder) {\r\n                params.sorting.push({\r\n                    field: column.field,\r\n                    direction: column.sortOrder == \"ascend\" ? \"asc\" : \"desc\",\r\n                })\r\n            }\r\n        })\r\n        return params\r\n\r\n    }\r\n\r\n    getPagination = (pagination = {}) => {\r\n        const { pageSize, page } = this.pagination;\r\n        return {\r\n            ...pagination,\r\n            total: this.total,\r\n            position: 'bottom',\r\n            pageSize: pageSize || 50,\r\n            current: page + 1,\r\n            showSizeChanger: true,\r\n            pageSizeOptions: ['2', '10', '50', '100', '200', '500']\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { hasData = true, data = [], ellipsis, fetchData, columns, pagination, ...otherProps } = this.props;\r\n        return (\r\n            <div>\r\n                <Table\r\n                    {...this.initialProps}\r\n                    // tableLayout=\"fixed\"\r\n                    scroll={{\r\n                        x: 900,\r\n                        scrollToFirstRowOnChange: true\r\n                    }}\r\n                    {...otherProps}\r\n                    columns={this.columns}\r\n                    dataSource={hasData ? this.data.map(row => ({ ...row, key: row.id })) : null}\r\n                    onChange={this.handleTableChange}\r\n                    loading={this.state.loading}\r\n                    pagination={this.getPagination(pagination)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridTable"]},"metadata":{},"sourceType":"module"}