{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport Layout from 'themes/layouts/Admin';\nimport { Button, Form, Select, DatePicker } from 'antd';\nimport HealthService from 'themes/services/api/HealthStatusService';\nimport PatientService from 'themes/services/api/PatientService';\nimport _ from 'lodash';\nimport to from 'await-to-js';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { RightCircleFilled } from '@ant-design/icons';\nimport { TimelineChart } from 'ant-design-pro/lib/Charts'; // import {ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\n\nconst {\n  RangePicker\n} = DatePicker;\nimport moment from 'moment';\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 9\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 15\n    }\n  }\n};\n\nconst Statistic = ({\n  patients\n}) => {\n  const {\n    t,\n    notify,\n    redirect,\n    setStore,\n    getAuth,\n    getStore\n  } = useBaseHook();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: bloodPressure,\n    1: setbloodPressure\n  } = useState([{\n    x: 1000,\n    y1: 100,\n    y2: 100\n  }]);\n  const [form] = Form.useForm();\n  const healthService = new HealthService();\n\n  const DisplayError = err => {\n    return notify(t(`errors:${err.code}`), t(err.message), 'error');\n  };\n\n  const getBloodPressure = param => {\n    let blood = {\n      bloodPressureUpper: '',\n      bloodPressureLower: ''\n    };\n\n    if (param) {\n      const index = param.indexOf('/');\n      const bloodPressureUpper = param.slice(0, index);\n      const bloodPressureLower = param.slice(index + 1);\n      blood = {\n        bloodPressureUpper: bloodPressureUpper,\n        bloodPressureLower: bloodPressureLower\n      };\n    }\n\n    return blood;\n  }; //submit form\n\n\n  const onFinish = async values => {\n    setLoading(true);\n    const dateStart = moment(values.date[0]).startOf(\"days\").add(14, 'h').toISOString();\n    const dateEnd = moment(values.date[1]).startOf(\"days\").add(14, 'h').toISOString();\n    const filterPatient = JSON.stringify({\n      field: \"patientId\",\n      operator: \"=\",\n      value: values.patientId\n    });\n    const filterDate = JSON.stringify({\n      field: \"date\",\n      operator: \"between\",\n      value: [dateStart, dateEnd]\n    });\n    const sorter = JSON.stringify({\n      field: \"date\",\n      direction: \"asc\"\n    });\n    setLoading(false);\n    const [error, result] = await to(healthService.index({\n      pageSize: -1,\n      filters: [filterPatient, filterDate],\n      sorting: [sorter]\n    }));\n    if (error) return DisplayError(error);\n\n    if (!_.isEmpty(result.data)) {\n      let healths = [];\n      result.data.map(item => {\n        let blood = getBloodPressure(item.bloodPressure);\n        healths.push({\n          x: new Date(item.date).getTime(),\n          y1: Number(blood.bloodPressureUpper),\n          y2: Number(blood.bloodPressureLower)\n        });\n      });\n      setbloodPressure(healths);\n    }\n  }; //render option\n\n\n  const renderOptionPatient = () => {\n    let result = [];\n    patients.map(item => {\n      result.push(__jsx(Option, {\n        value: item.id,\n        key: item.id\n      }, item.code, \" - \", item.fullname, \" - \", item.roomCode, \" - \", item.bedCode));\n    });\n    return result;\n  };\n  /* //   render chart Blood pressure\r\n  const renderChartBloodPressure = () => {\r\n      if((bloodPressure.length)>0)\r\n          return <TimelineChart height={200} data={bloodPressure} titleMap={{ y1: t('healthStatuses.upperIndex'), y2: t('healthStatuses.lowerIndex') }} />\r\n      return <div></div>\r\n  } */\n\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    layout: \"inline\",\n    name: \"statisticHealth\",\n    initialValues: {\n      patientId: undefined,\n      date: \"\"\n    },\n    onFinish: onFinish,\n    scrollToFirstError: true\n  }), __jsx(Form.Item, {\n    label: t(\"patient\"),\n    name: \"patientId\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: t('placeholder.patient'),\n    filterOption: (input, option) => {\n      return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    }\n  }, renderOptionPatient())), __jsx(Form.Item, {\n    label: t(\"healthStatuses.date\"),\n    name: \"date\",\n    rules: [{\n      required: true,\n      message: t('form.required')\n    }]\n  }, __jsx(RangePicker, {\n    format: 'YYYY-MM-DD',\n    showTime: false\n  })), __jsx(Form.Item, {\n    wrapperCol: {\n      span: 24\n    },\n    style: {\n      textAlign: \"center\"\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    style: {\n      marginRight: 8\n    }\n  }, t('statistic'), \" \", __jsx(RightCircleFilled, null)))), __jsx(TimelineChart, {\n    height: 200,\n    data: bloodPressure,\n    titleMap: {\n      y1: t('healthStatuses.upperIndex'),\n      y2: t('healthStatuses.lowerIndex')\n    }\n  })));\n};\n\nStatistic.getInitialProps = async ctx => {\n  const patientService = new PatientService(ctx);\n  const [errorPatient, patients] = await to(patientService.index({\n    pageSize: -1\n  }));\n  return {\n    namespacesRequired: ['common', 'pages', 'menu', 'errors'],\n    patients: _.get(patients, \"data\", [])\n  };\n};\n\nStatistic.permissions = {\n  \"admin.healthStatuses\": \"U\"\n};\nexport default Statistic;","map":{"version":3,"sources":["E:/nursinghome_github/pages/admin/statistics/healthStatus.tsx"],"names":["React","useState","Layout","Button","Form","Select","DatePicker","HealthService","PatientService","_","to","useBaseHook","RightCircleFilled","TimelineChart","RangePicker","moment","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","Statistic","patients","t","notify","redirect","setStore","getAuth","getStore","loading","setLoading","bloodPressure","setbloodPressure","x","y1","y2","form","useForm","healthService","DisplayError","err","code","message","getBloodPressure","param","blood","bloodPressureUpper","bloodPressureLower","index","indexOf","slice","onFinish","values","dateStart","date","startOf","add","toISOString","dateEnd","filterPatient","JSON","stringify","field","operator","value","patientId","filterDate","sorter","direction","error","result","pageSize","filters","sorting","isEmpty","data","healths","map","item","push","Date","getTime","Number","renderOptionPatient","id","fullname","roomCode","bedCode","undefined","required","input","option","children","toLowerCase","textAlign","marginRight","getInitialProps","ctx","patientService","errorPatient","namespacesRequired","get","permissions"],"mappings":"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","sourcesContent":["import React, { useState, Component } from 'react'\r\nimport Layout from 'themes/layouts/Admin'\r\nimport { Button, Form, Input, Select, DatePicker, InputNumber } from 'antd';\r\nimport HealthService from 'themes/services/api/HealthStatusService';\r\nimport PatientService from 'themes/services/api/PatientService';\r\nimport _ from 'lodash';\r\nimport to from 'await-to-js'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { RightCircleFilled } from '@ant-design/icons';\r\nimport { TimelineChart } from 'ant-design-pro/lib/Charts';\r\n// import {ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\r\nconst { RangePicker } = DatePicker;\r\nimport moment from 'moment'\r\n\r\nconst { Option } = Select\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 9 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 15 },\r\n  },\r\n};\r\n\r\ninterface bloodPressureChar {\r\n    x: number,\r\n    y1: number,\r\n    y2: number\r\n}\r\n\r\nconst Statistic = ({ patients }: { patients: Patient[] }) => {\r\n  const { t, notify, redirect, setStore, getAuth, getStore } = useBaseHook();\r\n  const [loading, setLoading] = useState(false);\r\n  const [bloodPressure, setbloodPressure] = useState([{x:1000,y1:100,y2:100}]);\r\n  const [form] = Form.useForm();\r\n  const healthService = new HealthService()\r\n\r\n  const DisplayError = (err: any) => {\r\n    return notify(t(`errors:${err.code}`), t(err.message), 'error')\r\n  }\r\n\r\n  const getBloodPressure = (param: string) => {\r\n    let blood = {bloodPressureUpper: '', bloodPressureLower: ''}\r\n    if(param) {\r\n      const index = param.indexOf('/')\r\n      const bloodPressureUpper = param.slice(0,index)\r\n      const bloodPressureLower = param.slice(index + 1)\r\n      blood = {bloodPressureUpper: bloodPressureUpper, bloodPressureLower: bloodPressureLower}\r\n    }\r\n    return blood\r\n  }\r\n\r\n  //submit form\r\n  const onFinish = async (values: any): Promise<void> => {\r\n    setLoading(true)\r\n    const dateStart = moment(values.date[0]).startOf(\"days\").add(14,'h').toISOString()\r\n    const dateEnd = moment(values.date[1]).startOf(\"days\").add(14,'h').toISOString()\r\n    const filterPatient = JSON.stringify({field:\"patientId\",operator:\"=\",value:values.patientId})\r\n    const filterDate = JSON.stringify({field:\"date\",operator:\"between\",value:[dateStart, dateEnd]})\r\n    const sorter = JSON.stringify({field:\"date\", direction:\"asc\"})\r\n    setLoading(false)\r\n    const [error, result] = await to(healthService.index({ pageSize: -1, filters: [filterPatient, filterDate], sorting: [sorter] }));\r\n    if(error) return DisplayError(error)\r\n    if(!_.isEmpty(result.data)) {\r\n        let healths: bloodPressureChar[] = []\r\n        result.data.map((item: any) => {\r\n            let blood = getBloodPressure(item.bloodPressure)\r\n            healths.push({x: new Date(item.date).getTime(), y1: Number(blood.bloodPressureUpper), y2: Number(blood.bloodPressureLower)})\r\n        })\r\n        setbloodPressure(healths)\r\n    }\r\n  }\r\n\r\n  //render option\r\n  const renderOptionPatient = (): JSX.Element[] => {\r\n    let result: JSX.Element[] = [];\r\n    patients.map(item => {\r\n      result.push(\r\n      <Option value={item.id} key={item.id}>{item.code} - {item.fullname} - {item.roomCode} - {item.bedCode}</Option>\r\n      )\r\n    })\r\n    return result;\r\n  }\r\n\r\n    /* //   render chart Blood pressure\r\n    const renderChartBloodPressure = () => {\r\n        if((bloodPressure.length)>0)\r\n            return <TimelineChart height={200} data={bloodPressure} titleMap={{ y1: t('healthStatuses.upperIndex'), y2: t('healthStatuses.lowerIndex') }} />\r\n        return <div></div>\r\n    } */\r\n\r\n\r\n  return <Layout>\r\n    <div className=\"content\">\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        layout=\"inline\"\r\n        name=\"statisticHealth\"\r\n        initialValues={{\r\n          patientId: undefined,\r\n          date: \"\",\r\n        }}\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          label={t(\"patient\")}\r\n          name=\"patientId\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <Select \r\n            showSearch\r\n            placeholder = {t('placeholder.patient')}\r\n            filterOption={ (input: any, option: any) => {\r\n              return option.children[0].toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            } }\r\n          >\r\n            {renderOptionPatient()}\r\n          </Select>\r\n        </Form.Item>\r\n        \r\n        <Form.Item\r\n          label={t(\"healthStatuses.date\")}\r\n          name=\"date\"\r\n          rules={[\r\n            { required: true, message: t('form.required') },\r\n          ]}\r\n        >\r\n          <RangePicker format={'YYYY-MM-DD'} showTime={false} />\r\n        </Form.Item>\r\n\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: \"center\" }}>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading} style={{ marginRight: 8 }}>\r\n          {t('statistic')} <RightCircleFilled /> \r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      <TimelineChart height={200} data={bloodPressure} titleMap={{ y1: t('healthStatuses.upperIndex'), y2: t('healthStatuses.lowerIndex') }} />\r\n      {/* {renderChartBloodPressure()} */}\r\n\r\n      {/* <LineChart width={600} height={300} data={data}\r\n            margin={{top: 5, right: 30, left: 20, bottom: 5}}>\r\n       <XAxis dataKey=\"name\"/>\r\n       <YAxis/>\r\n       <CartesianGrid strokeDasharray=\"3 3\"/>\r\n       <Tooltip/>\r\n       <Legend />\r\n       <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{r: 8}}/>\r\n       <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\r\n      </LineChart> */}\r\n    </div>\r\n  </Layout>\r\n}\r\n\r\nStatistic.getInitialProps = async (ctx: any) => {\r\n  const patientService = new PatientService(ctx)\r\n\r\n  const [errorPatient, patients] = await to(patientService.index({ pageSize: -1 }));\r\n  return {\r\n    namespacesRequired: ['common', 'pages', 'menu','errors'],\r\n    patients: _.get(patients, \"data\", [])\r\n  }\r\n}\r\nStatistic.permissions = {\r\n  \"admin.healthStatuses\": \"U\"\r\n};\r\nexport default Statistic"]},"metadata":{},"sourceType":"module"}