{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Breadcrumb } from \"antd\";\nimport { getBreadcrumbs, route as makeUrl } from 'themes/route';\nimport Link from 'next/link';\nimport _routes from 'themes/_routes.json';\nimport useBaseHook from 'themes/hooks/BaseHooks';\nimport { HomeFilled } from \"@ant-design/icons\";\n\nvar breadCrumbComponent = function breadCrumbComponent() {\n  _s();\n\n  var _useBaseHook = useBaseHook({\n    lang: ['menu']\n  }),\n      router = _useBaseHook.router,\n      t = _useBaseHook.t,\n      redirect = _useBaseHook.redirect;\n\n  var getRouteName = function getRouteName() {\n    var routePath = router.pathname;\n    var routeData = _routes;\n\n    for (var _routeName in routeData) {\n      var routeElement = routeData[_routeName];\n      if (!routeElement.action) continue;\n      if (routeElement.action.substr(5) === routePath) return _routeName;\n    }\n  };\n\n  var breadCumbs = [];\n  var routeName = getRouteName();\n  var routes = getBreadcrumbs(routeName);\n\n  if (routes[0] && routes[0].name != \"frontend.admin.home\") {\n    routes.unshift({\n      name: 'frontend.admin.home'\n    });\n  }\n\n  var _iterator = _createForOfIteratorHelper(routes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var route = _step.value;\n\n      try {\n        var linkProps = makeUrl(route.name);\n        breadCumbs.push(__jsx(Breadcrumb.Item, {\n          key: route.name\n        }, __jsx(Link, linkProps, __jsx(\"a\", null, route.name == \"frontend.admin.home\" ? __jsx(HomeFilled, null) : t(route.name)))));\n      } catch (e) {\n        breadCumbs.push(__jsx(Breadcrumb.Item, {\n          key: route.name\n        }, t(route.name)));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return __jsx(Breadcrumb, null, breadCumbs);\n};\n\n_s(breadCrumbComponent, \"5ur10hxxNneoezc79kpo9X4T2T4=\", false, function () {\n  return [useBaseHook];\n});\n\nexport default breadCrumbComponent;","map":{"version":3,"sources":["E:/nursinghome_github/themes/components/Breadcumb/index.tsx"],"names":["Breadcrumb","getBreadcrumbs","route","makeUrl","Link","_routes","useBaseHook","HomeFilled","breadCrumbComponent","lang","router","t","redirect","getRouteName","routePath","pathname","routeData","routeName","routeElement","action","substr","breadCumbs","routes","name","unshift","linkProps","push","e"],"mappings":";;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,MAA3B;AACA,SAASC,cAAT,EAAyBC,KAAK,IAAIC,OAAlC,QAAiD,cAAjD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,mBAA3B;;AAKA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAAA;;AAAA,qBACEF,WAAW,CAAC;AAAEG,IAAAA,IAAI,EAAE,CAAC,MAAD;AAAR,GAAD,CADb;AAAA,MACtBC,MADsB,gBACtBA,MADsB;AAAA,MACdC,CADc,gBACdA,CADc;AAAA,MACXC,QADW,gBACXA,QADW;;AAE9B,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB,QAAMC,SAAS,GAAGJ,MAAM,CAACK,QAAzB;AACA,QAAMC,SAAc,GAAGX,OAAvB;;AACA,SAAK,IAAIY,UAAT,IAAsBD,SAAtB,EAAiC;AAC7B,UAAIE,YAAY,GAAGF,SAAS,CAACC,UAAD,CAA5B;AACA,UAAI,CAACC,YAAY,CAACC,MAAlB,EAA0B;AAC1B,UAAID,YAAY,CAACC,MAAb,CAAoBC,MAApB,CAA2B,CAA3B,MAAkCN,SAAtC,EAAiD,OAAOG,UAAP;AACpD;AACJ,GARD;;AASA,MAAII,UAAU,GAAG,EAAjB;AACA,MAAMJ,SAAS,GAAGJ,YAAY,EAA9B;AACA,MAAIS,MAAe,GAAGrB,cAAc,CAACgB,SAAD,CAApC;;AACA,MAAIK,MAAM,CAAC,CAAD,CAAN,IAAaA,MAAM,CAAC,CAAD,CAAN,CAAUC,IAAV,IAAkB,qBAAnC,EAA0D;AACtDD,IAAAA,MAAM,CAACE,OAAP,CAAe;AACXD,MAAAA,IAAI,EAAE;AADK,KAAf;AAGH;;AAlB6B,6CAmBZD,MAnBY;AAAA;;AAAA;AAmB9B,wDAA0B;AAAA,UAAjBpB,KAAiB;;AACtB,UAAI;AACA,YAAIuB,SAAS,GAAGtB,OAAO,CAACD,KAAK,CAACqB,IAAP,CAAvB;AACAF,QAAAA,UAAU,CAACK,IAAX,CAAgB,MAAC,UAAD,CAAY,IAAZ;AAAiB,UAAA,GAAG,EAAExB,KAAK,CAACqB;AAA5B,WACZ,MAAC,IAAD,EAAUE,SAAV,EACI,iBAAKvB,KAAK,CAACqB,IAAN,IAAc,qBAAd,GAAsC,MAAC,UAAD,OAAtC,GAAuDZ,CAAC,CAACT,KAAK,CAACqB,IAAP,CAA7D,CADJ,CADY,CAAhB;AAKH,OAPD,CAQA,OAAMI,CAAN,EAAS;AACLN,QAAAA,UAAU,CAACK,IAAX,CAAgB,MAAC,UAAD,CAAY,IAAZ;AAAiB,UAAA,GAAG,EAAExB,KAAK,CAACqB;AAA5B,WACXZ,CAAC,CAACT,KAAK,CAACqB,IAAP,CADU,CAAhB;AAGH;AACJ;AAjC6B;AAAA;AAAA;AAAA;AAAA;;AAmC9B,SAAO,MAAC,UAAD,QAAaF,UAAb,CAAP;AAEH,CArCD;;GAAMb,mB;UAC8BF,W;;;AAsCpC,eAAeE,mBAAf","sourcesContent":["import { Breadcrumb } from \"antd\"\r\nimport { getBreadcrumbs, route as makeUrl } from 'themes/route'\r\nimport Link from 'next/link'\r\nimport _routes from 'themes/_routes.json'\r\nimport useBaseHook from 'themes/hooks/BaseHooks'\r\nimport { HomeFilled } from \"@ant-design/icons\"\r\ninterface Route {\r\n    name: string,\r\n}\r\n\r\nconst breadCrumbComponent = () => {\r\n    const { router, t, redirect } = useBaseHook({ lang: ['menu'] })\r\n    const getRouteName = () => {\r\n        const routePath = router.pathname\r\n        const routeData: any = _routes\r\n        for (let routeName in routeData) {\r\n            let routeElement = routeData[routeName]\r\n            if (!routeElement.action) continue;\r\n            if (routeElement.action.substr(5) === routePath) return routeName\r\n        }\r\n    }\r\n    let breadCumbs = []\r\n    const routeName = getRouteName()\r\n    let routes: Route[] = getBreadcrumbs(routeName)\r\n    if (routes[0] && routes[0].name != \"frontend.admin.home\") {\r\n        routes.unshift({\r\n            name: 'frontend.admin.home',\r\n        })\r\n    }\r\n    for (let route of routes) {\r\n        try {\r\n            let linkProps = makeUrl(route.name)\r\n            breadCumbs.push(<Breadcrumb.Item key={route.name}>\r\n                <Link {...linkProps}>\r\n                    <a>{ route.name == \"frontend.admin.home\" ? <HomeFilled /> : t(route.name) }</a>\r\n                </Link>\r\n            </Breadcrumb.Item>)\r\n        }\r\n        catch(e) {\r\n            breadCumbs.push(<Breadcrumb.Item key={route.name}>\r\n                {t(route.name)}\r\n            </Breadcrumb.Item>)\r\n        }\r\n    }\r\n\r\n    return <Breadcrumb>{breadCumbs}</Breadcrumb>\r\n\r\n}\r\n\r\nexport default breadCrumbComponent"]},"metadata":{},"sourceType":"module"}